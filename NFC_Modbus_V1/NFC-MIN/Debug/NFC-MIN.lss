
NFC-MIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00803800  00001b76  00001c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000520  00803966  00803966  00001d70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000844b  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003158  00000000  00000000  0000a613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027ef  00000000  00000000  0000d76b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000744  00000000  00000000  0000ff5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028e0  00000000  00000000  000106a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002571  00000000  00000000  00012f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  000154f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_8>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_27>
      70:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_28>
      74:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_29>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	98 01       	movw	r18, r16
      7e:	72 04       	cpc	r7, r2
      80:	72 04       	cpc	r7, r2
      82:	4d 02       	muls	r20, r29
      84:	72 04       	cpc	r7, r2
      86:	72 04       	cpc	r7, r2
      88:	72 04       	cpc	r7, r2
      8a:	72 04       	cpc	r7, r2
      8c:	72 04       	cpc	r7, r2
      8e:	72 04       	cpc	r7, r2
      90:	72 04       	cpc	r7, r2
      92:	72 04       	cpc	r7, r2
      94:	72 04       	cpc	r7, r2
      96:	a1 02       	muls	r26, r17
      98:	72 04       	cpc	r7, r2
      9a:	72 04       	cpc	r7, r2
      9c:	72 04       	cpc	r7, r2
      9e:	72 04       	cpc	r7, r2
      a0:	72 04       	cpc	r7, r2
      a2:	72 04       	cpc	r7, r2
      a4:	72 04       	cpc	r7, r2
      a6:	72 04       	cpc	r7, r2
      a8:	72 04       	cpc	r7, r2
      aa:	72 04       	cpc	r7, r2
      ac:	72 04       	cpc	r7, r2
      ae:	72 04       	cpc	r7, r2
      b0:	72 04       	cpc	r7, r2
      b2:	72 04       	cpc	r7, r2
      b4:	72 04       	cpc	r7, r2
      b6:	72 04       	cpc	r7, r2
      b8:	72 04       	cpc	r7, r2
      ba:	72 04       	cpc	r7, r2
      bc:	72 04       	cpc	r7, r2
      be:	72 04       	cpc	r7, r2
      c0:	72 04       	cpc	r7, r2
      c2:	72 04       	cpc	r7, r2
      c4:	72 04       	cpc	r7, r2
      c6:	72 04       	cpc	r7, r2
      c8:	72 04       	cpc	r7, r2
      ca:	72 04       	cpc	r7, r2
      cc:	72 04       	cpc	r7, r2
      ce:	72 04       	cpc	r7, r2
      d0:	72 04       	cpc	r7, r2
      d2:	72 04       	cpc	r7, r2
      d4:	72 04       	cpc	r7, r2
      d6:	72 04       	cpc	r7, r2
      d8:	72 04       	cpc	r7, r2
      da:	72 04       	cpc	r7, r2
      dc:	72 04       	cpc	r7, r2
      de:	72 04       	cpc	r7, r2
      e0:	72 04       	cpc	r7, r2
      e2:	72 04       	cpc	r7, r2
      e4:	72 04       	cpc	r7, r2
      e6:	72 04       	cpc	r7, r2
      e8:	72 04       	cpc	r7, r2
      ea:	72 04       	cpc	r7, r2
      ec:	72 04       	cpc	r7, r2
      ee:	72 04       	cpc	r7, r2
      f0:	72 04       	cpc	r7, r2
      f2:	72 04       	cpc	r7, r2
      f4:	72 04       	cpc	r7, r2
      f6:	72 04       	cpc	r7, r2
      f8:	5f 03       	fmul	r21, r23
      fa:	72 04       	cpc	r7, r2
      fc:	f9 01       	movw	r30, r18
      fe:	72 04       	cpc	r7, r2
     100:	d9 03       	fmulsu	r21, r17
     102:	1f 04       	cpc	r1, r15
     104:	85 07       	cpc	r24, r21
     106:	bd 07       	cpc	r27, r29
     108:	bd 07       	cpc	r27, r29
     10a:	8d 07       	cpc	r24, r29
     10c:	bd 07       	cpc	r27, r29
     10e:	bd 07       	cpc	r27, r29
     110:	bd 07       	cpc	r27, r29
     112:	bd 07       	cpc	r27, r29
     114:	bd 07       	cpc	r27, r29
     116:	bd 07       	cpc	r27, r29
     118:	bd 07       	cpc	r27, r29
     11a:	bd 07       	cpc	r27, r29
     11c:	bd 07       	cpc	r27, r29
     11e:	95 07       	cpc	r25, r21
     120:	bd 07       	cpc	r27, r29
     122:	bd 07       	cpc	r27, r29
     124:	bd 07       	cpc	r27, r29
     126:	bd 07       	cpc	r27, r29
     128:	bd 07       	cpc	r27, r29
     12a:	bd 07       	cpc	r27, r29
     12c:	bd 07       	cpc	r27, r29
     12e:	bd 07       	cpc	r27, r29
     130:	bd 07       	cpc	r27, r29
     132:	bd 07       	cpc	r27, r29
     134:	bd 07       	cpc	r27, r29
     136:	bd 07       	cpc	r27, r29
     138:	bd 07       	cpc	r27, r29
     13a:	bd 07       	cpc	r27, r29
     13c:	bd 07       	cpc	r27, r29
     13e:	bd 07       	cpc	r27, r29
     140:	bd 07       	cpc	r27, r29
     142:	bd 07       	cpc	r27, r29
     144:	bd 07       	cpc	r27, r29
     146:	bd 07       	cpc	r27, r29
     148:	bd 07       	cpc	r27, r29
     14a:	bd 07       	cpc	r27, r29
     14c:	bd 07       	cpc	r27, r29
     14e:	bd 07       	cpc	r27, r29
     150:	bd 07       	cpc	r27, r29
     152:	bd 07       	cpc	r27, r29
     154:	bd 07       	cpc	r27, r29
     156:	bd 07       	cpc	r27, r29
     158:	bd 07       	cpc	r27, r29
     15a:	bd 07       	cpc	r27, r29
     15c:	bd 07       	cpc	r27, r29
     15e:	bd 07       	cpc	r27, r29
     160:	bd 07       	cpc	r27, r29
     162:	bd 07       	cpc	r27, r29
     164:	bd 07       	cpc	r27, r29
     166:	bd 07       	cpc	r27, r29
     168:	bd 07       	cpc	r27, r29
     16a:	bd 07       	cpc	r27, r29
     16c:	bd 07       	cpc	r27, r29
     16e:	bd 07       	cpc	r27, r29
     170:	bd 07       	cpc	r27, r29
     172:	bd 07       	cpc	r27, r29
     174:	bd 07       	cpc	r27, r29
     176:	bd 07       	cpc	r27, r29
     178:	bd 07       	cpc	r27, r29
     17a:	bd 07       	cpc	r27, r29
     17c:	bd 07       	cpc	r27, r29
     17e:	bd 07       	cpc	r27, r29
     180:	9d 07       	cpc	r25, r29
     182:	bd 07       	cpc	r27, r29
     184:	a5 07       	cpc	r26, r21
     186:	bd 07       	cpc	r27, r29
     188:	ad 07       	cpc	r26, r29
     18a:	b5 07       	cpc	r27, r21

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	df e3       	ldi	r29, 0x3F	; 63
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	19 e3       	ldi	r17, 0x39	; 57
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b8 e3       	ldi	r27, 0x38	; 56
     19e:	e6 e7       	ldi	r30, 0x76	; 118
     1a0:	fb e1       	ldi	r31, 0x1B	; 27
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	a6 36       	cpi	r26, 0x66	; 102
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	2e e3       	ldi	r18, 0x3E	; 62
     1b0:	a6 e6       	ldi	r26, 0x66	; 102
     1b2:	b9 e3       	ldi	r27, 0x39	; 57
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a6 38       	cpi	r26, 0x86	; 134
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 aa 05 	call	0xb54	; 0xb54 <main>
     1c2:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1ca:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <system_init>
     1ce:	08 95       	ret

000001d0 <LedCtrl_init>:
					uint8_t
---------------------------------------------------------------------------------------
*/
void LedCtrl_heartBeatSetInterval(LedCtrl_STYP *lc,uint16_t interval)
{
	lc->HeartBeatBlinkInterval = interval;
     1d0:	2c e2       	ldi	r18, 0x2C	; 44
     1d2:	31 e0       	ldi	r19, 0x01	; 1
     1d4:	fc 01       	movw	r30, r24
     1d6:	22 83       	std	Z+2, r18	; 0x02
     1d8:	33 83       	std	Z+3, r19	; 0x03
     1da:	08 95       	ret

000001dc <LedCtrl_HeartBeatBlink>:
     1dc:	fc 01       	movw	r30, r24
     1de:	80 81       	ld	r24, Z
     1e0:	91 81       	ldd	r25, Z+1	; 0x01
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	21 f0       	breq	.+8      	; 0x1ee <LedCtrl_HeartBeatBlink+0x12>
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	80 83       	st	Z, r24
     1ea:	91 83       	std	Z+1, r25	; 0x01
     1ec:	08 95       	ret
     1ee:	82 81       	ldd	r24, Z+2	; 0x02
     1f0:	93 81       	ldd	r25, Z+3	; 0x03
     1f2:	80 83       	st	Z, r24
     1f4:	91 83       	std	Z+1, r25	; 0x01
     1f6:	34 9a       	sbi	0x06, 4	; 6
     1f8:	08 95       	ret

000001fa <LedCtrl_ledsManager>:

=====================================================================================
*/
void LedCtrl_ledsManager(LedCtrl_STYP *lc,uint8_t errorCode)
{
	LedCtrl_HeartBeatBlink(lc);
     1fa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LedCtrl_HeartBeatBlink>
     1fe:	08 95       	ret

00000200 <MinSlave_spNothingToRespondPRIV>:
 History:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    08-09-2019  Original code                                       Tom Van Sistine
----------------------------------------------------------------------------------------
 */
static uint8_t MinSlave_spNothingToRespondPRIV(void) {
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
	uint16_t crc;
	uint8_t txLength;
	uint8_t * dataPtr;

	txBuf[MIN_FC65_TYPE_CODE_INDEX] = MIN_FC65_NO_RESPONSE_CODE;
     204:	c8 e6       	ldi	r28, 0x68	; 104
     206:	d9 e3       	ldi	r29, 0x39	; 57
     208:	1a 82       	std	Y+2, r1	; 0x02

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX + 1];
	crc = get_crc_16 (0xFFFF, txBuf, (MIN_FC65_NO_RESPONSE_LENGTH - MIN_CRC_LENGTH));         // Calculate the CRC to send with reply
     20a:	43 e0       	ldi	r20, 0x03	; 3
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	be 01       	movw	r22, r28
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	9f ef       	ldi	r25, 0xFF	; 255
     214:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     218:	8b 83       	std	Y+3, r24	; 0x03
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     21a:	9c 83       	std	Y+4, r25	; 0x04
	txLength = MIN_FC65_NO_RESPONSE_LENGTH;
	return txLength;
}
     21c:	85 e0       	ldi	r24, 0x05	; 5
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <MinSlave_sendReplyPRIV>:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    07-11-2019  Original code                                       Tom Van Sistine

 ----------------------------------------------------------------------------------------
 */
void MinSlave_sendReplyPRIV(uint8_t * pSrc, uint8_t txLength) {
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	1f 92       	push	r1
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	unsigned char data;
	assert(txLength);
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <MinSlave_sendReplyPRIV+0x1a>
     23a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <abort>
	assert(pSrc);
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f4       	brne	.+4      	; 0x246 <MinSlave_sendReplyPRIV+0x22>
     242:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <abort>
     246:	8c 01       	movw	r16, r24
     248:	61 50       	subi	r22, 0x01	; 1
     24a:	e6 2e       	mov	r14, r22
     24c:	f1 2c       	mov	r15, r1
     24e:	2f ef       	ldi	r18, 0xFF	; 255
     250:	e2 1a       	sub	r14, r18
     252:	f2 0a       	sbc	r15, r18
     254:	e8 0e       	add	r14, r24
     256:	f9 1e       	adc	r15, r25
	for (i = 0; i < txLength; i++) {
		data = (unsigned char)*pSrc++;
     258:	f8 01       	movw	r30, r16
     25a:	91 91       	ld	r25, Z+
     25c:	8f 01       	movw	r16, r30
     25e:	99 83       	std	Y+1, r25	; 0x01
		(void) HardwareUart_SendChar(data);
     260:	ce 01       	movw	r24, r28
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	0e 94 9a 05 	call	0xb34	; 0xb34 <USART_SendChar>
void MinSlave_sendReplyPRIV(uint8_t * pSrc, uint8_t txLength) {
	uint8_t i;
	unsigned char data;
	assert(txLength);
	assert(pSrc);
	for (i = 0; i < txLength; i++) {
     268:	e0 16       	cp	r14, r16
     26a:	f1 06       	cpc	r15, r17
     26c:	a9 f7       	brne	.-22     	; 0x258 <MinSlave_sendReplyPRIV+0x34>
		data = (unsigned char)*pSrc++;
		(void) HardwareUart_SendChar(data);
	}
	if(i == txLength){
		Enable_TXInterrupt(); 
     26e:	0e 94 a4 05 	call	0xb48	; 0xb48 <USART_SetTxInterrupt>
	}
}
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	08 95       	ret

00000282 <MinSlave_init>:

void MinSlave_init(MinSlave_STYP *minSlave) {

	// Initialize all member values

	minSlave->changeDataFlag = FALSE;
     282:	fc 01       	movw	r30, r24
     284:	11 a6       	std	Z+41, r1	; 0x29
	minSlave->communicationTimeoutCNTR = ONE_SECOND_TIME;
     286:	28 ee       	ldi	r18, 0xE8	; 232
     288:	33 e0       	ldi	r19, 0x03	; 3
     28a:	22 a3       	std	Z+34, r18	; 0x22
     28c:	33 a3       	std	Z+35, r19	; 0x23
	minSlave->delayDoneFLG = FALSE;
     28e:	13 a6       	std	Z+43, r1	; 0x2b

	// Save reference to itself so it can support Slave parameter get requests.
	pMinSlaveSelf = minSlave;
     290:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <__data_end>
     294:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <__data_end+0x1>

	// Initialize the class object
	MinUart_init(&minSlave->uart);
     298:	8f 96       	adiw	r24, 0x2f	; 47
     29a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <MinUart_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     29e:	0e 98       	cbi	0x01, 6	; 1
     2a0:	08 95       	ret

000002a2 <MinSlave_manageMessages>:
1.03	07-07-2020	Added get and store method for product info		 Anish Venkataraman
					FC69 and FC70	
---------------------------------------------------------------------------------------
 */

void MinSlave_manageMessages(void) {
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	da 95       	dec	r29
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	de bf       	out	0x3e, r29	; 62

	// If pointer to itself has not been initialized, return.
	if (pMinSlaveSelf == 0) {
     2b8:	80 91 66 39 	lds	r24, 0x3966	; 0x803966 <__data_end>
     2bc:	90 91 67 39 	lds	r25, 0x3967	; 0x803967 <__data_end+0x1>
     2c0:	89 2b       	or	r24, r25
     2c2:	41 f4       	brne	.+16     	; 0x2d4 <MinSlave_manageMessages+0x32>
     2c4:	0f c3       	rjmp	.+1566   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		return;
	}
	// Poll UART Rx buffer for characters and call MinUart_ServiceRx() for each character
	// received until buffer is empty.
	while (HardwareUart_GetCharsInRxBuf() > (uint16_t) 0) {
		MinUart_serviceRx(&pMinSlaveSelf->uart);
     2c6:	80 91 66 39 	lds	r24, 0x3966	; 0x803966 <__data_end>
     2ca:	90 91 67 39 	lds	r25, 0x3967	; 0x803967 <__data_end+0x1>
     2ce:	8f 96       	adiw	r24, 0x2f	; 47
     2d0:	0e 94 08 07 	call	0xe10	; 0xe10 <MinUart_serviceRx>
	if (pMinSlaveSelf == 0) {
		return;
	}
	// Poll UART Rx buffer for characters and call MinUart_ServiceRx() for each character
	// received until buffer is empty.
	while (HardwareUart_GetCharsInRxBuf() > (uint16_t) 0) {
     2d4:	0e 94 70 05 	call	0xae0	; 0xae0 <USART_GetCharsInRxBuf>
     2d8:	81 11       	cpse	r24, r1
     2da:	f5 cf       	rjmp	.-22     	; 0x2c6 <MinSlave_manageMessages+0x24>
		MinUart_serviceRx(&pMinSlaveSelf->uart);
	}
	// Check if a packet of data from Master device (found in AinUart_ServiceRx()) is ready to process.
	if (pMinSlaveSelf->uart.processPacketFlag == FALSE) {
     2dc:	e0 91 66 39 	lds	r30, 0x3966	; 0x803966 <__data_end>
     2e0:	f0 91 67 39 	lds	r31, 0x3967	; 0x803967 <__data_end+0x1>
     2e4:	df 01       	movw	r26, r30
     2e6:	a7 5c       	subi	r26, 0xC7	; 199
     2e8:	be 4f       	sbci	r27, 0xFE	; 254
     2ea:	8c 91       	ld	r24, X
     2ec:	88 23       	and	r24, r24
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <MinSlave_manageMessages+0x50>
     2f0:	f9 c2       	rjmp	.+1522   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		return;
	}
	pMinSlaveSelf->validCommunicationReceivedFLG = TRUE; //Signal communications timer to reset.
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	82 a7       	std	Z+42, r24	; 0x2a

	// Packet is finished and checksum is OK
	pMinSlaveSelf->uart.processPacketFlag = FALSE;
     2f6:	1c 92       	st	X, r1

	// Reset no communications timer (if somehow no communications for a while Scheduler will reset for discover baud)
	pMinSlaveSelf->communicationTimeoutCNTR = ONE_SECOND_TIME;
     2f8:	88 ee       	ldi	r24, 0xE8	; 232
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	82 a3       	std	Z+34, r24	; 0x22
     2fe:	93 a3       	std	Z+35, r25	; 0x23

	MinTurnAroundDelayMAC();  // 2 msec delay before reply to give chance for master to turn off it TxEnable.
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>

	switch (pMinSlaveSelf->uart.functionCode) {
     308:	a0 91 66 39 	lds	r26, 0x3966	; 0x803966 <__data_end>
     30c:	b0 91 67 39 	lds	r27, 0x3967	; 0x803967 <__data_end+0x1>
     310:	fd 01       	movw	r30, r26
     312:	e0 5c       	subi	r30, 0xC0	; 192
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	e0 81       	ld	r30, Z
     318:	4e 2f       	mov	r20, r30
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	fa 01       	movw	r30, r20
     31e:	33 97       	sbiw	r30, 0x03	; 3
     320:	e4 34       	cpi	r30, 0x44	; 68
     322:	f1 05       	cpc	r31, r1
     324:	08 f0       	brcs	.+2      	; 0x328 <MinSlave_manageMessages+0x86>
     326:	de c2       	rjmp	.+1468   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     328:	e2 5c       	subi	r30, 0xC2	; 194
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__tablejump2__>
	uint8_t registerNumber;				//Requested Register
	uint16_t address;
	uint8_t length;
	uint8_t read[NFC_MAX_MEM];	//array to store read data
	// Setup reply
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     330:	28 e6       	ldi	r18, 0x68	; 104
     332:	39 e3       	ldi	r19, 0x39	; 57
     334:	cd 01       	movw	r24, r26
     336:	88 5c       	subi	r24, 0xC8	; 200
     338:	9e 4f       	sbci	r25, 0xFE	; 254
     33a:	fc 01       	movw	r30, r24
     33c:	80 81       	ld	r24, Z
     33e:	f9 01       	movw	r30, r18
     340:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC03;                    			// Function code
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	81 83       	std	Z+1, r24	; 0x01
	txBuf[MIN_FC03_BYTES_REPLY_INDEX] = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG;
     346:	d5 96       	adiw	r26, 0x35	; 53
     348:	1c 91       	ld	r17, X
     34a:	d5 97       	sbiw	r26, 0x35	; 53
     34c:	11 0f       	add	r17, r17
     34e:	12 83       	std	Z+2, r17	; 0x02
	length = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG; 
	// Get requested registers
	blockNumber = pMinSlaveSelf->uart.rxBuffer[MIN_FC16_BLOCK_INDEX];
     350:	d2 96       	adiw	r26, 0x32	; 50
     352:	9c 91       	ld	r25, X
     354:	d2 97       	sbiw	r26, 0x32	; 50
	//Set pointer to the Tx Buffer
	dataPtr = &txBuf[MIN_FC03_DATA_START];
	//Store Register Number
	registerNumber = (uint8_t) ((pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX] * 2));
     356:	d3 96       	adiw	r26, 0x33	; 51
     358:	8c 91       	ld	r24, X
     35a:	88 0f       	add	r24, r24

	//Reply with Block 2 Data
	if (blockNumber == BLOCK2) {
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	21 f4       	brne	.+8      	; 0x368 <MinSlave_manageMessages+0xc6>
		address = (uint16_t)(BLOCK2_OFFSET + registerNumber);
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	80 5e       	subi	r24, 0xE0	; 224
     364:	9e 4f       	sbci	r25, 0xFE	; 254
     366:	09 c0       	rjmp	.+18     	; 0x37a <MinSlave_manageMessages+0xd8>
	}
	//reply with Block 11 Data
	else if(blockNumber == BLOCK11){
     368:	9b 30       	cpi	r25, 0x0B	; 11
     36a:	21 f4       	brne	.+8      	; 0x374 <MinSlave_manageMessages+0xd2>
		address = (uint16_t)(BLOCK11_OFFSET + registerNumber);	
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	80 5e       	subi	r24, 0xE0	; 224
     370:	9d 4f       	sbci	r25, 0xFD	; 253
     372:	03 c0       	rjmp	.+6      	; 0x37a <MinSlave_manageMessages+0xd8>
	}
	else{
		address = (uint16_t)(BLOCK226_OFFSET + registerNumber);
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 5e       	subi	r24, 0xE0	; 224
     378:	9c 4f       	sbci	r25, 0xFC	; 252
	}
	NFC_SequentialRead(address,length,read);
     37a:	ae 01       	movw	r20, r28
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	5f 4f       	sbci	r21, 0xFF	; 255
     380:	61 2f       	mov	r22, r17
     382:	0e 94 9f 08 	call	0x113e	; 0x113e <NFC_SequentialRead>
	//Copy to txBuf
	for (i = 0; i < length; i++) {
     386:	11 23       	and	r17, r17
     388:	c1 f0       	breq	.+48     	; 0x3ba <MinSlave_manageMessages+0x118>
     38a:	fe 01       	movw	r30, r28
     38c:	31 96       	adiw	r30, 0x01	; 1
     38e:	ab e6       	ldi	r26, 0x6B	; 107
     390:	b9 e3       	ldi	r27, 0x39	; 57
     392:	4f ef       	ldi	r20, 0xFF	; 255
     394:	41 0f       	add	r20, r17
     396:	e4 2e       	mov	r14, r20
     398:	f1 2c       	mov	r15, r1
     39a:	a7 01       	movw	r20, r14
     39c:	4f 5f       	subi	r20, 0xFF	; 255
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	9f 01       	movw	r18, r30
     3a2:	24 0f       	add	r18, r20
     3a4:	35 1f       	adc	r19, r21
		*dataPtr++ = read[i];
     3a6:	81 91       	ld	r24, Z+
     3a8:	8d 93       	st	X+, r24
	else{
		address = (uint16_t)(BLOCK226_OFFSET + registerNumber);
	}
	NFC_SequentialRead(address,length,read);
	//Copy to txBuf
	for (i = 0; i < length; i++) {
     3aa:	2e 17       	cp	r18, r30
     3ac:	3f 07       	cpc	r19, r31
     3ae:	d9 f7       	brne	.-10     	; 0x3a6 <MinSlave_manageMessages+0x104>
     3b0:	ca 01       	movw	r24, r20
     3b2:	85 59       	subi	r24, 0x95	; 149
     3b4:	96 4c       	sbci	r25, 0xC6	; 198
     3b6:	7c 01       	movw	r14, r24
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <MinSlave_manageMessages+0x124>
	txBuf[MIN_FC03_BYTES_REPLY_INDEX] = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG;
	length = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG; 
	// Get requested registers
	blockNumber = pMinSlaveSelf->uart.rxBuffer[MIN_FC16_BLOCK_INDEX];
	//Set pointer to the Tx Buffer
	dataPtr = &txBuf[MIN_FC03_DATA_START];
     3ba:	0f 2e       	mov	r0, r31
     3bc:	fb e6       	ldi	r31, 0x6B	; 107
     3be:	ef 2e       	mov	r14, r31
     3c0:	f9 e3       	ldi	r31, 0x39	; 57
     3c2:	ff 2e       	mov	r15, r31
     3c4:	f0 2d       	mov	r31, r0
	NFC_SequentialRead(address,length,read);
	//Copy to txBuf
	for (i = 0; i < length; i++) {
		*dataPtr++ = read[i];
	}
	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC03_START_ADDR_INDEX + length);// Calculate the CRC to send with reply
     3c6:	41 2f       	mov	r20, r17
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	4d 5f       	subi	r20, 0xFD	; 253
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
     3ce:	68 e6       	ldi	r22, 0x68	; 104
     3d0:	79 e3       	ldi	r23, 0x39	; 57
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
     3d6:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     3da:	d7 01       	movw	r26, r14
     3dc:	8c 93       	st	X, r24
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     3e2:	0e 9a       	sbi	0x01, 6	; 1
	txLength = (MIN_FC03_DATA_START + length + MIN_CRC_LENGTH);
	// Enable the Tx line
	minTxEnable();
	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     3e4:	65 e0       	ldi	r22, 0x05	; 5
     3e6:	61 0f       	add	r22, r17
     3e8:	88 e6       	ldi	r24, 0x68	; 104
     3ea:	99 e3       	ldi	r25, 0x39	; 57
     3ec:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     3f0:	79 c2       	rjmp	.+1266   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
	uint8_t * dataPtr;
	uint16_t crc;
	uint8_t txLength;
	//uint16_t config = 0;
	// Setup reply
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     3f2:	28 e6       	ldi	r18, 0x68	; 104
     3f4:	39 e3       	ldi	r19, 0x39	; 57
     3f6:	cd 01       	movw	r24, r26
     3f8:	88 5c       	subi	r24, 0xC8	; 200
     3fa:	9e 4f       	sbci	r25, 0xFE	; 254
     3fc:	fc 01       	movw	r30, r24
     3fe:	80 81       	ld	r24, Z
     400:	f9 01       	movw	r30, r18
     402:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC67_DISCOVER;                    			// Function code
     404:	83 e4       	ldi	r24, 0x43	; 67
     406:	81 83       	std	Z+1, r24	; 0x01
	txBuf[MIN_FC03_BYTES_REPLY_INDEX] = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG;
     408:	d5 96       	adiw	r26, 0x35	; 53
     40a:	8c 91       	ld	r24, X
     40c:	d5 97       	sbiw	r26, 0x35	; 53
     40e:	98 2f       	mov	r25, r24
     410:	99 0f       	add	r25, r25
     412:	92 83       	std	Z+2, r25	; 0x02
	// Get requested registers

	// Set source pointer to slave data
	registerDataPointer = &pMinSlaveSelf->slaveRegisters[pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]];
     414:	d3 96       	adiw	r26, 0x33	; 51
     416:	ec 91       	ld	r30, X
     418:	d3 97       	sbiw	r26, 0x33	; 51
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	ea 0f       	add	r30, r26
     422:	fb 1f       	adc	r31, r27

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC03_DATA_START];
	for (i = 0; i < pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX]; i++) {
     424:	88 23       	and	r24, r24
     426:	d1 f0       	breq	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     428:	bf 01       	movw	r22, r30
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	0b e6       	ldi	r16, 0x6B	; 107
     42e:	19 e3       	ldi	r17, 0x39	; 57
		*dataPtr++ = (uint8_t)(*registerDataPointer >> 8);		// Data High
     430:	fb 01       	movw	r30, r22
     432:	21 81       	ldd	r18, Z+1	; 0x01
     434:	f8 01       	movw	r30, r16
     436:	20 83       	st	Z, r18
     438:	0e 5f       	subi	r16, 0xFE	; 254
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
		*dataPtr++ = (uint8_t) (*registerDataPointer++ & 0xFF);	// Data Low
     43c:	98 01       	movw	r18, r16
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	31 09       	sbc	r19, r1
     442:	fb 01       	movw	r30, r22
     444:	80 81       	ld	r24, Z
     446:	6e 5f       	subi	r22, 0xFE	; 254
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	f9 01       	movw	r30, r18
     44c:	80 83       	st	Z, r24
	// Set source pointer to slave data
	registerDataPointer = &pMinSlaveSelf->slaveRegisters[pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]];

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC03_DATA_START];
	for (i = 0; i < pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX]; i++) {
     44e:	4f 5f       	subi	r20, 0xFF	; 255
     450:	d5 96       	adiw	r26, 0x35	; 53
     452:	8c 91       	ld	r24, X
     454:	d5 97       	sbiw	r26, 0x35	; 53
     456:	48 17       	cp	r20, r24
     458:	58 f3       	brcs	.-42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     45a:	03 c0       	rjmp	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45c:	40 e0       	ldi	r20, 0x00	; 0

	// Set source pointer to slave data
	registerDataPointer = &pMinSlaveSelf->slaveRegisters[pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]];

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC03_DATA_START];
     45e:	0b e6       	ldi	r16, 0x6B	; 107
     460:	19 e3       	ldi	r17, 0x39	; 57
	for (i = 0; i < pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX]; i++) {
		*dataPtr++ = (uint8_t)(*registerDataPointer >> 8);		// Data High
		*dataPtr++ = (uint8_t) (*registerDataPointer++ & 0xFF);	// Data Low
	}

	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC03_START_ADDR_INDEX + (i * MIN_BYTES_PER_REG));         // Calculate the CRC to send with reply
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	44 0f       	add	r20, r20
     466:	55 1f       	adc	r21, r21
     468:	4d 5f       	subi	r20, 0xFD	; 253
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	68 e6       	ldi	r22, 0x68	; 104
     46e:	79 e3       	ldi	r23, 0x39	; 57
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	9f ef       	ldi	r25, 0xFF	; 255
     474:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     478:	d8 01       	movw	r26, r16
     47a:	8c 93       	st	X, r24
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	9c 93       	st	X, r25
	txLength = (MIN_FC03_DATA_START + (pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG) + MIN_CRC_LENGTH);
     480:	e0 91 66 39 	lds	r30, 0x3966	; 0x803966 <__data_end>
     484:	f0 91 67 39 	lds	r31, 0x3967	; 0x803967 <__data_end+0x1>
     488:	65 a9       	ldd	r22, Z+53	; 0x35
     48a:	66 0f       	add	r22, r22
     48c:	6b 5f       	subi	r22, 0xFB	; 251
     48e:	0e 9a       	sbi	0x01, 6	; 1

	// Enable the Tx line
	minTxEnable();
	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     490:	88 e6       	ldi	r24, 0x68	; 104
     492:	99 e3       	ldi	r25, 0x39	; 57
     494:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     498:	25 c2       	rjmp	.+1098   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
	uint16_t crc;
	uint8_t txLength;
	uint16_t address;
	uint8_t registerNumber;
	uint8_t block;
	block = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_BLOCK_INDEX]; //get block info
     49a:	d2 96       	adiw	r26, 0x32	; 50
     49c:	8c 91       	ld	r24, X
     49e:	d2 97       	sbiw	r26, 0x32	; 50
	data = (((uint16_t) pMinSlaveSelf->uart.rxBuffer[MIN_FC06_REG_VALH_INDEX]) << 8) + (uint16_t) pMinSlaveSelf->uart.rxBuffer[MIN_FC06_REG_VALl_INDEX]; //get data
     4a0:	d4 96       	adiw	r26, 0x34	; 52
     4a2:	4c 91       	ld	r20, X
     4a4:	d4 97       	sbiw	r26, 0x34	; 52
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	54 2f       	mov	r21, r20
     4aa:	44 27       	eor	r20, r20
     4ac:	d5 96       	adiw	r26, 0x35	; 53
     4ae:	9c 91       	ld	r25, X
     4b0:	d5 97       	sbiw	r26, 0x35	; 53
     4b2:	49 0f       	add	r20, r25
     4b4:	51 1d       	adc	r21, r1
	registerNumber =  pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]; //store register number
     4b6:	d3 96       	adiw	r26, 0x33	; 51
     4b8:	6c 91       	ld	r22, X
     4ba:	d3 97       	sbiw	r26, 0x33	; 51
	if(block == BLOCK2 || block == BLOCK11 ||block == BLOCK226 ){
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	29 f0       	breq	.+10     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c0:	8b 30       	cpi	r24, 0x0B	; 11
     4c2:	49 f0       	breq	.+18     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4c4:	82 3e       	cpi	r24, 0xE2	; 226
     4c6:	b9 f4       	brne	.+46     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		if(block == BLOCK2){
			address = BLOCK2_OFFSET + (registerNumber * 2); //address update
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	60 57       	subi	r22, 0x70	; 112
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	66 0f       	add	r22, r22
     4d2:	77 1f       	adc	r23, r23
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		}
		else if(block == BLOCK11){
			address = BLOCK11_OFFSET + (registerNumber * 2);
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	60 5f       	subi	r22, 0xF0	; 240
     4da:	7e 4f       	sbci	r23, 0xFE	; 254
     4dc:	66 0f       	add	r22, r22
     4de:	77 1f       	adc	r23, r23
     4e0:	05 c0       	rjmp	.+10     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		}
		else{
			address = BLOCK226_OFFSET + (registerNumber * 2);
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	60 57       	subi	r22, 0x70	; 112
     4e6:	7e 4f       	sbci	r23, 0xFE	; 254
     4e8:	66 0f       	add	r22, r22
     4ea:	77 1f       	adc	r23, r23
		}
		NFC_InstantaneousWrite(&oNFC,address,data);//write the data
     4ec:	81 e7       	ldi	r24, 0x71	; 113
     4ee:	9b e3       	ldi	r25, 0x3B	; 59
     4f0:	0e 94 3b 08 	call	0x1076	; 0x1076 <NFC_InstantaneousWrite>
     4f4:	06 c0       	rjmp	.+12     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		
	}
	else if (block == MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM) { //save permision to min slave specific register
     4f6:	80 31       	cpi	r24, 0x10	; 16
     4f8:	21 f4       	brne	.+8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		pMinSlaveSelf->slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] = data;
     4fa:	90 96       	adiw	r26, 0x20	; 32
     4fc:	4d 93       	st	X+, r20
     4fe:	5c 93       	st	X, r21
     500:	91 97       	sbiw	r26, 0x21	; 33
	else {
		//do nothing
		
	}
	// Reply is required for specific slave writing of a register. Reply is same as request for first 6 bytes received
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX];
     502:	a0 91 66 39 	lds	r26, 0x3966	; 0x803966 <__data_end>
     506:	b0 91 67 39 	lds	r27, 0x3967	; 0x803967 <__data_end+0x1>
     50a:	d0 96       	adiw	r26, 0x30	; 48
     50c:	e8 e6       	ldi	r30, 0x68	; 104
     50e:	f9 e3       	ldi	r31, 0x39	; 57
     510:	2e e6       	ldi	r18, 0x6E	; 110
     512:	39 e3       	ldi	r19, 0x39	; 57

	for (i = 0; i < MIN_FC_WRITE_REPLY_LENGTH; i++) {
		txBuf[i] = *dataPtr++;
     514:	8d 91       	ld	r24, X+
     516:	81 93       	st	Z+, r24
		
	}
	// Reply is required for specific slave writing of a register. Reply is same as request for first 6 bytes received
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX];

	for (i = 0; i < MIN_FC_WRITE_REPLY_LENGTH; i++) {
     518:	e2 17       	cp	r30, r18
     51a:	f3 07       	cpc	r31, r19
     51c:	d9 f7       	brne	.-10     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		txBuf[i] = *dataPtr++;
	}

	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC_WRITE_REPLY_LENGTH);         // Calculate the CRC to send with reply slaveAddr, FC, addrH, addrL, dataH, datal
     51e:	46 e0       	ldi	r20, 0x06	; 6
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	68 e6       	ldi	r22, 0x68	; 104
     524:	79 e3       	ldi	r23, 0x39	; 57
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	txBuf[MIN_FC_CRCL_INDEX] = (uint8_t) (crc & 0xff);             // CRCL
     52e:	e8 e6       	ldi	r30, 0x68	; 104
     530:	f9 e3       	ldi	r31, 0x39	; 57
     532:	86 83       	std	Z+6, r24	; 0x06
	txBuf[MIN_FC_CRCH_INDEX] = (uint8_t) (crc >> 8);               // CRCH
     534:	97 83       	std	Z+7, r25	; 0x07
     536:	0e 9a       	sbi	0x01, 6	; 1

	// Enable the Tx line
	minTxEnable();

	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     538:	68 e0       	ldi	r22, 0x08	; 8
     53a:	cf 01       	movw	r24, r30
     53c:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     540:	d1 c1       	rjmp	.+930    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
	uint16_t crc;
	uint8_t * dataPtr;
	uint8_t blockNumber;
	uint8_t registerNumber;
	uint8_t dataLength;
	blockNumber = pMinSlaveSelf->uart.rxBuffer[MIN_FC16_BLOCK_INDEX]; //get block number
     542:	d2 96       	adiw	r26, 0x32	; 50
     544:	3c 91       	ld	r19, X
     546:	d2 97       	sbiw	r26, 0x32	; 50
	registerNumber = pMinSlaveSelf->uart.rxBuffer[MIN_FC16_REGISTER_INDEX]; //get the register number
     548:	d3 96       	adiw	r26, 0x33	; 51
     54a:	5c 91       	ld	r21, X
     54c:	d3 97       	sbiw	r26, 0x33	; 51
	dataLength = pMinSlaveSelf->uart.rxBuffer[MIN_FC16_BYTES_TO_RX_INDEX]; //length of the data to be written
     54e:	d6 96       	adiw	r26, 0x36	; 54
     550:	2c 91       	ld	r18, X
     552:	d6 97       	sbiw	r26, 0x36	; 54
	// Initialize source data pointer to start of register data in rxBuffer
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_FC16_DATA_START_INDEX];	// Set pointer to first incoming register value high byte.
     554:	cd 01       	movw	r24, r26
     556:	c7 96       	adiw	r24, 0x37	; 55
	// Check if MASTER is broadcasting a block of its registers (slave address is 0 for master broadcast)
	if (pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX] == MIN_MASTER_BROADCAST && pMinSlaveSelf->slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED) {
     558:	d0 96       	adiw	r26, 0x30	; 48
     55a:	4c 91       	ld	r20, X
     55c:	d0 97       	sbiw	r26, 0x30	; 48
     55e:	41 11       	cpse	r20, r1
     560:	65 c0       	rjmp	.+202    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     562:	90 96       	adiw	r26, 0x20	; 32
     564:	6d 91       	ld	r22, X+
     566:	7c 91       	ld	r23, X
     568:	91 97       	sbiw	r26, 0x21	; 33
     56a:	6a 35       	cpi	r22, 0x5A	; 90
     56c:	7a 45       	sbci	r23, 0x5A	; 90
     56e:	09 f0       	breq	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	b9 c1       	rjmp	.+882    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		oNFC.broadcast.length = dataLength;
     572:	20 93 7e 3c 	sts	0x3C7E, r18	; 0x803c7e <oNFC+0x10d>
		
		if(blockNumber == BLOCK2 && oNFC.block2WriteFLG == TRUE){ //store block 2
     576:	32 30       	cpi	r19, 0x02	; 2
     578:	e1 f4       	brne	.+56     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     57a:	30 91 71 3b 	lds	r19, 0x3B71	; 0x803b71 <oNFC>
     57e:	33 23       	and	r19, r19
     580:	09 f4       	brne	.+2      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     582:	b0 c1       	rjmp	.+864    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
			oNFC.broadcast.blockNumber = blockNumber;//store block number
     584:	32 e0       	ldi	r19, 0x02	; 2
     586:	30 93 7c 3c 	sts	0x3C7C, r19	; 0x803c7c <oNFC+0x10b>
			oNFC.broadcast.registerNumber = registerNumber;//store register to be written
     58a:	50 93 7d 3c 	sts	0x3C7D, r21	; 0x803c7d <oNFC+0x10c>
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     58e:	22 23       	and	r18, r18
     590:	61 f0       	breq	.+24     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     592:	dc 01       	movw	r26, r24
     594:	ef e7       	ldi	r30, 0x7F	; 127
     596:	fc e3       	ldi	r31, 0x3C	; 60
     598:	21 50       	subi	r18, 0x01	; 1
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	20 58       	subi	r18, 0x80	; 128
     59e:	33 4c       	sbci	r19, 0xC3	; 195
				oNFC.broadcast.nfcBuffer[i] = *dataPtr++;//store data
     5a0:	8d 91       	ld	r24, X+
     5a2:	81 93       	st	Z+, r24
		oNFC.broadcast.length = dataLength;
		
		if(blockNumber == BLOCK2 && oNFC.block2WriteFLG == TRUE){ //store block 2
			oNFC.broadcast.blockNumber = blockNumber;//store block number
			oNFC.broadcast.registerNumber = registerNumber;//store register to be written
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     5a4:	e2 17       	cp	r30, r18
     5a6:	f3 07       	cpc	r31, r19
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				oNFC.broadcast.nfcBuffer[i] = *dataPtr++;//store data
			}
			oNFC.storeBroadcastFLG = TRUE;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 76 3b 	sts	0x3B76, r24	; 0x803b76 <oNFC+0x5>
     5b0:	99 c1       	rjmp	.+818    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
			
		}
		else if(blockNumber == BLOCK11 && oNFC.block11WriteFLG == TRUE){//store block 11
     5b2:	3b 30       	cpi	r19, 0x0B	; 11
     5b4:	e1 f4       	brne	.+56     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5b6:	30 91 72 3b 	lds	r19, 0x3B72	; 0x803b72 <oNFC+0x1>
     5ba:	33 23       	and	r19, r19
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5be:	92 c1       	rjmp	.+804    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
			oNFC.broadcast.blockNumber = blockNumber;
     5c0:	3b e0       	ldi	r19, 0x0B	; 11
     5c2:	30 93 7c 3c 	sts	0x3C7C, r19	; 0x803c7c <oNFC+0x10b>
			oNFC.broadcast.registerNumber = registerNumber;
     5c6:	50 93 7d 3c 	sts	0x3C7D, r21	; 0x803c7d <oNFC+0x10c>
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     5ca:	22 23       	and	r18, r18
     5cc:	61 f0       	breq	.+24     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5ce:	dc 01       	movw	r26, r24
     5d0:	ef e7       	ldi	r30, 0x7F	; 127
     5d2:	fc e3       	ldi	r31, 0x3C	; 60
     5d4:	21 50       	subi	r18, 0x01	; 1
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	20 58       	subi	r18, 0x80	; 128
     5da:	33 4c       	sbci	r19, 0xC3	; 195
				oNFC.broadcast.nfcBuffer[i] = *dataPtr++;
     5dc:	8d 91       	ld	r24, X+
     5de:	81 93       	st	Z+, r24
			
		}
		else if(blockNumber == BLOCK11 && oNFC.block11WriteFLG == TRUE){//store block 11
			oNFC.broadcast.blockNumber = blockNumber;
			oNFC.broadcast.registerNumber = registerNumber;
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     5e0:	e2 17       	cp	r30, r18
     5e2:	f3 07       	cpc	r31, r19
     5e4:	d9 f7       	brne	.-10     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
				oNFC.broadcast.nfcBuffer[i] = *dataPtr++;
			}
			oNFC.storeBroadcastFLG = TRUE;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 76 3b 	sts	0x3B76, r24	; 0x803b76 <oNFC+0x5>
     5ec:	7b c1       	rjmp	.+758    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		}
		else if(blockNumber == BLOCK226 && oNFC.block226WriteFLG == TRUE){//store block 226
     5ee:	32 3e       	cpi	r19, 0xE2	; 226
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5f2:	78 c1       	rjmp	.+752    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     5f4:	30 91 73 3b 	lds	r19, 0x3B73	; 0x803b73 <oNFC+0x2>
     5f8:	33 23       	and	r19, r19
     5fa:	09 f4       	brne	.+2      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     5fc:	73 c1       	rjmp	.+742    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		oNFC.broadcast.blockNumber = blockNumber;
     5fe:	32 ee       	ldi	r19, 0xE2	; 226
     600:	30 93 7c 3c 	sts	0x3C7C, r19	; 0x803c7c <oNFC+0x10b>
		oNFC.broadcast.registerNumber = registerNumber;
     604:	50 93 7d 3c 	sts	0x3C7D, r21	; 0x803c7d <oNFC+0x10c>
		for (i = 0; i < (uint8_t) (dataLength); i++) {
     608:	22 23       	and	r18, r18
     60a:	61 f0       	breq	.+24     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     60c:	dc 01       	movw	r26, r24
     60e:	ef e7       	ldi	r30, 0x7F	; 127
     610:	fc e3       	ldi	r31, 0x3C	; 60
     612:	21 50       	subi	r18, 0x01	; 1
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	20 58       	subi	r18, 0x80	; 128
     618:	33 4c       	sbci	r19, 0xC3	; 195
				oNFC.broadcast.nfcBuffer[i] = *dataPtr++;
     61a:	8d 91       	ld	r24, X+
     61c:	81 93       	st	Z+, r24
			oNFC.storeBroadcastFLG = TRUE;
		}
		else if(blockNumber == BLOCK226 && oNFC.block226WriteFLG == TRUE){//store block 226
		oNFC.broadcast.blockNumber = blockNumber;
		oNFC.broadcast.registerNumber = registerNumber;
		for (i = 0; i < (uint8_t) (dataLength); i++) {
     61e:	2e 17       	cp	r18, r30
     620:	3f 07       	cpc	r19, r31
     622:	d9 f7       	brne	.-10     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
				oNFC.broadcast.nfcBuffer[i] = *dataPtr++;
			}
			oNFC.storeBroadcastFLG = TRUE;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 76 3b 	sts	0x3B76, r24	; 0x803b76 <oNFC+0x5>
     62a:	5c c1       	rjmp	.+696    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
			//do nothing
		}		
		// Note: there is no reply for master broadcast of a its block.
	}
	//write data to NFC memory instantly
	else if (pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX] == NFC_SLAVE_ADDRESS && pMinSlaveSelf->slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED) {
     62c:	42 30       	cpi	r20, 0x02	; 2
     62e:	09 f0       	breq	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     630:	59 c1       	rjmp	.+690    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     632:	90 96       	adiw	r26, 0x20	; 32
     634:	6d 91       	ld	r22, X+
     636:	7c 91       	ld	r23, X
     638:	91 97       	sbiw	r26, 0x21	; 33
     63a:	6a 35       	cpi	r22, 0x5A	; 90
     63c:	7a 45       	sbci	r23, 0x5A	; 90
     63e:	09 f0       	breq	.+2      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     640:	51 c1       	rjmp	.+674    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		oNFC.update.length = dataLength;
     642:	20 93 81 3d 	sts	0x3D81, r18	; 0x803d81 <oNFC+0x210>
		if(blockNumber == BLOCK2 || blockNumber == BLOCK11 || blockNumber == BLOCK226){//save Block instantly
     646:	32 30       	cpi	r19, 0x02	; 2
     648:	29 f0       	breq	.+10     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     64a:	3b 30       	cpi	r19, 0x0B	; 11
     64c:	19 f0       	breq	.+6      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     64e:	32 3e       	cpi	r19, 0xE2	; 226
     650:	09 f0       	breq	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     652:	48 c1       	rjmp	.+656    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
			oNFC.update.blockNumber = blockNumber;
     654:	30 93 7f 3d 	sts	0x3D7F, r19	; 0x803d7f <oNFC+0x20e>
			oNFC.update.registerNumber = registerNumber;
     658:	50 93 80 3d 	sts	0x3D80, r21	; 0x803d80 <oNFC+0x20f>
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     65c:	22 23       	and	r18, r18
     65e:	81 f0       	breq	.+32     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     660:	62 e8       	ldi	r22, 0x82	; 130
     662:	7d e3       	ldi	r23, 0x3D	; 61
     664:	4f ef       	ldi	r20, 0xFF	; 255
     666:	42 0f       	add	r20, r18
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	4d 57       	subi	r20, 0x7D	; 125
     66c:	52 4c       	sbci	r21, 0xC2	; 194
				oNFC.update.nfcBuffer[i] = *dataPtr++;
     66e:	fc 01       	movw	r30, r24
     670:	21 91       	ld	r18, Z+
     672:	cf 01       	movw	r24, r30
     674:	fb 01       	movw	r30, r22
     676:	21 93       	st	Z+, r18
     678:	bf 01       	movw	r22, r30
	else if (pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX] == NFC_SLAVE_ADDRESS && pMinSlaveSelf->slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED) {
		oNFC.update.length = dataLength;
		if(blockNumber == BLOCK2 || blockNumber == BLOCK11 || blockNumber == BLOCK226){//save Block instantly
			oNFC.update.blockNumber = blockNumber;
			oNFC.update.registerNumber = registerNumber;
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     67a:	4e 17       	cp	r20, r30
     67c:	5f 07       	cpc	r21, r31
     67e:	b9 f7       	brne	.-18     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
				oNFC.update.nfcBuffer[i] = *dataPtr++;
			}
			oNFC.instantWriteFLG = TRUE;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 74 3b 	sts	0x3B74, r24	; 0x803b74 <oNFC+0x3>
			// Reply is required for specific slave writing of registers. Reply is same as request for first 6 bytes received
			dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX];
     686:	d0 96       	adiw	r26, 0x30	; 48
     688:	e8 e6       	ldi	r30, 0x68	; 104
     68a:	f9 e3       	ldi	r31, 0x39	; 57
     68c:	2e e6       	ldi	r18, 0x6E	; 110
     68e:	39 e3       	ldi	r19, 0x39	; 57

			for (i = 0; i < MIN_FC_WRITE_REPLY_LENGTH; i++) {
				txBuf[i] = *dataPtr++;
     690:	8d 91       	ld	r24, X+
     692:	81 93       	st	Z+, r24
			}
			oNFC.instantWriteFLG = TRUE;
			// Reply is required for specific slave writing of registers. Reply is same as request for first 6 bytes received
			dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX];

			for (i = 0; i < MIN_FC_WRITE_REPLY_LENGTH; i++) {
     694:	2e 17       	cp	r18, r30
     696:	3f 07       	cpc	r19, r31
     698:	d9 f7       	brne	.-10     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
				txBuf[i] = *dataPtr++;
			}
			crc = get_crc_16 (0xFFFF, txBuf, MIN_FC_WRITE_REPLY_LENGTH);         // Calculate the CRC to send with reply slaveAddr, FC, addrH, addrL, dataH, datal
     69a:	46 e0       	ldi	r20, 0x06	; 6
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	68 e6       	ldi	r22, 0x68	; 104
     6a0:	79 e3       	ldi	r23, 0x39	; 57
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	9f ef       	ldi	r25, 0xFF	; 255
     6a6:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
			txBuf[MIN_FC_CRCL_INDEX] = (uint8_t) (crc & 0xff);             // CRCL
     6aa:	e8 e6       	ldi	r30, 0x68	; 104
     6ac:	f9 e3       	ldi	r31, 0x39	; 57
     6ae:	86 83       	std	Z+6, r24	; 0x06
			txBuf[MIN_FC_CRCH_INDEX] = (uint8_t) (crc >> 8);               // CRCH
     6b0:	97 83       	std	Z+7, r25	; 0x07
     6b2:	0e 9a       	sbi	0x01, 6	; 1
			txLength = MIN_FC_WRITE_REPLY_LENGTH + MIN_CRC_LENGTH;
			// Enable the Tx line
			minTxEnable();

		// Send reply
		MinSlave_sendReplyPRIV(txBuf, txLength);
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	cf 01       	movw	r24, r30
     6b8:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     6bc:	13 c1       	rjmp	.+550    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 ----------------------------------------------------------------------------------------
 */
static void MinSlave_slavePollPRIV(void) {
	uint8_t txLength;

	if(pMinSlaveSelf->slavePollBroadcastInterval) {
     6be:	9d 96       	adiw	r26, 0x2d	; 45
     6c0:	8d 91       	ld	r24, X+
     6c2:	9c 91       	ld	r25, X
     6c4:	9e 97       	sbiw	r26, 0x2e	; 46
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	29 f0       	breq	.+10     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
		pMinSlaveSelf->slavePollBroadcastInterval--;
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	9d 96       	adiw	r26, 0x2d	; 45
     6ce:	8d 93       	st	X+, r24
     6d0:	9c 93       	st	X, r25
     6d2:	9e 97       	sbiw	r26, 0x2e	; 46
	}

	// Setup reply first to bytes common to all responses
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     6d4:	28 e6       	ldi	r18, 0x68	; 104
     6d6:	39 e3       	ldi	r19, 0x39	; 57
     6d8:	cd 01       	movw	r24, r26
     6da:	88 5c       	subi	r24, 0xC8	; 200
     6dc:	9e 4f       	sbci	r25, 0xFE	; 254
     6de:	fc 01       	movw	r30, r24
     6e0:	80 81       	ld	r24, Z
     6e2:	f9 01       	movw	r30, r18
     6e4:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC65_SLAVE_POLL;         // Function code
     6e6:	81 e4       	ldi	r24, 0x41	; 65
     6e8:	81 83       	std	Z+1, r24	; 0x01

	// Determine what type of response should be sent.
	if (pMinSlaveSelf->changeDataFlag) {
     6ea:	99 96       	adiw	r26, 0x29	; 41
     6ec:	8c 91       	ld	r24, X
     6ee:	99 97       	sbiw	r26, 0x29	; 41
     6f0:	88 23       	and	r24, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6f4:	4b c0       	rjmp	.+150    	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
 */
static uint8_t MinSlave_spSendRegistersPRIV(void) {
	uint8_t i;
	uint16_t crc;
	uint8_t * dataPtr;
	pMinSlaveSelf->changeDataFlag = FALSE;
     6f6:	99 96       	adiw	r26, 0x29	; 41
     6f8:	1c 92       	st	X, r1
     6fa:	99 97       	sbiw	r26, 0x29	; 41
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX];
	*dataPtr++ = MIN_FC65_SETPOINT_RESPONSE_CODE;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	82 83       	std	Z+2, r24	; 0x02
	*dataPtr++ = pMinSlaveSelf->blockToChange;
     700:	94 96       	adiw	r26, 0x24	; 36
     702:	8c 91       	ld	r24, X
     704:	94 97       	sbiw	r26, 0x24	; 36
     706:	83 83       	std	Z+3, r24	; 0x03
	*dataPtr++ = pMinSlaveSelf->regToChange;
     708:	95 96       	adiw	r26, 0x25	; 37
     70a:	8c 91       	ld	r24, X
     70c:	95 97       	sbiw	r26, 0x25	; 37
     70e:	84 83       	std	Z+4, r24	; 0x04
	*dataPtr++ = pMinSlaveSelf->numRegsToChange;
     710:	98 96       	adiw	r26, 0x28	; 40
     712:	8c 91       	ld	r24, X
     714:	98 97       	sbiw	r26, 0x28	; 40
     716:	85 83       	std	Z+5, r24	; 0x05
	for (i = 0; i < pMinSlaveSelf->numRegsToChange; i++) {
     718:	88 23       	and	r24, r24
     71a:	11 f1       	breq	.+68     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	0e e6       	ldi	r16, 0x6E	; 110
     720:	19 e3       	ldi	r17, 0x39	; 57
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange >> 8);  	// High byte of register
     722:	96 96       	adiw	r26, 0x26	; 38
     724:	ed 91       	ld	r30, X+
     726:	fc 91       	ld	r31, X
     728:	97 97       	sbiw	r26, 0x27	; 39
     72a:	81 81       	ldd	r24, Z+1	; 0x01
     72c:	f8 01       	movw	r30, r16
     72e:	80 83       	st	Z, r24
     730:	0e 5f       	subi	r16, 0xFE	; 254
     732:	1f 4f       	sbci	r17, 0xFF	; 255
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange++ & 0xff);	// Low byte of register
     734:	96 96       	adiw	r26, 0x26	; 38
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	97 97       	sbiw	r26, 0x27	; 39
     73c:	cf 01       	movw	r24, r30
     73e:	02 96       	adiw	r24, 0x02	; 2
     740:	96 96       	adiw	r26, 0x26	; 38
     742:	8d 93       	st	X+, r24
     744:	9c 93       	st	X, r25
     746:	97 97       	sbiw	r26, 0x27	; 39
     748:	c8 01       	movw	r24, r16
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	20 81       	ld	r18, Z
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX];
	*dataPtr++ = MIN_FC65_SETPOINT_RESPONSE_CODE;
	*dataPtr++ = pMinSlaveSelf->blockToChange;
	*dataPtr++ = pMinSlaveSelf->regToChange;
	*dataPtr++ = pMinSlaveSelf->numRegsToChange;
	for (i = 0; i < pMinSlaveSelf->numRegsToChange; i++) {
     752:	4f 5f       	subi	r20, 0xFF	; 255
     754:	98 96       	adiw	r26, 0x28	; 40
     756:	8c 91       	ld	r24, X
     758:	98 97       	sbiw	r26, 0x28	; 40
     75a:	48 17       	cp	r20, r24
     75c:	10 f3       	brcs	.-60     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     75e:	03 c0       	rjmp	.+6      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     760:	40 e0       	ldi	r20, 0x00	; 0
	pMinSlaveSelf->changeDataFlag = FALSE;
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX];
	*dataPtr++ = MIN_FC65_SETPOINT_RESPONSE_CODE;
	*dataPtr++ = pMinSlaveSelf->blockToChange;
	*dataPtr++ = pMinSlaveSelf->regToChange;
	*dataPtr++ = pMinSlaveSelf->numRegsToChange;
     762:	0e e6       	ldi	r16, 0x6E	; 110
     764:	19 e3       	ldi	r17, 0x39	; 57
	for (i = 0; i < pMinSlaveSelf->numRegsToChange; i++) {
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange >> 8);  	// High byte of register
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange++ & 0xff);	// Low byte of register
	}

	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC65_SETPOINT_RESPONSE_PREFIX_LENGTH + (i * 2));         // Calculate the CRC to send with reply
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	4d 5f       	subi	r20, 0xFD	; 253
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	44 0f       	add	r20, r20
     76e:	55 1f       	adc	r21, r21
     770:	68 e6       	ldi	r22, 0x68	; 104
     772:	79 e3       	ldi	r23, 0x39	; 57
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     77c:	d8 01       	movw	r26, r16
     77e:	8c 93       	st	X, r24
	*dataPtr++ = (uint8_t) (crc >> 8); // CRCH
     780:	11 96       	adiw	r26, 0x01	; 1
     782:	9c 93       	st	X, r25
	return ((uint8_t) (dataPtr - txBuf));
     784:	06 56       	subi	r16, 0x66	; 102
     786:	19 43       	sbci	r17, 0x39	; 57
     788:	60 2f       	mov	r22, r16
     78a:	0d c0       	rjmp	.+26     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
	if (pMinSlaveSelf->changeDataFlag) {
		// Setpoint(s) are queued up to send
		txLength = MinSlave_spSendRegistersPRIV();
	}

	else if(pMinSlaveSelf->slavePollBroadcastInterval == 0) {
     78c:	9d 96       	adiw	r26, 0x2d	; 45
     78e:	8d 91       	ld	r24, X+
     790:	9c 91       	ld	r25, X
     792:	9e 97       	sbiw	r26, 0x2e	; 46
     794:	89 2b       	or	r24, r25
     796:	21 f4       	brne	.+8      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
		// Broadcast some slave registers
		txLength = MinSlave_spNothingToRespondPRIV();
     798:	0e 94 00 01 	call	0x200	; 0x200 <MinSlave_spNothingToRespondPRIV>
     79c:	68 2f       	mov	r22, r24
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
	}

	else {
		// Send nothing to respond this time type
		txLength = MinSlave_spNothingToRespondPRIV();
     7a0:	0e 94 00 01 	call	0x200	; 0x200 <MinSlave_spNothingToRespondPRIV>
     7a4:	68 2f       	mov	r22, r24
     7a6:	0e 9a       	sbi	0x01, 6	; 1
	// Send response - common to all types.
	// Enable the Tx line
	minTxEnable();

	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     7a8:	88 e6       	ldi	r24, 0x68	; 104
     7aa:	99 e3       	ldi	r25, 0x39	; 57
     7ac:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     7b0:	99 c0       	rjmp	.+306    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
	uint8_t * dataPtr;
	uint8_t readBuf[NFC_MAX_MEM];	//array to store read data
	uint8_t length;
	uint16_t crc;
	uint8_t txLength;
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     7b2:	28 e6       	ldi	r18, 0x68	; 104
     7b4:	39 e3       	ldi	r19, 0x39	; 57
     7b6:	cd 01       	movw	r24, r26
     7b8:	88 5c       	subi	r24, 0xC8	; 200
     7ba:	9e 4f       	sbci	r25, 0xFE	; 254
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	f9 01       	movw	r30, r18
     7c2:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC69_GET_PRODUCT_INFO;            // Function code
     7c4:	85 e4       	ldi	r24, 0x45	; 69
     7c6:	81 83       	std	Z+1, r24	; 0x01
	txBuf[MIN_FC69_BYTES_TO_RX_INDEX] =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2; // no. of registers * bytes per reg(2)
     7c8:	d5 96       	adiw	r26, 0x35	; 53
     7ca:	6c 91       	ld	r22, X
     7cc:	f6 2e       	mov	r15, r22
     7ce:	ff 0c       	add	r15, r15
     7d0:	f2 82       	std	Z+2, r15	; 0x02
	length =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2;
	//set poitner to tx buffer
	dataPtr = &txBuf[MIN_FC69_DATA_START_INDEX];
	//read NFC memory
	NFC_SequentialRead(BLOCK_NVM_OFFSET,length,readBuf);
     7d2:	ae 01       	movw	r20, r28
     7d4:	4f 5f       	subi	r20, 0xFF	; 255
     7d6:	5f 4f       	sbci	r21, 0xFF	; 255
     7d8:	6f 2d       	mov	r22, r15
     7da:	80 e2       	ldi	r24, 0x20	; 32
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 9f 08 	call	0x113e	; 0x113e <NFC_SequentialRead>
	for(i = 0; i < length; i++) {
     7e2:	ff 20       	and	r15, r15
     7e4:	a1 f0       	breq	.+40     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7e6:	fe 01       	movw	r30, r28
     7e8:	31 96       	adiw	r30, 0x01	; 1
     7ea:	ab e6       	ldi	r26, 0x6B	; 107
     7ec:	b9 e3       	ldi	r27, 0x39	; 57
     7ee:	0f ef       	ldi	r16, 0xFF	; 255
     7f0:	0f 0d       	add	r16, r15
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	0f 5f       	subi	r16, 0xFF	; 255
     7f6:	1f 4f       	sbci	r17, 0xFF	; 255
     7f8:	9f 01       	movw	r18, r30
     7fa:	20 0f       	add	r18, r16
     7fc:	31 1f       	adc	r19, r17
		*dataPtr++ = readBuf[i];
     7fe:	81 91       	ld	r24, Z+
     800:	8d 93       	st	X+, r24
	length =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2;
	//set poitner to tx buffer
	dataPtr = &txBuf[MIN_FC69_DATA_START_INDEX];
	//read NFC memory
	NFC_SequentialRead(BLOCK_NVM_OFFSET,length,readBuf);
	for(i = 0; i < length; i++) {
     802:	e2 17       	cp	r30, r18
     804:	f3 07       	cpc	r31, r19
     806:	d9 f7       	brne	.-10     	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     808:	05 59       	subi	r16, 0x95	; 149
     80a:	16 4c       	sbci	r17, 0xC6	; 198
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC69_GET_PRODUCT_INFO;            // Function code
	txBuf[MIN_FC69_BYTES_TO_RX_INDEX] =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2; // no. of registers * bytes per reg(2)
	length =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2;
	//set poitner to tx buffer
	dataPtr = &txBuf[MIN_FC69_DATA_START_INDEX];
     80e:	0b e6       	ldi	r16, 0x6B	; 107
     810:	19 e3       	ldi	r17, 0x39	; 57
	NFC_SequentialRead(BLOCK_NVM_OFFSET,length,readBuf);
	for(i = 0; i < length; i++) {
		*dataPtr++ = readBuf[i];
	}
	//calculate crc 
	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC69_DATA_START_INDEX + length);// Calculate the CRC to send with reply
     812:	4f 2d       	mov	r20, r15
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	4d 5f       	subi	r20, 0xFD	; 253
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	68 e6       	ldi	r22, 0x68	; 104
     81c:	79 e3       	ldi	r23, 0x39	; 57
     81e:	8f ef       	ldi	r24, 0xFF	; 255
     820:	9f ef       	ldi	r25, 0xFF	; 255
     822:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     826:	d8 01       	movw	r26, r16
     828:	8c 93       	st	X, r24
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     82a:	11 96       	adiw	r26, 0x01	; 1
     82c:	9c 93       	st	X, r25
     82e:	0e 9a       	sbi	0x01, 6	; 1
	txLength = (MIN_FC03_DATA_START + length + MIN_CRC_LENGTH);
	// Enable the Tx line
	minTxEnable();
	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     830:	65 e0       	ldi	r22, 0x05	; 5
     832:	6f 0d       	add	r22, r15
     834:	88 e6       	ldi	r24, 0x68	; 104
     836:	99 e3       	ldi	r25, 0x39	; 57
     838:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     83c:	53 c0       	rjmp	.+166    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
static void MinSlave_storeProductInfoPRIV(void) {
	uint8_t i;
	uint8_t * dataPtr;
	uint16_t crc;
	uint8_t index = 0;
	if(pMinSlaveSelf == 0) {
     83e:	10 97       	sbiw	r26, 0x00	; 0
     840:	09 f4       	brne	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     842:	50 c0       	rjmp	.+160    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
		return;
	}
	//Save productInfoLength
	oNFC.productInfoLength = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_BYTES_TO_RX_INDEX] - MIN_FC70_PAYLOAD;
     844:	d2 96       	adiw	r26, 0x32	; 50
     846:	4c 91       	ld	r20, X
     848:	d2 97       	sbiw	r26, 0x32	; 50
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	45 50       	subi	r20, 0x05	; 5
     84e:	51 09       	sbc	r21, r1
     850:	40 93 7a 3b 	sts	0x3B7A, r20	; 0x803b7a <oNFC+0x9>
     854:	50 93 7b 3b 	sts	0x3B7B, r21	; 0x803b7b <oNFC+0xa>
	//Save the Initialized Variable
	for(i = 0; i < oNFC.productInfoLength; i++) {
     858:	41 15       	cp	r20, r1
     85a:	51 05       	cpc	r21, r1
     85c:	89 f0       	breq	.+34     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     85e:	20 e0       	ldi	r18, 0x00	; 0
		oNFC.productInfoData[i] = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_DATA_START_INDEX+i];
     860:	82 2f       	mov	r24, r18
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fd 01       	movw	r30, r26
     866:	e8 0f       	add	r30, r24
     868:	f9 1f       	adc	r31, r25
     86a:	33 a9       	ldd	r19, Z+51	; 0x33
     86c:	fc 01       	movw	r30, r24
     86e:	ef 58       	subi	r30, 0x8F	; 143
     870:	f4 4c       	sbci	r31, 0xC4	; 196
     872:	33 87       	std	Z+11, r19	; 0x0b
		return;
	}
	//Save productInfoLength
	oNFC.productInfoLength = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_BYTES_TO_RX_INDEX] - MIN_FC70_PAYLOAD;
	//Save the Initialized Variable
	for(i = 0; i < oNFC.productInfoLength; i++) {
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	82 2f       	mov	r24, r18
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	84 17       	cp	r24, r20
     87c:	95 07       	cpc	r25, r21
     87e:	80 f3       	brcs	.-32     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
		oNFC.productInfoData[i] = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_DATA_START_INDEX+i];
	}
	// Reply is required for specific slave writing of registers. Reply is same as request for first 6 bytes received
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX];
	for(i = 0; i < 2; i++){
		txBuf[index++] = *dataPtr++;
     880:	08 e6       	ldi	r16, 0x68	; 104
     882:	19 e3       	ldi	r17, 0x39	; 57
     884:	d0 96       	adiw	r26, 0x30	; 48
     886:	8c 91       	ld	r24, X
     888:	d0 97       	sbiw	r26, 0x30	; 48
     88a:	f8 01       	movw	r30, r16
     88c:	80 83       	st	Z, r24
     88e:	d1 96       	adiw	r26, 0x31	; 49
     890:	8c 91       	ld	r24, X
     892:	d1 97       	sbiw	r26, 0x31	; 49
     894:	81 83       	std	Z+1, r24	; 0x01
	}
	//update the config code sent from master MSB byte << 8 + LSB byte
	pMinSlaveSelf->slaveRegisters[MIN_SLAVE_MODEL_CONFIGURATION_CODE] = (((uint16_t)oNFC.productInfoData[oNFC.productInfoLength - 3] << 8) | (uint16_t)oNFC.productInfoData[oNFC.productInfoLength - 4]);
     896:	fa 01       	movw	r30, r20
     898:	ef 58       	subi	r30, 0x8F	; 143
     89a:	f4 4c       	sbci	r31, 0xC4	; 196
     89c:	80 85       	ldd	r24, Z+8	; 0x08
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	98 2f       	mov	r25, r24
     8a2:	88 27       	eor	r24, r24
     8a4:	27 81       	ldd	r18, Z+7	; 0x07
     8a6:	82 2b       	or	r24, r18
     8a8:	1e 96       	adiw	r26, 0x0e	; 14
     8aa:	8d 93       	st	X+, r24
     8ac:	9c 93       	st	X, r25
     8ae:	1f 97       	sbiw	r26, 0x0f	; 15
	txBuf[index++] = oNFC.productInfoData[oNFC.productInfoLength - 2];//CRC LSB
     8b0:	81 85       	ldd	r24, Z+9	; 0x09
     8b2:	d8 01       	movw	r26, r16
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	8c 93       	st	X, r24
     8b8:	12 97       	sbiw	r26, 0x02	; 2
	txBuf[index++] = oNFC.productInfoData[oNFC.productInfoLength - 1];//CRC MSB
     8ba:	82 85       	ldd	r24, Z+10	; 0x0a
     8bc:	13 96       	adiw	r26, 0x03	; 3
     8be:	8c 93       	st	X, r24
	crc = get_crc_16 (0xFFFF, txBuf, index);         // Calculate the CRC to send with reply slaveAddr
     8c0:	44 e0       	ldi	r20, 0x04	; 4
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	b8 01       	movw	r22, r16
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
	txBuf[index++] = (uint8_t) (crc & 0xff);             // CRCL
     8ce:	f8 01       	movw	r30, r16
     8d0:	84 83       	std	Z+4, r24	; 0x04
	txBuf[index++] = (uint8_t) (crc >> 8);               // CRCH
     8d2:	95 83       	std	Z+5, r25	; 0x05
     8d4:	0e 9a       	sbi	0x01, 6	; 1
	
	// Enable the Tx line
	minTxEnable();

	// Send reply
	MinSlave_sendReplyPRIV(txBuf, index);
     8d6:	66 e0       	ldi	r22, 0x06	; 6
     8d8:	c8 01       	movw	r24, r16
     8da:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
	oNFC.productInfoFLG = TRUE;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 75 3b 	sts	0x3B75, r24	; 0x803b75 <oNFC+0x4>
		break; 

	default:
		break;
	}
}
     8e4:	d3 95       	inc	r29
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	08 95       	ret

000008f8 <__vector_27>:
extern MyMain_STYP mainObject;
extern NFC_STYP oNFC;


ISR(USART0_RXC_vect)
{
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	 *
	 * The interrupt flag will be cleared when the receive buffer is empty
	 * Otherwise interrupt flag can be cleared by writing 1 to its bit location
	 * in the STATUS register
	 */
	USART_StoreData();
     91a:	0e 94 73 05 	call	0xae6	; 0xae6 <USART_StoreData>
	MinSlave_manageMessages();
     91e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MinSlave_manageMessages>
	USART_ClearRxBuffer();
     922:	0e 94 8c 05 	call	0xb18	; 0xb18 <USART_ClearRxBuffer>
}
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_29>:


ISR(USART0_TXC_vect)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
	 * Insert your USART_0 transmission complete interrupt handling code
	 *
	 * The interrupt flag will be automatically cleared
	 */
	
	if(USART0.STATUS & USART_TXCIF_bm)
     96a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     96e:	86 ff       	sbrs	r24, 6
     970:	06 c0       	rjmp	.+12     	; 0x97e <__vector_29+0x36>
	{
		MinUart_serviceTx(&oMinSlave.uart);
     972:	81 e5       	ldi	r24, 0x51	; 81
     974:	98 e3       	ldi	r25, 0x38	; 56
     976:	0e 94 37 08 	call	0x106e	; 0x106e <MinUart_serviceTx>
		USART_ClearRxBuffer();
     97a:	0e 94 8c 05 	call	0xb18	; 0xb18 <USART_ClearRxBuffer>
	}
	USART0.STATUS |= (0<<USART_TXCIE_bp);  //Clear the transmission complete status bit
     97e:	e0 e0       	ldi	r30, 0x00	; 0
     980:	f8 e0       	ldi	r31, 0x08	; 8
     982:	84 81       	ldd	r24, Z+4	; 0x04
     984:	84 83       	std	Z+4, r24	; 0x04
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_28>:

ISR(USART0_DRE_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1

}
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_8>:

ISR(TCA0_OVF_vect)
{
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 93       	push	r18
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
	//1msec interrupt
	static unsigned int schedulerRunCounter = 1;
	static unsigned int schedulerTimeCounter = 0;
	static uint16_t schedulerWaitCounter = 0;
	mainObject.realTimeInterruptFlag = TRUE;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 6f 3b 	sts	0x3B6F, r24	; 0x803b6f <mainObject>
	
	if(SCHEDULER_NFC_WRITE_TIME <= schedulerTimeCounter)
     9d2:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <schedulerTimeCounter.3926>
     9d6:	90 91 6b 3a 	lds	r25, 0x3A6B	; 0x803a6b <schedulerTimeCounter.3926+0x1>
     9da:	89 2b       	or	r24, r25
     9dc:	41 f0       	breq	.+16     	; 0x9ee <__vector_8+0x32>
	{
		schedulerTimeCounter = 0;
     9de:	10 92 6a 3a 	sts	0x3A6A, r1	; 0x803a6a <schedulerTimeCounter.3926>
     9e2:	10 92 6b 3a 	sts	0x3A6B, r1	; 0x803a6b <schedulerTimeCounter.3926+0x1>
		mainObject.schedulerNFCRunFlag = TRUE;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 70 3b 	sts	0x3B70, r24	; 0x803b70 <mainObject+0x1>
     9ec:	18 c0       	rjmp	.+48     	; 0xa1e <__vector_8+0x62>
	}
	else if(schedulerRunCounter >= ONE_MINUTE_TIME)
     9ee:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     9f2:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     9f6:	80 36       	cpi	r24, 0x60	; 96
     9f8:	2a ee       	ldi	r18, 0xEA	; 234
     9fa:	92 07       	cpc	r25, r18
     9fc:	58 f0       	brcs	.+22     	; 0xa14 <__vector_8+0x58>
	{
		schedulerRunCounter = 0;
     9fe:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
     a02:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
		schedulerTimeCounter++;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <schedulerTimeCounter.3926>
     a0e:	90 93 6b 3a 	sts	0x3A6B, r25	; 0x803a6b <schedulerTimeCounter.3926+0x1>
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <__vector_8+0x62>
	}
	else
	{
		schedulerRunCounter++;
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
     a1a:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
	}
	//Wait counter for NFC wait for write
	if(oNFC.schedulerNFCWriteWait == TRUE) {
     a1e:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <oNFC+0x6>
     a22:	88 23       	and	r24, r24
     a24:	89 f0       	breq	.+34     	; 0xa48 <__vector_8+0x8c>
		schedulerWaitCounter++;
     a26:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <schedulerWaitCounter.3927>
     a2a:	90 91 69 3a 	lds	r25, 0x3A69	; 0x803a69 <schedulerWaitCounter.3927+0x1>
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	80 93 68 3a 	sts	0x3A68, r24	; 0x803a68 <schedulerWaitCounter.3927>
     a34:	90 93 69 3a 	sts	0x3A69, r25	; 0x803a69 <schedulerWaitCounter.3927+0x1>
		if(schedulerWaitCounter >= TIME_6_MSEC) {
     a38:	06 97       	sbiw	r24, 0x06	; 6
     a3a:	30 f0       	brcs	.+12     	; 0xa48 <__vector_8+0x8c>
			oNFC.schedulerNFCWriteWait = FALSE;
     a3c:	10 92 77 3b 	sts	0x3B77, r1	; 0x803b77 <oNFC+0x6>
			schedulerWaitCounter = 0;
     a40:	10 92 68 3a 	sts	0x3A68, r1	; 0x803a68 <schedulerWaitCounter.3927>
     a44:	10 92 69 3a 	sts	0x3A69, r1	; 0x803a69 <schedulerWaitCounter.3927+0x1>
		}
	}
	
	if (oMinSlave.uart.modbusReSync) 
     a48:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <oMinSlave+0x2f>
     a4c:	88 23       	and	r24, r24
     a4e:	19 f0       	breq	.+6      	; 0xa56 <__vector_8+0x9a>
	{	// Count for no MIN UART transmission lately
		oMinSlave.uart.modbusReSync--;
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <oMinSlave+0x2f>
	}

	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <SDA_Write>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void SDA_Write(unsigned char val){
	if(val)	{
     a6c:	88 23       	and	r24, r24
     a6e:	11 f0       	breq	.+4      	; 0xa74 <SDA_Write+0x8>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     a70:	29 9a       	sbi	0x05, 1	; 5
     a72:	08 95       	ret
	} else {
		VPORTB.OUT &= ~(1 << pin);
     a74:	29 98       	cbi	0x05, 1	; 5
     a76:	08 95       	ret

00000a78 <SDA_Read>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     a78:	86 b1       	in	r24, 0x06	; 6

 ----------------------------------------------------------------------------------------
 */
uint8_t SDA_Read(void){
	return SDA_get_level();
}
     a7a:	86 95       	lsr	r24
     a7c:	81 70       	andi	r24, 0x01	; 1
     a7e:	08 95       	ret

00000a80 <Hardware_Delay>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman
  ----------------------------------------------------------------------------------------
 */

void Hardware_Delay(int val) {
	for(int i = 0; i < val; i++){
     a80:	18 16       	cp	r1, r24
     a82:	19 06       	cpc	r1, r25
     a84:	44 f4       	brge	.+16     	; 0xa96 <Hardware_Delay+0x16>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
		asm("NOP");		
     a8a:	00 00       	nop
 1.00    11-04-2019  Original code                                     Anish Venkataraman
  ----------------------------------------------------------------------------------------
 */

void Hardware_Delay(int val) {
	for(int i = 0; i < val; i++){
     a8c:	2f 5f       	subi	r18, 0xFF	; 255
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	82 17       	cp	r24, r18
     a92:	93 07       	cpc	r25, r19
     a94:	d1 f7       	brne	.-12     	; 0xa8a <Hardware_Delay+0xa>
     a96:	08 95       	ret

00000a98 <USART_RxChar>:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
uint8_t USART_RxChar(byte *val) {
     a98:	dc 01       	movw	r26, r24

	if(rxChars > 0) {
     a9a:	90 91 6d 3b 	lds	r25, 0x3B6D	; 0x803b6d <rxChars>
     a9e:	99 23       	and	r25, r25
     aa0:	89 f0       	breq	.+34     	; 0xac4 <USART_RxChar+0x2c>
		rxChars -= 1;
     aa2:	91 50       	subi	r25, 0x01	; 1
     aa4:	90 93 6d 3b 	sts	0x3B6D, r25	; 0x803b6d <rxChars>
		*val = rxBuffer[tempIndex];
     aa8:	e0 91 6c 3a 	lds	r30, 0x3A6C	; 0x803a6c <tempIndex>
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	e2 59       	subi	r30, 0x92	; 146
     ab0:	f5 4c       	sbci	r31, 0xC5	; 197
     ab2:	80 81       	ld	r24, Z
     ab4:	8c 93       	st	X, r24
		tempIndex++;
     ab6:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <tempIndex>
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	80 93 6c 3a 	sts	0x3A6C, r24	; 0x803a6c <tempIndex>
		rxIndex = 0;
		memset(rxBuffer, 0, RX_BUFFER_LENGTH);
		return ERR;
	}

	return NO_ERR;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
		rxChars -= 1;
		*val = rxBuffer[tempIndex];
		tempIndex++;
	}
	else {
		*val = 0;
     ac4:	1c 92       	st	X, r1
		tempIndex = 0;
     ac6:	10 92 6c 3a 	sts	0x3A6C, r1	; 0x803a6c <tempIndex>
		rxIndex = 0;
     aca:	10 92 6d 3a 	sts	0x3A6D, r1	; 0x803a6d <rxIndex>
		memset(rxBuffer, 0, RX_BUFFER_LENGTH);
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	ee e6       	ldi	r30, 0x6E	; 110
     ad2:	fa e3       	ldi	r31, 0x3A	; 58
     ad4:	df 01       	movw	r26, r30
     ad6:	1d 92       	st	X+, r1
     ad8:	8a 95       	dec	r24
     ada:	e9 f7       	brne	.-6      	; 0xad6 <USART_RxChar+0x3e>
		return ERR;
     adc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return NO_ERR;
}
     ade:	08 95       	ret

00000ae0 <USART_GetCharsInRxBuf>:
 ----------------------------------------------------------------------------------------
 */

uint8_t USART_GetCharsInRxBuf(void){
	return rxChars;
}
     ae0:	80 91 6d 3b 	lds	r24, 0x3B6D	; 0x803b6d <rxChars>
     ae4:	08 95       	ret

00000ae6 <USART_StoreData>:

 ----------------------------------------------------------------------------------------
 */

void USART_StoreData(void) {
	if(USART0.STATUS & USART_RXCIF_bm) { //checks if the interrupt flag is set
     ae6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     aea:	88 23       	and	r24, r24
     aec:	a4 f4       	brge	.+40     	; 0xb16 <USART_StoreData+0x30>
		byte data = USART0.RXDATAL;		//stores data 
     aee:	e0 e0       	ldi	r30, 0x00	; 0
     af0:	f8 e0       	ldi	r31, 0x08	; 8
     af2:	80 81       	ld	r24, Z
		USART0.STATUS = USART_RXCIF_bm;	//clears the the receive interrupt status bit
     af4:	90 e8       	ldi	r25, 0x80	; 128
     af6:	94 83       	std	Z+4, r25	; 0x04
		if(rxIndex <= RX_BUFFER_LENGTH){
			rxBuffer[rxIndex++] = data;
     af8:	e0 91 6d 3a 	lds	r30, 0x3A6D	; 0x803a6d <rxIndex>
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	9e 0f       	add	r25, r30
     b00:	90 93 6d 3a 	sts	0x3A6D, r25	; 0x803a6d <rxIndex>
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	e2 59       	subi	r30, 0x92	; 146
     b08:	f5 4c       	sbci	r31, 0xC5	; 197
     b0a:	80 83       	st	Z, r24
			rxChars += 1;					//increments the receive charachter
     b0c:	80 91 6d 3b 	lds	r24, 0x3B6D	; 0x803b6d <rxChars>
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 93 6d 3b 	sts	0x3B6D, r24	; 0x803b6d <rxChars>
     b16:	08 95       	ret

00000b18 <USART_ClearRxBuffer>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void USART_ClearRxBuffer(void) {
	memset(rxBuffer, 0, RX_BUFFER_LENGTH);
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	ee e6       	ldi	r30, 0x6E	; 110
     b1c:	fa e3       	ldi	r31, 0x3A	; 58
     b1e:	df 01       	movw	r26, r30
     b20:	1d 92       	st	X+, r1
     b22:	8a 95       	dec	r24
     b24:	e9 f7       	brne	.-6      	; 0xb20 <USART_ClearRxBuffer+0x8>
	rxChars = 0;
     b26:	10 92 6d 3b 	sts	0x3B6D, r1	; 0x803b6d <rxChars>
	rxIndex = 0;
     b2a:	10 92 6d 3a 	sts	0x3A6D, r1	; 0x803a6d <rxIndex>
	tempIndex = 0;
     b2e:	10 92 6c 3a 	sts	0x3A6C, r1	; 0x803a6c <tempIndex>
     b32:	08 95       	ret

00000b34 <USART_SendChar>:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void USART_SendChar(byte *str) {
     b34:	dc 01       	movw	r26, r24
	while (!(USART0.STATUS & USART_DREIF_bm));
     b36:	e0 e0       	ldi	r30, 0x00	; 0
     b38:	f8 e0       	ldi	r31, 0x08	; 8
     b3a:	94 81       	ldd	r25, Z+4	; 0x04
     b3c:	95 ff       	sbrs	r25, 5
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <USART_SendChar+0x6>
	USART0.TXDATAL = *str;
     b40:	8c 91       	ld	r24, X
     b42:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
     b46:	08 95       	ret

00000b48 <USART_SetTxInterrupt>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void USART_SetTxInterrupt(void) {
	USART0.STATUS |= (1<<USART_TXCIE_bp); 
     b48:	e0 e0       	ldi	r30, 0x00	; 0
     b4a:	f8 e0       	ldi	r31, 0x08	; 8
     b4c:	84 81       	ldd	r24, Z+4	; 0x04
     b4e:	80 64       	ori	r24, 0x40	; 64
     b50:	84 83       	std	Z+4, r24	; 0x04
     b52:	08 95       	ret

00000b54 <main>:
#include <atmel_start.h>
#include "MyMain.h"
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     b54:	0e 94 e5 00 	call	0x1ca	; 0x1ca <atmel_start_init>
	MyMain_main();
     b58:	0e 94 60 09 	call	0x12c0	; 0x12c0 <MyMain_main>
     b5c:	ff cf       	rjmp	.-2      	; 0xb5c <main+0x8>

00000b5e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	08 95       	ret

00000b62 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	68 ed       	ldi	r22, 0xD8	; 216
     b66:	81 e6       	ldi	r24, 0x61	; 97
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 00 06 	call	0xc00	; 0xc00 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	08 95       	ret

00000b72 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     b72:	78 94       	sei

	return 0;
}
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	08 95       	ret

00000b78 <mcu_init>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     b78:	e0 e1       	ldi	r30, 0x10	; 16
     b7a:	f4 e0       	ldi	r31, 0x04	; 4
     b7c:	80 81       	ld	r24, Z
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	81 93       	st	Z+, r24
     b82:	e8 31       	cpi	r30, 0x18	; 24
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	f8 07       	cpc	r31, r24
     b88:	c9 f7       	brne	.-14     	; 0xb7c <mcu_init+0x4>
     b8a:	e0 e3       	ldi	r30, 0x30	; 48
     b8c:	f4 e0       	ldi	r31, 0x04	; 4
     b8e:	80 81       	ld	r24, Z
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	81 93       	st	Z+, r24
     b94:	e8 33       	cpi	r30, 0x38	; 56
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	f8 07       	cpc	r31, r24
     b9a:	c9 f7       	brne	.-14     	; 0xb8e <mcu_init+0x16>
     b9c:	e0 e5       	ldi	r30, 0x50	; 80
     b9e:	f4 e0       	ldi	r31, 0x04	; 4
     ba0:	80 81       	ld	r24, Z
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	81 93       	st	Z+, r24
     ba6:	e8 35       	cpi	r30, 0x58	; 88
     ba8:	84 e0       	ldi	r24, 0x04	; 4
     baa:	f8 07       	cpc	r31, r24
     bac:	c9 f7       	brne	.-14     	; 0xba0 <mcu_init+0x28>
     bae:	08 95       	ret

00000bb0 <USART_0_initialization>:
     bb0:	02 98       	cbi	0x00, 2	; 0
     bb2:	e2 e1       	ldi	r30, 0x12	; 18
     bb4:	f4 e0       	ldi	r31, 0x04	; 4
     bb6:	80 81       	ld	r24, Z
     bb8:	87 7f       	andi	r24, 0xF7	; 247
     bba:	80 83       	st	Z, r24
     bbc:	e0 e0       	ldi	r30, 0x00	; 0
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	81 83       	std	Z+1, r24	; 0x01
     bc6:	01 9a       	sbi	0x00, 1	; 0
     bc8:	09 98       	cbi	0x01, 1	; 1
     bca:	81 81       	ldd	r24, Z+1	; 0x01
     bcc:	81 60       	ori	r24, 0x01	; 1
     bce:	81 83       	std	Z+1, r24	; 0x01
     bd0:	0e 94 11 06 	call	0xc22	; 0xc22 <USART_0_init>
     bd4:	08 95       	ret

00000bd6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     bd6:	0e 94 bc 05 	call	0xb78	; 0xb78 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     bda:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     bdc:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     bde:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     be0:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     be2:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     be4:	2c 98       	cbi	0x05, 4	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
     be6:	0e 94 b1 05 	call	0xb62	; 0xb62 <CLKCTRL_init>

	USART_0_initialization();
     bea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <USART_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     bee:	0e 94 06 06 	call	0xc0c	; 0xc0c <TIMER_0_init>

	USART_0_initialization();

	TIMER_0_initialization();

	CPUINT_init();
     bf2:	0e 94 b9 05 	call	0xb72	; 0xb72 <CPUINT_init>

	SLPCTRL_init();
     bf6:	0e 94 04 06 	call	0xc08	; 0xc08 <SLPCTRL_init>

	BOD_init();
     bfa:	0e 94 af 05 	call	0xb5e	; 0xb5e <BOD_init>
     bfe:	08 95       	ret

00000c00 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     c00:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     c02:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     c04:	40 83       	st	Z, r20
	ret                             // Return to caller
     c06:	08 95       	ret

00000c08 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 95       	ret

00000c0c <TIMER_0_init>:
	// TCA0.SINGLE.DBGCTRL = 0 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: disabled */

	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTEI_bp /* Count on Event Input: disabled */
	//		 | TCA_SINGLE_EVACT_POSEDGE_gc; /* Count on positive edge event */

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: disabled */
     c0c:	e0 e0       	ldi	r30, 0x00	; 0
     c0e:	fa e0       	ldi	r31, 0x0A	; 10
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: enabled */

	TCA0.SINGLE.PER = 0x4e1e; /* Period: 0x4e1f */
     c14:	2e e1       	ldi	r18, 0x1E	; 30
     c16:	3e e4       	ldi	r19, 0x4E	; 78
     c18:	26 a3       	std	Z+38, r18	; 0x26
     c1a:	37 a3       	std	Z+39, r19	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc    /* System Clock */
     c1c:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp; /* Module Enable: enabled */

	return 0;
}
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	08 95       	ret

00000c22 <USART_0_init>:


int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
     c22:	e0 e0       	ldi	r30, 0x00	; 0
     c24:	f8 e0       	ldi	r31, 0x08	; 8
     c26:	86 eb       	ldi	r24, 0xB6	; 182
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	80 87       	std	Z+8, r24	; 0x08
     c2c:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
     c2e:	80 ec       	ldi	r24, 0xC0	; 192
     c30:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 1 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: enabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     c32:	86 83       	std	Z+6, r24	; 0x06
	               | 1 << USART_RXEN_bp     /* Reciever enable: enabled */
	               | USART_RXMODE_NORMAL_gc /* Normal mode */
	               | 0 << USART_SFDEN_bp    /* Start Frame Detection Enable: disabled */
	               | 1 << USART_TXEN_bp;    /* Transmitter Enable: enabled */

	 USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
     c34:	83 e2       	ldi	r24, 0x23	; 35
     c36:	87 83       	std	Z+7, r24	; 0x07
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret

00000c3c <I2cDrive_Start>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     c3c:	21 9a       	sbi	0x04, 1	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     c3e:	28 9a       	sbi	0x05, 0	; 5
     c40:	29 9a       	sbi	0x05, 1	; 5
{
    I2C_SDA_OUTPUT();
    I2C_SCL_OUTPUT();
    I2C_SCL_SetVal();
    I2C_SDA_SetVal();
    I2c_Delay();   
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c4a:	29 98       	cbi	0x05, 1	; 5
    I2C_SDA_ClrVal();
    I2c_Delay();
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
     c54:	28 98       	cbi	0x05, 0	; 5
     c56:	08 95       	ret

00000c58 <I2cDrive_Stop>:
     c58:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     c5a:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c5c:	29 98       	cbi	0x05, 1	; 5
void I2cDrive_Stop ( void )
{
    I2C_SCL_ClrVal();
    I2C_SDA_OUTPUT();
    I2C_SDA_ClrVal();
    I2c_Delay();
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     c66:	28 9a       	sbi	0x05, 0	; 5
    I2C_SCL_SetVal();
    I2c_Delay();
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
     c70:	29 9a       	sbi	0x05, 1	; 5
     c72:	08 95       	ret

00000c74 <I2cDrive_AckSend>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     c74:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c76:	29 98       	cbi	0x05, 1	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     c78:	28 9a       	sbi	0x05, 0	; 5
void I2cDrive_AckSend ( void )
{
    I2C_SDA_OUTPUT();
    I2C_SDA_ClrVal();
    I2C_SCL_SetVal(); 
    I2c_Delay();    
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c82:	28 98       	cbi	0x05, 0	; 5
    I2C_SCL_ClrVal();
    I2c_Delay();
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
     c8c:	08 95       	ret

00000c8e <I2cDrive_NAckSend>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     c8e:	21 9a       	sbi	0x04, 1	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     c90:	29 9a       	sbi	0x05, 1	; 5
     c92:	28 9a       	sbi	0x05, 0	; 5
void I2cDrive_NAckSend ( void )
{
    I2C_SDA_OUTPUT();
    I2C_SDA_SetVal();
    I2C_SCL_SetVal(); 
    I2c_Delay();    
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c9c:	28 98       	cbi	0x05, 0	; 5
    I2C_SCL_ClrVal();
    I2c_Delay();
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
     ca6:	08 95       	ret

00000ca8 <I2cDrive_SendByte>:
---------------------------------------------------------------------------------------
*/
uint8_t e = 0;
uint8_t et = 1;
uint8_t I2cDrive_SendByte ( uint8_t data )
{
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	d8 2f       	mov	r29, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     cae:	21 9a       	sbi	0x04, 1	; 4
     cb0:	c8 e0       	ldi	r28, 0x08	; 8
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     cb2:	28 98       	cbi	0x05, 0	; 5
    uint8_t err = 0;
	
    I2C_SDA_OUTPUT();
    for(cnt = 0; cnt < 8; cnt++) {
        I2C_SCL_ClrVal();                    
        I2C_SDA_PutVal(data_buffer & 0x80); // Set or clear SDA line before SCL line turned high
     cb4:	8d 2f       	mov	r24, r29
     cb6:	80 78       	andi	r24, 0x80	; 128
     cb8:	0e 94 36 05 	call	0xa6c	; 0xa6c <SDA_Write>
        I2c_Delay();
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     cc4:	28 9a       	sbi	0x05, 0	; 5
        I2C_SCL_SetVal();
        I2c_Delay();
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
        data_buffer <<= 1;
     cce:	dd 0f       	add	r29, r29
     cd0:	c1 50       	subi	r28, 0x01	; 1
    uint8_t data_buffer = data;
    uint8_t timeOut = TIMEOUT;
    uint8_t err = 0;
	
    I2C_SDA_OUTPUT();
    for(cnt = 0; cnt < 8; cnt++) {
     cd2:	79 f7       	brne	.-34     	; 0xcb2 <I2cDrive_SendByte+0xa>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     cd4:	28 98       	cbi	0x05, 0	; 5
        I2C_SCL_SetVal();
        I2c_Delay();
        data_buffer <<= 1;
    }
    I2C_SCL_ClrVal();
    I2c_Delay();
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     cde:	29 9a       	sbi	0x05, 1	; 5
     ce0:	28 9a       	sbi	0x05, 0	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     ce2:	21 98       	cbi	0x04, 1	; 4
	I2C_SDA_SetVal();
    I2C_SCL_SetVal();
    I2C_SDA_INPUT();
	I2c_Delay();
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
uint8_t et = 1;
uint8_t I2cDrive_SendByte ( uint8_t data )
{
    uint8_t cnt;
    uint8_t data_buffer = data;
    uint8_t timeOut = TIMEOUT;
     cec:	c5 e0       	ldi	r28, 0x05	; 5
    I2C_SCL_SetVal();
    I2C_SDA_INPUT();
	I2c_Delay();
	    // Wait for the ACK signal
	 do{
    	timeOut--;
     cee:	c1 50       	subi	r28, 0x01	; 1
		} while(I2C_SDA_GetVal() && timeOut);
     cf0:	0e 94 3c 05 	call	0xa78	; 0xa78 <SDA_Read>
     cf4:	88 23       	and	r24, r24
     cf6:	11 f0       	breq	.+4      	; 0xcfc <I2cDrive_SendByte+0x54>
     cf8:	c1 11       	cpse	r28, r1
     cfa:	f9 cf       	rjmp	.-14     	; 0xcee <I2cDrive_SendByte+0x46>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     cfc:	28 98       	cbi	0x05, 0	; 5
    
	I2C_SCL_ClrVal();
	I2c_Delay();	
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
    if(timeOut == 0) {
        err = 1;
    }

    return err;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	c1 11       	cpse	r28, r1
     d0a:	80 e0       	ldi	r24, 0x00	; 0
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <I2cDrive_ReceiveByte>:
*-------*-----------*---------------------------------------------------*--------------
1.00    4-24-2019   Original code                                       Sun Ran
---------------------------------------------------------------------------------------
*/
uint8_t I2cDrive_ReceiveByte ( void )
{
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     d1a:	21 98       	cbi	0x04, 1	; 4
     d1c:	c8 e0       	ldi	r28, 0x08	; 8
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t data = 0;
    uint8_t mask = 0;
    I2C_SDA_INPUT();
    for(mask = 0x80; mask > 0; mask >>= 1) {
     d20:	10 e8       	ldi	r17, 0x80	; 128
1.00    4-24-2019   Original code                                       Sun Ran
---------------------------------------------------------------------------------------
*/
uint8_t I2cDrive_ReceiveByte ( void )
{
    uint8_t data = 0;
     d22:	00 e0       	ldi	r16, 0x00	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     d24:	28 9a       	sbi	0x05, 0	; 5
    uint8_t mask = 0;
    I2C_SDA_INPUT();
    for(mask = 0x80; mask > 0; mask >>= 1) {
        I2C_SCL_SetVal();
        I2c_Delay();
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
        if(I2C_SDA_GetVal()) {  // Read SDA line when SCL line is high
     d2e:	0e 94 3c 05 	call	0xa78	; 0xa78 <SDA_Read>
     d32:	81 11       	cpse	r24, r1
            data |= mask;
     d34:	01 2b       	or	r16, r17
     d36:	28 9a       	sbi	0x05, 0	; 5
        }

        I2C_SCL_SetVal();
        I2c_Delay();
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     d40:	28 98       	cbi	0x05, 0	; 5
        I2C_SCL_ClrVal();
        I2c_Delay();     
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 40 05 	call	0xa80	; 0xa80 <Hardware_Delay>
uint8_t I2cDrive_ReceiveByte ( void )
{
    uint8_t data = 0;
    uint8_t mask = 0;
    I2C_SDA_INPUT();
    for(mask = 0x80; mask > 0; mask >>= 1) {
     d4a:	16 95       	lsr	r17
     d4c:	21 97       	sbiw	r28, 0x01	; 1
     d4e:	51 f7       	brne	.-44     	; 0xd24 <I2cDrive_ReceiveByte+0x12>
        I2C_SCL_ClrVal();
        I2c_Delay();     
    }
	
    return data;
     d50:	80 2f       	mov	r24, r16
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <MinUart_init>:
1.00	07-18-2012	Initial Write										Tom Van Sistine
1.01	12-09-2019	Removed change of baud rate module	 			   Anish Venkataraman
---------------------------------------------------------------------------------------
*/
void MinUart_init(MinUart_STYP *uart) {
	uart->processPacketFlag = FALSE;
     d5c:	fc 01       	movw	r30, r24
     d5e:	e6 5f       	subi	r30, 0xF6	; 246
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	10 82       	st	Z, r1
	uart->currentState = (uint8_t)   WAIT_FOR_RESYNC;
     d64:	38 96       	adiw	r30, 0x08	; 8
     d66:	10 82       	st	Z, r1
	uart->rxBufferIndex = 0U;
     d68:	33 97       	sbiw	r30, 0x03	; 3
     d6a:	10 82       	st	Z, r1
     d6c:	11 82       	std	Z+1, r1	; 0x01
	uart->badCrcFlag = 0U;
     d6e:	33 97       	sbiw	r30, 0x03	; 3
     d70:	10 82       	st	Z, r1
	uart->dataLength = 10;
     d72:	31 96       	adiw	r30, 0x01	; 1
     d74:	2a e0       	ldi	r18, 0x0A	; 10
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	20 83       	st	Z, r18
     d7a:	31 83       	std	Z+1, r19	; 0x01

	// Reinitialize the hardware UART
	HardwareUart_Init();  
     d7c:	0e 94 11 06 	call	0xc22	; 0xc22 <USART_0_init>
     d80:	08 95       	ret

00000d82 <get_crc_16>:
 ----------------------------------------------------------------------------------------
 */
uint16_t crc_16_table[16] = {0x0000, 0xCC01, 0xD801, 0x1400, 0xF001, 0x3C00, 0x2800, 0xE401,
  0xA001, 0x6C00, 0x7800, 0xB401, 0x5000, 0x9C01, 0x8801, 0x4400 };

uint16_t get_crc_16 (uint16_t start, uint8_t *p, uint16_t n) {
     d82:	db 01       	movw	r26, r22
uint16_t crc = start;
uint16_t r;

  /* while there is more data to process */
  while (n-- > 0) {
     d84:	41 15       	cp	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <get_crc_16+0xa>
     d8a:	41 c0       	rjmp	.+130    	; 0xe0e <get_crc_16+0x8c>
     d8c:	46 0f       	add	r20, r22
     d8e:	57 1f       	adc	r21, r23

    /* compute checksum of lower four bits of *p */
    r = crc_16_table[crc & 0xF];
     d90:	fc 01       	movw	r30, r24
     d92:	ef 70       	andi	r30, 0x0F	; 15
     d94:	ff 27       	eor	r31, r31
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ee 5f       	subi	r30, 0xFE	; 254
     d9c:	f7 4c       	sbci	r31, 0xC7	; 199
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[*p & 0xF];
     d9e:	92 95       	swap	r25
     da0:	82 95       	swap	r24
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	89 27       	eor	r24, r25
     da6:	9f 70       	andi	r25, 0x0F	; 15
     da8:	89 27       	eor	r24, r25
     daa:	20 81       	ld	r18, Z
     dac:	31 81       	ldd	r19, Z+1	; 0x01
     dae:	28 27       	eor	r18, r24
     db0:	39 27       	eor	r19, r25
     db2:	9d 91       	ld	r25, X+
     db4:	e9 2f       	mov	r30, r25
     db6:	ef 70       	andi	r30, 0x0F	; 15
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	ee 5f       	subi	r30, 0xFE	; 254
     dc0:	f7 4c       	sbci	r31, 0xC7	; 199
     dc2:	01 90       	ld	r0, Z+
     dc4:	f0 81       	ld	r31, Z
     dc6:	e0 2d       	mov	r30, r0
     dc8:	2e 27       	eor	r18, r30
     dca:	3f 27       	eor	r19, r31

    /* now compute checksum of upper four bits of *p */
    r = crc_16_table[crc & 0xF];
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[(*p >> 4) & 0xF];
     dcc:	92 95       	swap	r25
     dce:	9f 70       	andi	r25, 0x0F	; 15
     dd0:	e9 2f       	mov	r30, r25
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 5f       	subi	r30, 0xFE	; 254
     dda:	f7 4c       	sbci	r31, 0xC7	; 199
     ddc:	b9 01       	movw	r22, r18
     dde:	72 95       	swap	r23
     de0:	62 95       	swap	r22
     de2:	6f 70       	andi	r22, 0x0F	; 15
     de4:	67 27       	eor	r22, r23
     de6:	7f 70       	andi	r23, 0x0F	; 15
     de8:	67 27       	eor	r22, r23
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	86 27       	eor	r24, r22
     df0:	97 27       	eor	r25, r23
    r = crc_16_table[crc & 0xF];
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[*p & 0xF];

    /* now compute checksum of upper four bits of *p */
    r = crc_16_table[crc & 0xF];
     df2:	f9 01       	movw	r30, r18
     df4:	ef 70       	andi	r30, 0x0F	; 15
     df6:	ff 27       	eor	r31, r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 5f       	subi	r30, 0xFE	; 254
     dfe:	f7 4c       	sbci	r31, 0xC7	; 199
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[(*p >> 4) & 0xF];
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	86 27       	eor	r24, r22
     e06:	97 27       	eor	r25, r23
uint16_t get_crc_16 (uint16_t start, uint8_t *p, uint16_t n) {
uint16_t crc = start;
uint16_t r;

  /* while there is more data to process */
  while (n-- > 0) {
     e08:	4a 17       	cp	r20, r26
     e0a:	5b 07       	cpc	r21, r27
     e0c:	09 f6       	brne	.-126    	; 0xd90 <get_crc_16+0xe>
    /* next... */
    p++;
  }

  return(crc);
}
     e0e:	08 95       	ret

00000e10 <MinUart_serviceRx>:
1.00	07-18-2012	Initial Write										Tom Van Sistine
1.01	12-09-2019	Removed change of baud rate module	 			   Anish Venkataraman
---------------------------------------------------------------------------------------
*/

void MinUart_serviceRx(MinUart_STYP *uart) {
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ec 01       	movw	r28, r24

static uint8_t rxByte = 0;			// Because a pointer is passed with HardwareUart_RecvChar() should not be auto-variable.
uint8_t error = 0;
uint16_t crc;
	// Get character from buffer
	error = HardwareUart_RecvChar(rxByte);
     e1e:	8e e6       	ldi	r24, 0x6E	; 110
     e20:	9b e3       	ldi	r25, 0x3B	; 59
     e22:	0e 94 4c 05 	call	0xa98	; 0xa98 <USART_RxChar>
	
	if (error) {
     e26:	88 23       	and	r24, r24
     e28:	a1 f0       	breq	.+40     	; 0xe52 <MinUart_serviceRx+0x42>
		uart->currentState = WAIT_FOR_RESYNC;	// If in the middle of a message, this will wait until the end.
     e2a:	fe 01       	movw	r30, r28
     e2c:	ee 5e       	subi	r30, 0xEE	; 238
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	10 82       	st	Z, r1
		HardwareUart_clearRxBuf();
     e32:	0e 94 8c 05 	call	0xb18	; 0xb18 <USART_ClearRxBuffer>
		// Reset stuff needed in next character received is start of new message.
		uart->badCrcFlag = 0;
     e36:	fe 01       	movw	r30, r28
     e38:	e4 5f       	subi	r30, 0xF4	; 244
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
     e3c:	10 82       	st	Z, r1
		uart->rxBufferIndex = 0;
     e3e:	33 96       	adiw	r30, 0x03	; 3
     e40:	10 82       	st	Z, r1
     e42:	11 82       	std	Z+1, r1	; 0x01
		uart->dataLength = 10;
     e44:	c3 5f       	subi	r28, 0xF3	; 243
     e46:	de 4f       	sbci	r29, 0xFE	; 254
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 83       	st	Y, r24
     e4e:	99 83       	std	Y+1, r25	; 0x01
		return;
     e50:	07 c1       	rjmp	.+526    	; 0x1060 <MinUart_serviceRx+0x250>
	// Check if modbusReSync is counter is 0 which indicates start of new message.  If between
	// messages, it stays in WAIT_FOR_RESYNC state until modbusReSync counter is 0.
	// If modbusReSync is 0, then, regardless of state, force it to state HANDLE_DEVICE_ID to re-
	// synchronize communication.

    if (uart->modbusReSync == 0) {
     e52:	88 81       	ld	r24, Y
     e54:	81 11       	cpse	r24, r1
     e56:	0f c0       	rjmp	.+30     	; 0xe76 <MinUart_serviceRx+0x66>
        uart->currentState = PARSE_INCOMING;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	fe 01       	movw	r30, r28
     e5c:	ee 5e       	subi	r30, 0xEE	; 238
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	80 83       	st	Z, r24
		uart->badCrcFlag = 0;
     e62:	36 97       	sbiw	r30, 0x06	; 6
     e64:	10 82       	st	Z, r1
		uart->rxBufferIndex = 0;
     e66:	33 96       	adiw	r30, 0x03	; 3
     e68:	10 82       	st	Z, r1
     e6a:	11 82       	std	Z+1, r1	; 0x01
		uart->dataLength = 10;
     e6c:	8a e0       	ldi	r24, 0x0A	; 10
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	32 97       	sbiw	r30, 0x02	; 2
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
    }
    uart->modbusReSync = MODBUS_RESYNC_LOAD;	// Set for three 1msec interrupts that are asynchronous to MIN_OnRxChar()
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	88 83       	st	Y, r24
    											// to insure a minimum of 2 msec without receiving byte to indicate resync.

	// Run the UART character receive method state machine which parses the various types
	// of messages from the Master device
	switch (uart->currentState) {
     e7a:	fe 01       	movw	r30, r28
     e7c:	ee 5e       	subi	r30, 0xEE	; 238
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	80 81       	ld	r24, Z
     e82:	88 23       	and	r24, r24
     e84:	19 f0       	breq	.+6      	; 0xe8c <MinUart_serviceRx+0x7c>
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	89 f0       	breq	.+34     	; 0xeac <MinUart_serviceRx+0x9c>
     e8a:	ea c0       	rjmp	.+468    	; 0x1060 <MinUart_serviceRx+0x250>

	case WAIT_FOR_RESYNC:

		// Waiting for resync, i.e. no characters for 2 msec.
		uart->badCrcFlag = 0;
     e8c:	fe 01       	movw	r30, r28
     e8e:	e4 5f       	subi	r30, 0xF4	; 244
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	10 82       	st	Z, r1
		uart->rxBufferIndex = 0;
     e94:	33 96       	adiw	r30, 0x03	; 3
     e96:	10 82       	st	Z, r1
     e98:	11 82       	std	Z+1, r1	; 0x01
		uart->dataLength = 10;
     e9a:	c3 5f       	subi	r28, 0xF3	; 243
     e9c:	de 4f       	sbci	r29, 0xFE	; 254
     e9e:	8a e0       	ldi	r24, 0x0A	; 10
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	88 83       	st	Y, r24
     ea4:	99 83       	std	Y+1, r25	; 0x01
		USART_ClearRxBuffer();
     ea6:	0e 94 8c 05 	call	0xb18	; 0xb18 <USART_ClearRxBuffer>
		break;
     eaa:	da c0       	rjmp	.+436    	; 0x1060 <MinUart_serviceRx+0x250>
	case PARSE_INCOMING:

		// Resync timeout elapsed

		// Save received byte
		uart->rxBuffer[uart->rxBufferIndex] = rxByte;
     eac:	fe 01       	movw	r30, r28
     eae:	e1 5f       	subi	r30, 0xF1	; 241
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	e0 91 6e 3b 	lds	r30, 0x3B6E	; 0x803b6e <rxByte.3754>
     eba:	de 01       	movw	r26, r28
     ebc:	a8 0f       	add	r26, r24
     ebe:	b9 1f       	adc	r27, r25
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	ec 93       	st	X, r30
		
		// Check if slave address matches this slave device
		if (uart->rxBufferIndex == 0) {
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	79 f4       	brne	.+30     	; 0xee6 <MinUart_serviceRx+0xd6>
			if((rxByte != uart->moduleAddress) && rxByte != (uint8_t) MIN_MASTER_BROADCAST) {
     ec8:	de 01       	movw	r26, r28
     eca:	a7 5f       	subi	r26, 0xF7	; 247
     ecc:	be 4f       	sbci	r27, 0xFE	; 254
     ece:	8c 91       	ld	r24, X
     ed0:	e8 17       	cp	r30, r24
     ed2:	09 f4       	brne	.+2      	; 0xed6 <MinUart_serviceRx+0xc6>
     ed4:	bd c0       	rjmp	.+378    	; 0x1050 <MinUart_serviceRx+0x240>
     ed6:	ee 23       	and	r30, r30
     ed8:	09 f4       	brne	.+2      	; 0xedc <MinUart_serviceRx+0xcc>
     eda:	ba c0       	rjmp	.+372    	; 0x1050 <MinUart_serviceRx+0x240>
				uart->currentState = WAIT_FOR_RESYNC;  // Message not for this slave.
     edc:	fe 01       	movw	r30, r28
     ede:	ee 5e       	subi	r30, 0xEE	; 238
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	10 82       	st	Z, r1
     ee4:	b5 c0       	rjmp	.+362    	; 0x1050 <MinUart_serviceRx+0x240>
			}
		}
		
		// Check if FC code then set expected number of bytes
		else if (uart->rxBufferIndex == (uint8_t) MIN_FUNCTION_CODE_INDEX) {
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	09 f0       	breq	.+2      	; 0xeec <MinUart_serviceRx+0xdc>
     eea:	4d c0       	rjmp	.+154    	; 0xf86 <MinUart_serviceRx+0x176>
			uart->functionCode = rxByte;
     eec:	de 01       	movw	r26, r28
     eee:	af 5e       	subi	r26, 0xEF	; 239
     ef0:	be 4f       	sbci	r27, 0xFE	; 254
     ef2:	ec 93       	st	X, r30
			switch (uart->functionCode) {
     ef4:	8e 2f       	mov	r24, r30
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fc 01       	movw	r30, r24
     efa:	33 97       	sbiw	r30, 0x03	; 3
     efc:	e4 34       	cpi	r30, 0x44	; 68
     efe:	f1 05       	cpc	r31, r1
     f00:	e0 f5       	brcc	.+120    	; 0xf7a <MinUart_serviceRx+0x16a>
     f02:	ee 57       	subi	r30, 0x7E	; 126
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__tablejump2__>

			case MIN_FC03:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC03;
     f0a:	88 e0       	ldi	r24, 0x08	; 8
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	fe 01       	movw	r30, r28
     f10:	e3 5f       	subi	r30, 0xF3	; 243
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	80 83       	st	Z, r24
     f16:	91 83       	std	Z+1, r25	; 0x01
				break;
     f18:	5a c0       	rjmp	.+180    	; 0xfce <MinUart_serviceRx+0x1be>

			case MIN_FC06:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC06;
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	fe 01       	movw	r30, r28
     f20:	e3 5f       	subi	r30, 0xF3	; 243
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	80 83       	st	Z, r24
     f26:	91 83       	std	Z+1, r25	; 0x01
				break;
     f28:	52 c0       	rjmp	.+164    	; 0xfce <MinUart_serviceRx+0x1be>

			case MIN_FC16:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC16;
     f2a:	89 e0       	ldi	r24, 0x09	; 9
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fe 01       	movw	r30, r28
     f30:	e3 5f       	subi	r30, 0xF3	; 243
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	4a c0       	rjmp	.+148    	; 0xfce <MinUart_serviceRx+0x1be>
				break;

			case MIN_FC65_SLAVE_POLL:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC65;
     f3a:	84 e0       	ldi	r24, 0x04	; 4
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	fe 01       	movw	r30, r28
     f40:	e3 5f       	subi	r30, 0xF3	; 243
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	80 83       	st	Z, r24
     f46:	91 83       	std	Z+1, r25	; 0x01
				break;
     f48:	42 c0       	rjmp	.+132    	; 0xfce <MinUart_serviceRx+0x1be>

			case MIN_FC67_DISCOVER:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC67;
     f4a:	88 e0       	ldi	r24, 0x08	; 8
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	fe 01       	movw	r30, r28
     f50:	e3 5f       	subi	r30, 0xF3	; 243
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
				break;
     f58:	3a c0       	rjmp	.+116    	; 0xfce <MinUart_serviceRx+0x1be>
			
			case MIN_FC69_GET_PRODUCT_INFO:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC69;
     f5a:	88 e0       	ldi	r24, 0x08	; 8
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	fe 01       	movw	r30, r28
     f60:	e3 5f       	subi	r30, 0xF3	; 243
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	80 83       	st	Z, r24
     f66:	91 83       	std	Z+1, r25	; 0x01
				break;
     f68:	32 c0       	rjmp	.+100    	; 0xfce <MinUart_serviceRx+0x1be>
				
			case MIN_FC70_STORE_PRODUCT_INFO:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC70;
     f6a:	89 e6       	ldi	r24, 0x69	; 105
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	fe 01       	movw	r30, r28
     f70:	e3 5f       	subi	r30, 0xF3	; 243
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	80 83       	st	Z, r24
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	2a c0       	rjmp	.+84     	; 0xfce <MinUart_serviceRx+0x1be>
				break;

			default: // Unknown FC code
				uart->currentState = WAIT_FOR_RESYNC;
     f7a:	fe 01       	movw	r30, r28
     f7c:	ee 5e       	subi	r30, 0xEE	; 238
     f7e:	fe 4f       	sbci	r31, 0xFE	; 254
     f80:	10 82       	st	Z, r1
				HardwareUart_clearRxBuf();
     f82:	0e 94 8c 05 	call	0xb18	; 0xb18 <USART_ClearRxBuffer>
				break;
			}
		}

		// FC16 received and number of data bytes is rxByte?
		if ((uart->functionCode == (uint8_t) MIN_FC16) && (uart->rxBufferIndex == (uint8_t) MIN_FC16_BYTES_TO_RX_INDEX)) {
     f86:	fe 01       	movw	r30, r28
     f88:	ef 5e       	subi	r30, 0xEF	; 239
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	80 81       	ld	r24, Z
     f8e:	80 31       	cpi	r24, 0x10	; 16
     f90:	79 f4       	brne	.+30     	; 0xfb0 <MinUart_serviceRx+0x1a0>
     f92:	32 97       	sbiw	r30, 0x02	; 2
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	06 97       	sbiw	r24, 0x06	; 6
     f9a:	c9 f4       	brne	.+50     	; 0xfce <MinUart_serviceRx+0x1be>
			uart->dataLength += rxByte;
     f9c:	32 97       	sbiw	r30, 0x02	; 2
     f9e:	20 91 6e 3b 	lds	r18, 0x3B6E	; 0x803b6e <rxByte.3754>
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	82 0f       	add	r24, r18
     fa8:	91 1d       	adc	r25, r1
     faa:	80 83       	st	Z, r24
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	0f c0       	rjmp	.+30     	; 0xfce <MinUart_serviceRx+0x1be>
		}
		// FC70 received and number of data bytes is rxByte?
		else if((uart->functionCode == (uint8_t) MIN_FC70_STORE_PRODUCT_INFO) && (uart->rxBufferIndex == (uint8_t) MIN_FC70_BYTES_TO_RX_INDEX)){
     fb0:	86 34       	cpi	r24, 0x46	; 70
     fb2:	69 f4       	brne	.+26     	; 0xfce <MinUart_serviceRx+0x1be>
     fb4:	fe 01       	movw	r30, r28
     fb6:	e1 5f       	subi	r30, 0xF1	; 241
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	02 97       	sbiw	r24, 0x02	; 2
     fc0:	31 f4       	brne	.+12     	; 0xfce <MinUart_serviceRx+0x1be>
			uart->dataLength = rxByte;
     fc2:	32 97       	sbiw	r30, 0x02	; 2
     fc4:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <rxByte.3754>
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	80 83       	st	Z, r24
     fcc:	91 83       	std	Z+1, r25	; 0x01
		}	
		// Increment buffer pointer
		
		uart->rxBufferIndex += 1;
     fce:	fe 01       	movw	r30, r28
     fd0:	e1 5f       	subi	r30, 0xF1	; 241
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	80 83       	st	Z, r24
     fdc:	91 83       	std	Z+1, r25	; 0x01
		
		// Have all bytes arrived?

		if (uart->rxBufferIndex >= uart->dataLength) {
     fde:	32 97       	sbiw	r30, 0x02	; 2
     fe0:	00 81       	ld	r16, Z
     fe2:	11 81       	ldd	r17, Z+1	; 0x01
     fe4:	80 17       	cp	r24, r16
     fe6:	91 07       	cpc	r25, r17
     fe8:	d8 f1       	brcs	.+118    	; 0x1060 <MinUart_serviceRx+0x250>
            // All bytes received

			// Reset state for next incoming message regardless of CRC check.
			uart->currentState = WAIT_FOR_RESYNC;   // In case extra bytes sent
     fea:	35 96       	adiw	r30, 0x05	; 5
     fec:	10 82       	st	Z, r1
			uart->rxBufferIndex = 0;				// Make sure next received character is assumed to be first.
     fee:	33 97       	sbiw	r30, 0x03	; 3
     ff0:	10 82       	st	Z, r1
     ff2:	11 82       	std	Z+1, r1	; 0x01

			// Check CRC, if good signal calling method to process it and reply.
			crc = get_crc_16(0xFFFF, uart->rxBuffer, (uart->dataLength - 2));
     ff4:	78 01       	movw	r14, r16
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	e8 1a       	sub	r14, r24
     ffa:	f1 08       	sbc	r15, r1
     ffc:	a7 01       	movw	r20, r14
     ffe:	be 01       	movw	r22, r28
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_crc_16>
			
			if (crc == (((uint16_t) uart->rxBuffer[uart->dataLength - 1] << 8) +  (uint16_t) uart->rxBuffer[uart->dataLength - 2])) {
    100c:	fe 01       	movw	r30, r28
    100e:	e0 0f       	add	r30, r16
    1010:	f1 1f       	adc	r31, r17
    1012:	20 81       	ld	r18, Z
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	32 2f       	mov	r19, r18
    1018:	22 27       	eor	r18, r18
    101a:	fe 01       	movw	r30, r28
    101c:	ee 0d       	add	r30, r14
    101e:	ff 1d       	adc	r31, r15
    1020:	41 81       	ldd	r20, Z+1	; 0x01
    1022:	24 0f       	add	r18, r20
    1024:	31 1d       	adc	r19, r1
    1026:	82 17       	cp	r24, r18
    1028:	93 07       	cpc	r25, r19
    102a:	49 f4       	brne	.+18     	; 0x103e <MinUart_serviceRx+0x22e>
				
		        // CRC is good!
		    	// Set flag to process message upon return to MinSlave_manageMessage()
				uart->badCrcFlag = FALSE;
    102c:	fe 01       	movw	r30, r28
    102e:	e4 5f       	subi	r30, 0xF4	; 244
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	10 82       	st	Z, r1
		    	uart->processPacketFlag = TRUE;
    1034:	c6 5f       	subi	r28, 0xF6	; 246
    1036:	de 4f       	sbci	r29, 0xFE	; 254
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	88 83       	st	Y, r24
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <MinUart_serviceRx+0x250>
			}
			else {
				uart->badCrcFlag = TRUE;
    103e:	fe 01       	movw	r30, r28
    1040:	e4 5f       	subi	r30, 0xF4	; 244
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	80 83       	st	Z, r24
				uart->processPacketFlag = FALSE;
    1048:	c6 5f       	subi	r28, 0xF6	; 246
    104a:	de 4f       	sbci	r29, 0xFE	; 254
    104c:	18 82       	st	Y, r1
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <MinUart_serviceRx+0x250>
				break;
			}
		}

		// FC16 received and number of data bytes is rxByte?
		if ((uart->functionCode == (uint8_t) MIN_FC16) && (uart->rxBufferIndex == (uint8_t) MIN_FC16_BYTES_TO_RX_INDEX)) {
    1050:	fe 01       	movw	r30, r28
    1052:	ef 5e       	subi	r30, 0xEF	; 239
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	80 81       	ld	r24, Z
    1058:	80 31       	cpi	r24, 0x10	; 16
    105a:	09 f0       	breq	.+2      	; 0x105e <MinUart_serviceRx+0x24e>
    105c:	a9 cf       	rjmp	.-174    	; 0xfb0 <MinUart_serviceRx+0x1a0>
    105e:	b7 cf       	rjmp	.-146    	; 0xfce <MinUart_serviceRx+0x1be>
		}

	} // End switch current state


}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <MinUart_serviceTx>:
---------------------------------------------------------------------------------------
*/

void MinUart_serviceTx(MinUart_STYP *uart){
	// If the last byte has been transmitted then change the 485 to receive
	MinUart_init(uart);  // Reset everything.
    106e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <MinUart_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1072:	0e 98       	cbi	0x01, 6	; 1
    1074:	08 95       	ret

00001076 <NFC_InstantaneousWrite>:
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
	data = I2cDrive_ReceiveByte();
	I2cDrive_Stop();
	return data;
}
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	d6 2f       	mov	r29, r22
    107e:	17 2f       	mov	r17, r23
    1080:	c4 2f       	mov	r28, r20
    1082:	0e 94 1e 06 	call	0xc3c	; 0xc3c <I2cDrive_Start>
    1086:	86 ea       	ldi	r24, 0xA6	; 166
    1088:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    108c:	81 2f       	mov	r24, r17
    108e:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    1092:	8d 2f       	mov	r24, r29
    1094:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    109e:	8c 2f       	mov	r24, r28
    10a0:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    10a4:	0e 94 2c 06 	call	0xc58	; 0xc58 <I2cDrive_Stop>
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	08 95       	ret

000010b0 <NFC_ReadByte>:
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	c8 2f       	mov	r28, r24
    10b6:	d9 2f       	mov	r29, r25
    10b8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <I2cDrive_Start>
    10bc:	86 ea       	ldi	r24, 0xA6	; 166
    10be:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    10c2:	8d 2f       	mov	r24, r29
    10c4:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    10c8:	8c 2f       	mov	r24, r28
    10ca:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    10ce:	0e 94 1e 06 	call	0xc3c	; 0xc3c <I2cDrive_Start>
    10d2:	87 ea       	ldi	r24, 0xA7	; 167
    10d4:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    10d8:	0e 94 89 06 	call	0xd12	; 0xd12 <I2cDrive_ReceiveByte>
    10dc:	c8 2f       	mov	r28, r24
    10de:	0e 94 47 06 	call	0xc8e	; 0xc8e <I2cDrive_NAckSend>
    10e2:	0e 94 2c 06 	call	0xc58	; 0xc58 <I2cDrive_Stop>
    10e6:	8c 2f       	mov	r24, r28
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <NFC_init>:
					 to 0x5a5a
1.02    09-10-2020   Updated the NFC config assignment LSB first     Anish Venkataraman
					 and then MSB
---------------------------------------------------------------------------------------*/

void NFC_init(NFC_STYP *nfc) {
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
	nfc->configuration = NFC_ReadByte(NFC_CONFIG_CODE_MSB) << 8;			//MSB location for configuration
    10f4:	89 e9       	ldi	r24, 0x99	; 153
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <NFC_ReadByte>
    10fc:	1f 82       	std	Y+7, r1	; 0x07
    10fe:	88 87       	std	Y+8, r24	; 0x08
	nfc->configuration |= NFC_ReadByte(NFC_CONFIG_CODE_LSB);				//LSB location for configuration
    1100:	88 e9       	ldi	r24, 0x98	; 152
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 58 08 	call	0x10b0	; 0x10b0 <NFC_ReadByte>
    1108:	2f 81       	ldd	r18, Y+7	; 0x07
    110a:	38 85       	ldd	r19, Y+8	; 0x08
    110c:	a9 01       	movw	r20, r18
    110e:	48 2b       	or	r20, r24
    1110:	ca 01       	movw	r24, r20
    1112:	8f 83       	std	Y+7, r24	; 0x07
    1114:	98 87       	std	Y+8, r25	; 0x08
	//ToDo create a look up table for checking if the config code is valid or not
	if(nfc->configuration > 0){
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	49 f0       	breq	.+18     	; 0x112c <NFC_init+0x3e>
		oMinSlave.slaveRegisters[MIN_SLAVE_MODEL_CONFIGURATION_CODE] = nfc->configuration; //save configuration
    111a:	e2 e2       	ldi	r30, 0x22	; 34
    111c:	f8 e3       	ldi	r31, 0x38	; 56
    111e:	86 87       	std	Z+14, r24	; 0x0e
    1120:	97 87       	std	Z+15, r25	; 0x0f
		oMinSlave.slaveRegisters[MIN_SLAVE_EEPROM_INIT_VALUE_RNUM] = INITIALIZED; 
    1122:	8a e5       	ldi	r24, 0x5A	; 90
    1124:	9a e5       	ldi	r25, 0x5A	; 90
    1126:	86 83       	std	Z+6, r24	; 0x06
    1128:	97 83       	std	Z+7, r25	; 0x07
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <NFC_init+0x4a>
	}
	else{
		oMinSlave.slaveRegisters[MIN_SLAVE_MODEL_CONFIGURATION_CODE] = 0; 
    112c:	e2 e2       	ldi	r30, 0x22	; 34
    112e:	f8 e3       	ldi	r31, 0x38	; 56
    1130:	16 86       	std	Z+14, r1	; 0x0e
    1132:	17 86       	std	Z+15, r1	; 0x0f
		oMinSlave.slaveRegisters[MIN_SLAVE_EEPROM_INIT_VALUE_RNUM] = 0;
    1134:	16 82       	std	Z+6, r1	; 0x06
    1136:	17 82       	std	Z+7, r1	; 0x07
	}
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <NFC_SequentialRead>:
 *-------*-----------*-----------------------------------------------*-------------------
1.00    06-26-2020   Original code                                   Anish Venkataraman
1.01    07-07-2020   Removed NFC_STYP parameter passed				 Anish Venkataraman
---------------------------------------------------------------------------------------*/

void NFC_SequentialRead(uint16_t address, uint8_t length, uint8_t *data) {
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	c8 2f       	mov	r28, r24
    1150:	d9 2f       	mov	r29, r25
    1152:	e6 2e       	mov	r14, r22
    1154:	d4 2e       	mov	r13, r20
    1156:	f5 2e       	mov	r15, r21
	uint8_t i;
	I2cDrive_Start();
    1158:	0e 94 1e 06 	call	0xc3c	; 0xc3c <I2cDrive_Start>
	(void)I2cDrive_SendByte(NFC_ADDRESS_Write);
    115c:	86 ea       	ldi	r24, 0xA6	; 166
    115e:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address >> MSB_MASK);
    1162:	8d 2f       	mov	r24, r29
    1164:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address & LSB_MASK);
    1168:	8c 2f       	mov	r24, r28
    116a:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	//Read Data
	I2cDrive_Start();
    116e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <I2cDrive_Start>
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
    1172:	87 ea       	ldi	r24, 0xA7	; 167
    1174:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	for(i = 0; i < length; i++){
    1178:	ee 20       	and	r14, r14
    117a:	01 f1       	breq	.+64     	; 0x11bc <NFC_SequentialRead+0x7e>
    117c:	0d 2d       	mov	r16, r13
    117e:	1f 2d       	mov	r17, r15
    1180:	cc 24       	eor	r12, r12
    1182:	ca 94       	dec	r12
    1184:	ce 0c       	add	r12, r14
    1186:	d1 2c       	mov	r13, r1
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	c8 1a       	sub	r12, r24
    118c:	d8 0a       	sbc	r13, r24
    118e:	c0 e0       	ldi	r28, 0x00	; 0
    1190:	d0 e0       	ldi	r29, 0x00	; 0
		*data++ = I2cDrive_ReceiveByte();
		if(i < length-1) {
    1192:	f1 2c       	mov	r15, r1
    1194:	e1 e0       	ldi	r30, 0x01	; 1
    1196:	ee 1a       	sub	r14, r30
    1198:	f1 08       	sbc	r15, r1
	(void)I2cDrive_SendByte(address & LSB_MASK);
	//Read Data
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
	for(i = 0; i < length; i++){
		*data++ = I2cDrive_ReceiveByte();
    119a:	0e 94 89 06 	call	0xd12	; 0xd12 <I2cDrive_ReceiveByte>
    119e:	f8 01       	movw	r30, r16
    11a0:	81 93       	st	Z+, r24
    11a2:	8f 01       	movw	r16, r30
		if(i < length-1) {
    11a4:	ce 15       	cp	r28, r14
    11a6:	df 05       	cpc	r29, r15
    11a8:	1c f4       	brge	.+6      	; 0x11b0 <NFC_SequentialRead+0x72>
			I2cDrive_AckSend();	//ACK all the bytes received
    11aa:	0e 94 3a 06 	call	0xc74	; 0xc74 <I2cDrive_AckSend>
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <NFC_SequentialRead+0x76>
		}
		else{
			I2cDrive_NAckSend();//NAK the last byte received
    11b0:	0e 94 47 06 	call	0xc8e	; 0xc8e <I2cDrive_NAckSend>
    11b4:	21 96       	adiw	r28, 0x01	; 1
	(void)I2cDrive_SendByte(address >> MSB_MASK);
	(void)I2cDrive_SendByte(address & LSB_MASK);
	//Read Data
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
	for(i = 0; i < length; i++){
    11b6:	cc 15       	cp	r28, r12
    11b8:	dd 05       	cpc	r29, r13
    11ba:	79 f7       	brne	.-34     	; 0x119a <NFC_SequentialRead+0x5c>
		}
		else{
			I2cDrive_NAckSend();//NAK the last byte received
		}
	}
	I2cDrive_Stop();
    11bc:	0e 94 2c 06 	call	0xc58	; 0xc58 <I2cDrive_Stop>
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	08 95       	ret

000011d2 <NFC_getUpdateBlkAddress>:
History:
 *-------*-----------*---------------------------------------------------*--------------
1.00    08-28-2020   Original code                                   Anish Venkataraman
---------------------------------------------------------------------------------------*/
uint16_t NFC_getUpdateBlkAddress(NFC_STYP *nfc){
	if(nfc->update.blockNumber == BLOCK2){
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 5f       	subi	r30, 0xF2	; 242
    11d6:	fd 4f       	sbci	r31, 0xFD	; 253
    11d8:	20 81       	ld	r18, Z
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	41 f4       	brne	.+16     	; 0x11ee <NFC_getUpdateBlkAddress+0x1c>
		return (BLOCK2_OFFSET + (nfc->update.registerNumber *2));
    11de:	31 96       	adiw	r30, 0x01	; 1
    11e0:	80 81       	ld	r24, Z
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	80 57       	subi	r24, 0x70	; 112
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	08 95       	ret
	}
	else if(nfc->update.blockNumber == BLOCK11){
    11ee:	2b 30       	cpi	r18, 0x0B	; 11
    11f0:	51 f4       	brne	.+20     	; 0x1206 <NFC_getUpdateBlkAddress+0x34>
		return (BLOCK11_OFFSET + (nfc->update.registerNumber *2));
    11f2:	fc 01       	movw	r30, r24
    11f4:	e1 5f       	subi	r30, 0xF1	; 241
    11f6:	fd 4f       	sbci	r31, 0xFD	; 253
    11f8:	80 81       	ld	r24, Z
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	80 5f       	subi	r24, 0xF0	; 240
    11fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	08 95       	ret
	}
	else{
		return (BLOCK226_OFFSET + (nfc->update.registerNumber *2));
    1206:	fc 01       	movw	r30, r24
    1208:	e1 5f       	subi	r30, 0xF1	; 241
    120a:	fd 4f       	sbci	r31, 0xFD	; 253
    120c:	80 81       	ld	r24, Z
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	80 57       	subi	r24, 0x70	; 112
    1212:	9e 4f       	sbci	r25, 0xFE	; 254
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
	}
}
    1218:	08 95       	ret

0000121a <NFC_getBroadcastBlkAddress>:
History:
 *-------*-----------*---------------------------------------------------*--------------
1.00    08-28-2020   Original code                                   Anish Venkataraman
---------------------------------------------------------------------------------------*/
uint16_t NFC_getBroadcastBlkAddress(NFC_STYP *nfc){
	if(nfc->broadcast.blockNumber == BLOCK2){
    121a:	fc 01       	movw	r30, r24
    121c:	e5 5f       	subi	r30, 0xF5	; 245
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	20 81       	ld	r18, Z
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	41 f4       	brne	.+16     	; 0x1236 <NFC_getBroadcastBlkAddress+0x1c>
		return (BLOCK2_OFFSET + (nfc->broadcast.registerNumber *2));
    1226:	31 96       	adiw	r30, 0x01	; 1
    1228:	80 81       	ld	r24, Z
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	80 57       	subi	r24, 0x70	; 112
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	08 95       	ret
	}
	else if(nfc->broadcast.blockNumber == BLOCK11){
    1236:	2b 30       	cpi	r18, 0x0B	; 11
    1238:	51 f4       	brne	.+20     	; 0x124e <NFC_getBroadcastBlkAddress+0x34>
		return (BLOCK11_OFFSET + (nfc->broadcast.registerNumber *2));
    123a:	fc 01       	movw	r30, r24
    123c:	e4 5f       	subi	r30, 0xF4	; 244
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	80 5f       	subi	r24, 0xF0	; 240
    1246:	9e 4f       	sbci	r25, 0xFE	; 254
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	08 95       	ret
	}
	else{
		return (BLOCK226_OFFSET + (nfc->broadcast.registerNumber *2));
    124e:	fc 01       	movw	r30, r24
    1250:	e4 5f       	subi	r30, 0xF4	; 244
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	80 81       	ld	r24, Z
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	80 57       	subi	r24, 0x70	; 112
    125a:	9e 4f       	sbci	r25, 0xFE	; 254
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
	}
}
    1260:	08 95       	ret

00001262 <NFC_PageWrite>:
=======================================================================================
History:
 *-------*-----------*---------------------------------------------------*--------------
1.00    08-28-2020   Original code                                   Anish Venkataraman
---------------------------------------------------------------------------------------*/
void NFC_PageWrite(uint16_t address, uint8_t *data) {
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	c8 2f       	mov	r28, r24
    126c:	d9 2f       	mov	r29, r25
    126e:	8b 01       	movw	r16, r22
	uint8_t i = 0;
	I2cDrive_Start();
    1270:	0e 94 1e 06 	call	0xc3c	; 0xc3c <I2cDrive_Start>
	(void)I2cDrive_SendByte(NFC_ADDRESS_Write);
    1274:	86 ea       	ldi	r24, 0xA6	; 166
    1276:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address >> MSB_MASK);
    127a:	8d 2f       	mov	r24, r29
    127c:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address & LSB_MASK);
    1280:	8c 2f       	mov	r24, r28
    1282:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
    1286:	e8 01       	movw	r28, r16
    1288:	0c 5f       	subi	r16, 0xFC	; 252
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i = 0; i < BYTES_IN_PAGE; i++){
		I2cDrive_SendByte(*data++);
    128c:	89 91       	ld	r24, Y+
    128e:	0e 94 54 06 	call	0xca8	; 0xca8 <I2cDrive_SendByte>
	uint8_t i = 0;
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Write);
	(void)I2cDrive_SendByte(address >> MSB_MASK);
	(void)I2cDrive_SendByte(address & LSB_MASK);
	for(i = 0; i < BYTES_IN_PAGE; i++){
    1292:	c0 17       	cp	r28, r16
    1294:	d1 07       	cpc	r29, r17
    1296:	d1 f7       	brne	.-12     	; 0x128c <NFC_PageWrite+0x2a>
		I2cDrive_SendByte(*data++);
	}
	I2cDrive_Stop();
    1298:	0e 94 2c 06 	call	0xc58	; 0xc58 <I2cDrive_Stop>
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <MyMain_systemInit>:

---------------------------------------------------------------------------------------
*/

void MyMain_systemInit(void){
	LedCtrl_init(&oLed);
    12a6:	82 e8       	ldi	r24, 0x82	; 130
    12a8:	9e e3       	ldi	r25, 0x3E	; 62
    12aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LedCtrl_init>
	MinSlave_init(&oMinSlave);
    12ae:	82 e2       	ldi	r24, 0x22	; 34
    12b0:	98 e3       	ldi	r25, 0x38	; 56
    12b2:	0e 94 41 01 	call	0x282	; 0x282 <MinSlave_init>
	NFC_init(&oNFC);
    12b6:	81 e7       	ldi	r24, 0x71	; 113
    12b8:	9b e3       	ldi	r25, 0x3B	; 59
    12ba:	0e 94 77 08 	call	0x10ee	; 0x10ee <NFC_init>
    12be:	08 95       	ret

000012c0 <MyMain_main>:
---------------------------------------------------------------------------------------
*/
void MyMain_main(void){
	
	//Initialize Objects
	MyMain_systemInit();
    12c0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MyMain_systemInit>
	while(1)
	{
		//1ms interrupt check
		if(mainObject.realTimeInterruptFlag == TRUE){			// Set every 1 msec in driver_isr.c
    12c4:	cf e6       	ldi	r28, 0x6F	; 111
    12c6:	db e3       	ldi	r29, 0x3B	; 59
			Scheduler_manageTasks();
		}
		//1min interrupt check
		if(mainObject.schedulerNFCRunFlag == TRUE){				// Set every 1min in driver_isr.c
			//only write if the permission to save has been initiated by TRC
			if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED){
    12c8:	02 e2       	ldi	r16, 0x22	; 34
    12ca:	18 e3       	ldi	r17, 0x38	; 56
	//Initialize Objects
	MyMain_systemInit();
	while(1)
	{
		//1ms interrupt check
		if(mainObject.realTimeInterruptFlag == TRUE){			// Set every 1 msec in driver_isr.c
    12cc:	88 81       	ld	r24, Y
    12ce:	88 23       	and	r24, r24
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <MyMain_main+0x18>
			mainObject.realTimeInterruptFlag = FALSE;
    12d2:	18 82       	st	Y, r1
			Scheduler_manageTasks();
    12d4:	0e 94 a9 09 	call	0x1352	; 0x1352 <Scheduler_manageTasks>
		}
		//1min interrupt check
		if(mainObject.schedulerNFCRunFlag == TRUE){				// Set every 1min in driver_isr.c
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	88 23       	and	r24, r24
    12dc:	b9 f3       	breq	.-18     	; 0x12cc <MyMain_main+0xc>
			//only write if the permission to save has been initiated by TRC
			if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED){
    12de:	f8 01       	movw	r30, r16
    12e0:	80 a1       	ldd	r24, Z+32	; 0x20
    12e2:	91 a1       	ldd	r25, Z+33	; 0x21
    12e4:	8a 35       	cpi	r24, 0x5A	; 90
    12e6:	9a 45       	sbci	r25, 0x5A	; 90
    12e8:	11 f4       	brne	.+4      	; 0x12ee <MyMain_main+0x2e>
			//Writes to NFC's memory if the there is any data to be written
				Scheduler_serviceNFCWrite();
    12ea:	0e 94 79 09 	call	0x12f2	; 0x12f2 <Scheduler_serviceNFCWrite>
			}
			mainObject.schedulerNFCRunFlag = FALSE;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	ed cf       	rjmp	.-38     	; 0x12cc <MyMain_main+0xc>

000012f2 <Scheduler_serviceNFCWrite>:
 ----------------------------------------------------------------------------------------
*/

void Scheduler_serviceNFCWrite(void) {
	static uint8_t secondCounter = 1;
	 if (secondCounter == SCHEDULER_BLK2_WRITE) {
    12f2:	80 91 64 39 	lds	r24, 0x3964	; 0x803964 <secondCounter.3926>
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	21 f4       	brne	.+8      	; 0x1302 <Scheduler_serviceNFCWrite+0x10>
		 oNFC.block2WriteFLG = TRUE;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 71 3b 	sts	0x3B71, r24	; 0x803b71 <oNFC>
    1300:	0d c0       	rjmp	.+26     	; 0x131c <Scheduler_serviceNFCWrite+0x2a>
	 }
	 else if (secondCounter == SCHEDULER_BLK11_WRITE) {
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	21 f4       	brne	.+8      	; 0x130e <Scheduler_serviceNFCWrite+0x1c>
		  oNFC.block11WriteFLG = TRUE;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	80 93 72 3b 	sts	0x3B72, r24	; 0x803b72 <oNFC+0x1>
    130c:	07 c0       	rjmp	.+14     	; 0x131c <Scheduler_serviceNFCWrite+0x2a>
	 }
	else if (secondCounter == SCHEDULER_BLK226_WRITE) {
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	29 f4       	brne	.+10     	; 0x131c <Scheduler_serviceNFCWrite+0x2a>
		 oNFC.block226WriteFLG = TRUE;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	80 93 73 3b 	sts	0x3B73, r24	; 0x803b73 <oNFC+0x2>
		secondCounter = 1;
    1318:	80 93 64 39 	sts	0x3964, r24	; 0x803964 <secondCounter.3926>
	 }
	 secondCounter++;
    131c:	80 91 64 39 	lds	r24, 0x3964	; 0x803964 <secondCounter.3926>
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	80 93 64 39 	sts	0x3964, r24	; 0x803964 <secondCounter.3926>
    1326:	08 95       	ret

00001328 <Scheduler_minTimeoutCheck>:
 1.00    08-02-2019  Original code                                       Tom Van Sistine
 ----------------------------------------------------------------------------------------
 */

void Scheduler_minTimeoutCheck(void){
	if(oMinSlave.communicationTimeoutCNTR){
    1328:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <oMinSlave+0x22>
    132c:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <oMinSlave+0x23>
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	71 f0       	breq	.+28     	; 0x1350 <Scheduler_minTimeoutCheck+0x28>
		oMinSlave.communicationTimeoutCNTR--;
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <oMinSlave+0x22>
    133a:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <oMinSlave+0x23>
		if(oMinSlave.communicationTimeoutCNTR == 0) {
    133e:	89 2b       	or	r24, r25
    1340:	39 f4       	brne	.+14     	; 0x1350 <Scheduler_minTimeoutCheck+0x28>
			oMinSlave.uart.baudSelect = BR_SELECT_115200;  // Set back to Discovery baud
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <oMinSlave+0x13a>
			MinSlave_init(&oMinSlave);
    1348:	82 e2       	ldi	r24, 0x22	; 34
    134a:	98 e3       	ldi	r25, 0x38	; 56
    134c:	0e 94 41 01 	call	0x282	; 0x282 <MinSlave_init>
    1350:	08 95       	ret

00001352 <Scheduler_manageTasks>:
1.05	01-08-2021  Added code to save data only when permitted by	 Anish Venkataraman
					TRC
---------------------------------------------------------------------------------------
*/
void Scheduler_manageTasks(void)
{
    1352:	9f 92       	push	r9
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	00 d0       	rcall	.+0      	; 0x136a <Scheduler_manageTasks+0x18>
    136a:	00 d0       	rcall	.+0      	; 0x136c <Scheduler_manageTasks+0x1a>
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	uint8_t flashCode = 0;
	LedCtrl_ledsManager(&oLed,flashCode);
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	82 e8       	ldi	r24, 0x82	; 130
    1374:	9e e3       	ldi	r25, 0x3E	; 62
    1376:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LedCtrl_ledsManager>
	Scheduler_minTimeoutCheck();
    137a:	0e 94 94 09 	call	0x1328	; 0x1328 <Scheduler_minTimeoutCheck>
	//only write if the permission to save has been initiated by TRC
	if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED){
    137e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <oMinSlave+0x20>
    1382:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <oMinSlave+0x21>
    1386:	8a 35       	cpi	r24, 0x5A	; 90
    1388:	9a 45       	sbci	r25, 0x5A	; 90
    138a:	09 f0       	breq	.+2      	; 0x138e <Scheduler_manageTasks+0x3c>
    138c:	16 c1       	rjmp	.+556    	; 0x15ba <Scheduler_manageTasks+0x268>
			if(oNFC.instantWriteFLG == TRUE){//schedule to write block instantly
    138e:	80 91 74 3b 	lds	r24, 0x3B74	; 0x803b74 <oNFC+0x3>
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <Scheduler_manageTasks+0x46>
    1396:	4b c0       	rjmp	.+150    	; 0x142e <Scheduler_manageTasks+0xdc>
	uint8_t length = 0;
	uint8_t data[BYTES_IN_PAGE];
	uint8_t j = 0;
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getUpdateBlkAddress(&oNFC);
    1398:	81 e7       	ldi	r24, 0x71	; 113
    139a:	9b e3       	ldi	r25, 0x3B	; 59
    139c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <NFC_getUpdateBlkAddress>
    13a0:	6c 01       	movw	r12, r24
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
    13a2:	80 91 81 3d 	lds	r24, 0x3D81	; 0x803d81 <oNFC+0x210>
    13a6:	56 01       	movw	r10, r12
    13a8:	a8 0e       	add	r10, r24
    13aa:	b1 1c       	adc	r11, r1
    13ac:	ca 14       	cp	r12, r10
    13ae:	db 04       	cpc	r13, r11
    13b0:	d8 f5       	brcc	.+118    	; 0x1428 <Scheduler_manageTasks+0xd6>
    13b2:	10 e0       	ldi	r17, 0x00	; 0
			}
			data[j] = oNFC.update.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){
			NFC_PageWrite(i,data);
			oNFC.schedulerNFCWriteWait = TRUE;
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f1 e7       	ldi	r31, 0x71	; 113
    13b8:	ef 2e       	mov	r14, r31
    13ba:	fb e3       	ldi	r31, 0x3B	; 59
    13bc:	ff 2e       	mov	r15, r31
    13be:	f0 2d       	mov	r31, r0
    13c0:	99 24       	eor	r9, r9
    13c2:	93 94       	inc	r9
	//get address and length of bytes to write
	address = NFC_getUpdateBlkAddress(&oNFC);
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
    13c4:	ae 01       	movw	r20, r28
    13c6:	4f 5f       	subi	r20, 0xFF	; 255
    13c8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ca:	64 e0       	ldi	r22, 0x04	; 4
    13cc:	c6 01       	movw	r24, r12
    13ce:	0e 94 9f 08 	call	0x113e	; 0x113e <NFC_SequentialRead>
    13d2:	fe 01       	movw	r30, r28
    13d4:	31 96       	adiw	r30, 0x01	; 1
    13d6:	04 e0       	ldi	r16, 0x04	; 4
    13d8:	01 0f       	add	r16, r17
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	9f 01       	movw	r18, r30
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.update.nfcBuffer[index]){
    13de:	a1 2f       	mov	r26, r17
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ae 57       	subi	r26, 0x7E	; 126
    13e4:	b2 4c       	sbci	r27, 0xC2	; 194
    13e6:	8c 91       	ld	r24, X
    13e8:	90 81       	ld	r25, Z
    13ea:	98 13       	cpse	r25, r24
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <Scheduler_manageTasks+0x9e>
				count++;
    13ee:	4f 5f       	subi	r20, 0xFF	; 255
			}
			data[j] = oNFC.update.nfcBuffer[index++];
    13f0:	1f 5f       	subi	r17, 0xFF	; 255
    13f2:	d9 01       	movw	r26, r18
    13f4:	8c 93       	st	X, r24
    13f6:	31 96       	adiw	r30, 0x01	; 1
	address = NFC_getUpdateBlkAddress(&oNFC);
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
    13f8:	10 13       	cpse	r17, r16
    13fa:	f0 cf       	rjmp	.-32     	; 0x13dc <Scheduler_manageTasks+0x8a>
			if(data[j] == oNFC.update.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.update.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){
    13fc:	44 30       	cpi	r20, 0x04	; 4
    13fe:	69 f0       	breq	.+26     	; 0x141a <Scheduler_manageTasks+0xc8>
			NFC_PageWrite(i,data);
    1400:	be 01       	movw	r22, r28
    1402:	6f 5f       	subi	r22, 0xFF	; 255
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	c6 01       	movw	r24, r12
    1408:	0e 94 31 09 	call	0x1262	; 0x1262 <NFC_PageWrite>
			oNFC.schedulerNFCWriteWait = TRUE;
    140c:	f7 01       	movw	r30, r14
    140e:	96 82       	std	Z+6, r9	; 0x06
			//wait for 5ms before next read
			while(oNFC.schedulerNFCWriteWait == TRUE);
    1410:	d7 01       	movw	r26, r14
    1412:	16 96       	adiw	r26, 0x06	; 6
    1414:	8c 91       	ld	r24, X
    1416:	81 11       	cpse	r24, r1
    1418:	fb cf       	rjmp	.-10     	; 0x1410 <Scheduler_manageTasks+0xbe>
		}
		j = 0;
		count = 0;
		i = i + BYTES_IN_PAGE;
    141a:	b4 e0       	ldi	r27, 0x04	; 4
    141c:	cb 0e       	add	r12, r27
    141e:	d1 1c       	adc	r13, r1
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.update.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.update.nfcBuffer[index++];
    1420:	10 2f       	mov	r17, r16
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getUpdateBlkAddress(&oNFC);
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
    1422:	ca 14       	cp	r12, r10
    1424:	db 04       	cpc	r13, r11
    1426:	70 f2       	brcs	.-100    	; 0x13c4 <Scheduler_manageTasks+0x72>
	Scheduler_minTimeoutCheck();
	//only write if the permission to save has been initiated by TRC
	if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED){
			if(oNFC.instantWriteFLG == TRUE){//schedule to write block instantly
				Scheduler_writeInstant();
				oNFC.instantWriteFLG = FALSE;
    1428:	10 92 74 3b 	sts	0x3B74, r1	; 0x803b74 <oNFC+0x3>
    142c:	c6 c0       	rjmp	.+396    	; 0x15ba <Scheduler_manageTasks+0x268>
			}
			else if (oNFC.productInfoFLG == TRUE){//schedule to write productInfo block
    142e:	80 91 75 3b 	lds	r24, 0x3B75	; 0x803b75 <oNFC+0x4>
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <Scheduler_manageTasks+0xe6>
    1436:	50 c0       	rjmp	.+160    	; 0x14d8 <Scheduler_manageTasks+0x186>
	uint8_t j = 0;
	uint8_t index;
	address = BLOCK_NVM_OFFSET;
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
    1438:	a0 90 7a 3b 	lds	r10, 0x3B7A	; 0x803b7a <oNFC+0x9>
    143c:	b0 90 7b 3b 	lds	r11, 0x3B7B	; 0x803b7b <oNFC+0xa>
    1440:	bb 24       	eor	r11, r11
    1442:	e0 e2       	ldi	r30, 0x20	; 32
    1444:	ae 0e       	add	r10, r30
    1446:	b1 1c       	adc	r11, r1
    1448:	f1 e2       	ldi	r31, 0x21	; 33
    144a:	af 16       	cp	r10, r31
    144c:	b1 04       	cpc	r11, r1
    144e:	08 f4       	brcc	.+2      	; 0x1452 <Scheduler_manageTasks+0x100>
    1450:	40 c0       	rjmp	.+128    	; 0x14d2 <Scheduler_manageTasks+0x180>
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	68 94       	set
    1456:	cc 24       	eor	r12, r12
    1458:	c5 f8       	bld	r12, 5
    145a:	d1 2c       	mov	r13, r1
			}
			data[j] = oNFC.productInfoData[index++];
		}
		if(count != BYTES_IN_PAGE){
			NFC_PageWrite(i,data);
			oNFC.schedulerNFCWriteWait = TRUE;
    145c:	0f 2e       	mov	r0, r31
    145e:	f1 e7       	ldi	r31, 0x71	; 113
    1460:	ef 2e       	mov	r14, r31
    1462:	fb e3       	ldi	r31, 0x3B	; 59
    1464:	ff 2e       	mov	r15, r31
    1466:	f0 2d       	mov	r31, r0
    1468:	99 24       	eor	r9, r9
    146a:	93 94       	inc	r9
	address = BLOCK_NVM_OFFSET;
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
		//read data
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
    146c:	ae 01       	movw	r20, r28
    146e:	4f 5f       	subi	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	c6 01       	movw	r24, r12
    1476:	0e 94 9f 08 	call	0x113e	; 0x113e <NFC_SequentialRead>
    147a:	fe 01       	movw	r30, r28
    147c:	31 96       	adiw	r30, 0x01	; 1
    147e:	04 e0       	ldi	r16, 0x04	; 4
    1480:	01 0f       	add	r16, r17
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	9f 01       	movw	r18, r30
		for(j = 0; j < BYTES_IN_PAGE; j++){
			//check data if it matches
			if(data[j] == oNFC.productInfoData[index]){
    1486:	a1 2f       	mov	r26, r17
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	af 58       	subi	r26, 0x8F	; 143
    148c:	b4 4c       	sbci	r27, 0xC4	; 196
    148e:	1b 96       	adiw	r26, 0x0b	; 11
    1490:	8c 91       	ld	r24, X
    1492:	90 81       	ld	r25, Z
    1494:	98 13       	cpse	r25, r24
    1496:	01 c0       	rjmp	.+2      	; 0x149a <Scheduler_manageTasks+0x148>
				count++;
    1498:	4f 5f       	subi	r20, 0xFF	; 255
			}
			data[j] = oNFC.productInfoData[index++];
    149a:	1f 5f       	subi	r17, 0xFF	; 255
    149c:	d9 01       	movw	r26, r18
    149e:	8c 93       	st	X, r24
    14a0:	31 96       	adiw	r30, 0x01	; 1
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
		//read data
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
    14a2:	10 13       	cpse	r17, r16
    14a4:	ef cf       	rjmp	.-34     	; 0x1484 <Scheduler_manageTasks+0x132>
			if(data[j] == oNFC.productInfoData[index]){
				count++;
			}
			data[j] = oNFC.productInfoData[index++];
		}
		if(count != BYTES_IN_PAGE){
    14a6:	44 30       	cpi	r20, 0x04	; 4
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <Scheduler_manageTasks+0x172>
			NFC_PageWrite(i,data);
    14aa:	be 01       	movw	r22, r28
    14ac:	6f 5f       	subi	r22, 0xFF	; 255
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	c6 01       	movw	r24, r12
    14b2:	0e 94 31 09 	call	0x1262	; 0x1262 <NFC_PageWrite>
			oNFC.schedulerNFCWriteWait = TRUE;
    14b6:	f7 01       	movw	r30, r14
    14b8:	96 82       	std	Z+6, r9	; 0x06
			//wait for 5ms before next read
			while(oNFC.schedulerNFCWriteWait == TRUE);
    14ba:	d7 01       	movw	r26, r14
    14bc:	16 96       	adiw	r26, 0x06	; 6
    14be:	8c 91       	ld	r24, X
    14c0:	81 11       	cpse	r24, r1
    14c2:	fb cf       	rjmp	.-10     	; 0x14ba <Scheduler_manageTasks+0x168>
		}
		j = 0;
		count = 0;
		i = i + BYTES_IN_PAGE;
    14c4:	b4 e0       	ldi	r27, 0x04	; 4
    14c6:	cb 0e       	add	r12, r27
    14c8:	d1 1c       	adc	r13, r1
		for(j = 0; j < BYTES_IN_PAGE; j++){
			//check data if it matches
			if(data[j] == oNFC.productInfoData[index]){
				count++;
			}
			data[j] = oNFC.productInfoData[index++];
    14ca:	10 2f       	mov	r17, r16
	uint8_t j = 0;
	uint8_t index;
	address = BLOCK_NVM_OFFSET;
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
    14cc:	ca 14       	cp	r12, r10
    14ce:	db 04       	cpc	r13, r11
    14d0:	68 f2       	brcs	.-102    	; 0x146c <Scheduler_manageTasks+0x11a>
				Scheduler_writeInstant();
				oNFC.instantWriteFLG = FALSE;
			}
			else if (oNFC.productInfoFLG == TRUE){//schedule to write productInfo block
				Scheduler_writeProductInfo();
				oNFC.productInfoFLG = FALSE;
    14d2:	10 92 75 3b 	sts	0x3B75, r1	; 0x803b75 <oNFC+0x4>
    14d6:	71 c0       	rjmp	.+226    	; 0x15ba <Scheduler_manageTasks+0x268>
			}
			else if(oNFC.storeBroadcastFLG == TRUE){//schedule to write block broadcast
    14d8:	80 91 76 3b 	lds	r24, 0x3B76	; 0x803b76 <oNFC+0x5>
    14dc:	88 23       	and	r24, r24
    14de:	09 f4       	brne	.+2      	; 0x14e2 <Scheduler_manageTasks+0x190>
    14e0:	6c c0       	rjmp	.+216    	; 0x15ba <Scheduler_manageTasks+0x268>
	uint8_t length = 0;
	uint8_t data[BYTES_IN_PAGE];
	uint8_t j = 0;
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getBroadcastBlkAddress(&oNFC);
    14e2:	81 e7       	ldi	r24, 0x71	; 113
    14e4:	9b e3       	ldi	r25, 0x3B	; 59
    14e6:	0e 94 0d 09 	call	0x121a	; 0x121a <NFC_getBroadcastBlkAddress>
    14ea:	6c 01       	movw	r12, r24
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
    14ec:	80 91 7e 3c 	lds	r24, 0x3C7E	; 0x803c7e <oNFC+0x10d>
    14f0:	56 01       	movw	r10, r12
    14f2:	a8 0e       	add	r10, r24
    14f4:	b1 1c       	adc	r11, r1
    14f6:	ca 14       	cp	r12, r10
    14f8:	db 04       	cpc	r13, r11
    14fa:	d8 f5       	brcc	.+118    	; 0x1572 <Scheduler_manageTasks+0x220>
    14fc:	10 e0       	ldi	r17, 0x00	; 0
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){//data is different so write the page
			NFC_PageWrite(i,data);
			oNFC.schedulerNFCWriteWait = TRUE;
    14fe:	0f 2e       	mov	r0, r31
    1500:	f1 e7       	ldi	r31, 0x71	; 113
    1502:	ef 2e       	mov	r14, r31
    1504:	fb e3       	ldi	r31, 0x3B	; 59
    1506:	ff 2e       	mov	r15, r31
    1508:	f0 2d       	mov	r31, r0
    150a:	99 24       	eor	r9, r9
    150c:	93 94       	inc	r9
	address = NFC_getBroadcastBlkAddress(&oNFC);
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
		//Read data before writing
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
    150e:	ae 01       	movw	r20, r28
    1510:	4f 5f       	subi	r20, 0xFF	; 255
    1512:	5f 4f       	sbci	r21, 0xFF	; 255
    1514:	64 e0       	ldi	r22, 0x04	; 4
    1516:	c6 01       	movw	r24, r12
    1518:	0e 94 9f 08 	call	0x113e	; 0x113e <NFC_SequentialRead>
    151c:	fe 01       	movw	r30, r28
    151e:	31 96       	adiw	r30, 0x01	; 1
    1520:	04 e0       	ldi	r16, 0x04	; 4
    1522:	01 0f       	add	r16, r17
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	9f 01       	movw	r18, r30
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.broadcast.nfcBuffer[index]){
    1528:	a1 2f       	mov	r26, r17
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	a1 58       	subi	r26, 0x81	; 129
    152e:	b3 4c       	sbci	r27, 0xC3	; 195
    1530:	8c 91       	ld	r24, X
    1532:	90 81       	ld	r25, Z
    1534:	98 13       	cpse	r25, r24
    1536:	01 c0       	rjmp	.+2      	; 0x153a <Scheduler_manageTasks+0x1e8>
				count++;
    1538:	4f 5f       	subi	r20, 0xFF	; 255
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
    153a:	1f 5f       	subi	r17, 0xFF	; 255
    153c:	d9 01       	movw	r26, r18
    153e:	8c 93       	st	X, r24
    1540:	31 96       	adiw	r30, 0x01	; 1
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
		//Read data before writing
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
    1542:	10 13       	cpse	r17, r16
    1544:	f0 cf       	rjmp	.-32     	; 0x1526 <Scheduler_manageTasks+0x1d4>
			if(data[j] == oNFC.broadcast.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){//data is different so write the page
    1546:	44 30       	cpi	r20, 0x04	; 4
    1548:	69 f0       	breq	.+26     	; 0x1564 <Scheduler_manageTasks+0x212>
			NFC_PageWrite(i,data);
    154a:	be 01       	movw	r22, r28
    154c:	6f 5f       	subi	r22, 0xFF	; 255
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	c6 01       	movw	r24, r12
    1552:	0e 94 31 09 	call	0x1262	; 0x1262 <NFC_PageWrite>
			oNFC.schedulerNFCWriteWait = TRUE;
    1556:	f7 01       	movw	r30, r14
    1558:	96 82       	std	Z+6, r9	; 0x06
			//wait for 5ms before next read
			while(oNFC.schedulerNFCWriteWait == TRUE);
    155a:	d7 01       	movw	r26, r14
    155c:	16 96       	adiw	r26, 0x06	; 6
    155e:	8c 91       	ld	r24, X
    1560:	81 11       	cpse	r24, r1
    1562:	fb cf       	rjmp	.-10     	; 0x155a <Scheduler_manageTasks+0x208>
		}
		j = 0;
		count = 0;
		i = i + BYTES_IN_PAGE;
    1564:	b4 e0       	ldi	r27, 0x04	; 4
    1566:	cb 0e       	add	r12, r27
    1568:	d1 1c       	adc	r13, r1
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.broadcast.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
    156a:	10 2f       	mov	r17, r16
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getBroadcastBlkAddress(&oNFC);
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
    156c:	ca 14       	cp	r12, r10
    156e:	db 04       	cpc	r13, r11
    1570:	70 f2       	brcs	.-100    	; 0x150e <Scheduler_manageTasks+0x1bc>
				Scheduler_writeProductInfo();
				oNFC.productInfoFLG = FALSE;
			}
			else if(oNFC.storeBroadcastFLG == TRUE){//schedule to write block broadcast
				Scheduler_writeBroadcast();
				if(oNFC.broadcast.blockNumber == BLOCK2 && oNFC.block2WriteFLG == TRUE){
    1572:	80 91 7c 3c 	lds	r24, 0x3C7C	; 0x803c7c <oNFC+0x10b>
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	39 f4       	brne	.+14     	; 0x1588 <Scheduler_manageTasks+0x236>
    157a:	80 91 71 3b 	lds	r24, 0x3B71	; 0x803b71 <oNFC>
    157e:	88 23       	and	r24, r24
    1580:	a9 f0       	breq	.+42     	; 0x15ac <Scheduler_manageTasks+0x25a>
					oNFC.block2WriteFLG = FALSE;//clear block2 broadcast flag
    1582:	10 92 71 3b 	sts	0x3B71, r1	; 0x803b71 <oNFC>
    1586:	17 c0       	rjmp	.+46     	; 0x15b6 <Scheduler_manageTasks+0x264>
				}
				else if(oNFC.broadcast.blockNumber == BLOCK11 && oNFC.block11WriteFLG == TRUE){
    1588:	8b 30       	cpi	r24, 0x0B	; 11
    158a:	39 f4       	brne	.+14     	; 0x159a <Scheduler_manageTasks+0x248>
    158c:	80 91 72 3b 	lds	r24, 0x3B72	; 0x803b72 <oNFC+0x1>
    1590:	88 23       	and	r24, r24
    1592:	61 f0       	breq	.+24     	; 0x15ac <Scheduler_manageTasks+0x25a>
					oNFC.block11WriteFLG = FALSE;//clear block11 broadcast flag
    1594:	10 92 72 3b 	sts	0x3B72, r1	; 0x803b72 <oNFC+0x1>
    1598:	0e c0       	rjmp	.+28     	; 0x15b6 <Scheduler_manageTasks+0x264>
				}
				else if(oNFC.broadcast.blockNumber == BLOCK226 && oNFC.block226WriteFLG == TRUE){
    159a:	82 3e       	cpi	r24, 0xE2	; 226
    159c:	39 f4       	brne	.+14     	; 0x15ac <Scheduler_manageTasks+0x25a>
    159e:	80 91 73 3b 	lds	r24, 0x3B73	; 0x803b73 <oNFC+0x2>
    15a2:	88 23       	and	r24, r24
    15a4:	19 f0       	breq	.+6      	; 0x15ac <Scheduler_manageTasks+0x25a>
					oNFC.block226WriteFLG = FALSE;//clear block226 broadcast flag
    15a6:	10 92 73 3b 	sts	0x3B73, r1	; 0x803b73 <oNFC+0x2>
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <Scheduler_manageTasks+0x264>
				}
				else{//clear flags
					oNFC.block2WriteFLG = FALSE;
    15ac:	e1 e7       	ldi	r30, 0x71	; 113
    15ae:	fb e3       	ldi	r31, 0x3B	; 59
    15b0:	10 82       	st	Z, r1
					oNFC.block11WriteFLG = FALSE;
    15b2:	11 82       	std	Z+1, r1	; 0x01
					oNFC.block226WriteFLG = FALSE;
    15b4:	12 82       	std	Z+2, r1	; 0x02
				}
				oNFC.storeBroadcastFLG = FALSE;
    15b6:	10 92 76 3b 	sts	0x3B76, r1	; 0x803b76 <oNFC+0x5>
			}
	}
} 
    15ba:	24 96       	adiw	r28, 0x04	; 4
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	08 95       	ret

000015d8 <__tablejump2__>:
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	05 90       	lpm	r0, Z+
    15de:	f4 91       	lpm	r31, Z
    15e0:	e0 2d       	mov	r30, r0
    15e2:	09 94       	ijmp

000015e4 <abort>:
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	f8 94       	cli
    15ea:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <_exit>

000015ee <vfprintf>:
    15ee:	ab e0       	ldi	r26, 0x0B	; 11
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ed ef       	ldi	r30, 0xFD	; 253
    15f4:	fa e0       	ldi	r31, 0x0A	; 10
    15f6:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__prologue_saves__>
    15fa:	6c 01       	movw	r12, r24
    15fc:	7b 01       	movw	r14, r22
    15fe:	8a 01       	movw	r16, r20
    1600:	fc 01       	movw	r30, r24
    1602:	16 82       	std	Z+6, r1	; 0x06
    1604:	17 82       	std	Z+7, r1	; 0x07
    1606:	83 81       	ldd	r24, Z+3	; 0x03
    1608:	81 ff       	sbrs	r24, 1
    160a:	cc c1       	rjmp	.+920    	; 0x19a4 <vfprintf+0x3b6>
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	3c 01       	movw	r6, r24
    1612:	f6 01       	movw	r30, r12
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	f7 01       	movw	r30, r14
    1618:	93 fd       	sbrc	r25, 3
    161a:	85 91       	lpm	r24, Z+
    161c:	93 ff       	sbrs	r25, 3
    161e:	81 91       	ld	r24, Z+
    1620:	7f 01       	movw	r14, r30
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <vfprintf+0x3a>
    1626:	ba c1       	rjmp	.+884    	; 0x199c <vfprintf+0x3ae>
    1628:	85 32       	cpi	r24, 0x25	; 37
    162a:	39 f4       	brne	.+14     	; 0x163a <vfprintf+0x4c>
    162c:	93 fd       	sbrc	r25, 3
    162e:	85 91       	lpm	r24, Z+
    1630:	93 ff       	sbrs	r25, 3
    1632:	81 91       	ld	r24, Z+
    1634:	7f 01       	movw	r14, r30
    1636:	85 32       	cpi	r24, 0x25	; 37
    1638:	29 f4       	brne	.+10     	; 0x1644 <vfprintf+0x56>
    163a:	b6 01       	movw	r22, r12
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    1642:	e7 cf       	rjmp	.-50     	; 0x1612 <vfprintf+0x24>
    1644:	91 2c       	mov	r9, r1
    1646:	21 2c       	mov	r2, r1
    1648:	31 2c       	mov	r3, r1
    164a:	ff e1       	ldi	r31, 0x1F	; 31
    164c:	f3 15       	cp	r31, r3
    164e:	d8 f0       	brcs	.+54     	; 0x1686 <vfprintf+0x98>
    1650:	8b 32       	cpi	r24, 0x2B	; 43
    1652:	79 f0       	breq	.+30     	; 0x1672 <vfprintf+0x84>
    1654:	38 f4       	brcc	.+14     	; 0x1664 <vfprintf+0x76>
    1656:	80 32       	cpi	r24, 0x20	; 32
    1658:	79 f0       	breq	.+30     	; 0x1678 <vfprintf+0x8a>
    165a:	83 32       	cpi	r24, 0x23	; 35
    165c:	a1 f4       	brne	.+40     	; 0x1686 <vfprintf+0x98>
    165e:	23 2d       	mov	r18, r3
    1660:	20 61       	ori	r18, 0x10	; 16
    1662:	1d c0       	rjmp	.+58     	; 0x169e <vfprintf+0xb0>
    1664:	8d 32       	cpi	r24, 0x2D	; 45
    1666:	61 f0       	breq	.+24     	; 0x1680 <vfprintf+0x92>
    1668:	80 33       	cpi	r24, 0x30	; 48
    166a:	69 f4       	brne	.+26     	; 0x1686 <vfprintf+0x98>
    166c:	23 2d       	mov	r18, r3
    166e:	21 60       	ori	r18, 0x01	; 1
    1670:	16 c0       	rjmp	.+44     	; 0x169e <vfprintf+0xb0>
    1672:	83 2d       	mov	r24, r3
    1674:	82 60       	ori	r24, 0x02	; 2
    1676:	38 2e       	mov	r3, r24
    1678:	e3 2d       	mov	r30, r3
    167a:	e4 60       	ori	r30, 0x04	; 4
    167c:	3e 2e       	mov	r3, r30
    167e:	2a c0       	rjmp	.+84     	; 0x16d4 <vfprintf+0xe6>
    1680:	f3 2d       	mov	r31, r3
    1682:	f8 60       	ori	r31, 0x08	; 8
    1684:	1d c0       	rjmp	.+58     	; 0x16c0 <vfprintf+0xd2>
    1686:	37 fc       	sbrc	r3, 7
    1688:	2d c0       	rjmp	.+90     	; 0x16e4 <vfprintf+0xf6>
    168a:	20 ed       	ldi	r18, 0xD0	; 208
    168c:	28 0f       	add	r18, r24
    168e:	2a 30       	cpi	r18, 0x0A	; 10
    1690:	40 f0       	brcs	.+16     	; 0x16a2 <vfprintf+0xb4>
    1692:	8e 32       	cpi	r24, 0x2E	; 46
    1694:	b9 f4       	brne	.+46     	; 0x16c4 <vfprintf+0xd6>
    1696:	36 fc       	sbrc	r3, 6
    1698:	81 c1       	rjmp	.+770    	; 0x199c <vfprintf+0x3ae>
    169a:	23 2d       	mov	r18, r3
    169c:	20 64       	ori	r18, 0x40	; 64
    169e:	32 2e       	mov	r3, r18
    16a0:	19 c0       	rjmp	.+50     	; 0x16d4 <vfprintf+0xe6>
    16a2:	36 fe       	sbrs	r3, 6
    16a4:	06 c0       	rjmp	.+12     	; 0x16b2 <vfprintf+0xc4>
    16a6:	8a e0       	ldi	r24, 0x0A	; 10
    16a8:	98 9e       	mul	r9, r24
    16aa:	20 0d       	add	r18, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	92 2e       	mov	r9, r18
    16b0:	11 c0       	rjmp	.+34     	; 0x16d4 <vfprintf+0xe6>
    16b2:	ea e0       	ldi	r30, 0x0A	; 10
    16b4:	2e 9e       	mul	r2, r30
    16b6:	20 0d       	add	r18, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	22 2e       	mov	r2, r18
    16bc:	f3 2d       	mov	r31, r3
    16be:	f0 62       	ori	r31, 0x20	; 32
    16c0:	3f 2e       	mov	r3, r31
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <vfprintf+0xe6>
    16c4:	8c 36       	cpi	r24, 0x6C	; 108
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <vfprintf+0xe2>
    16c8:	83 2d       	mov	r24, r3
    16ca:	80 68       	ori	r24, 0x80	; 128
    16cc:	38 2e       	mov	r3, r24
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <vfprintf+0xe6>
    16d0:	88 36       	cpi	r24, 0x68	; 104
    16d2:	41 f4       	brne	.+16     	; 0x16e4 <vfprintf+0xf6>
    16d4:	f7 01       	movw	r30, r14
    16d6:	93 fd       	sbrc	r25, 3
    16d8:	85 91       	lpm	r24, Z+
    16da:	93 ff       	sbrs	r25, 3
    16dc:	81 91       	ld	r24, Z+
    16de:	7f 01       	movw	r14, r30
    16e0:	81 11       	cpse	r24, r1
    16e2:	b3 cf       	rjmp	.-154    	; 0x164a <vfprintf+0x5c>
    16e4:	98 2f       	mov	r25, r24
    16e6:	9f 7d       	andi	r25, 0xDF	; 223
    16e8:	95 54       	subi	r25, 0x45	; 69
    16ea:	93 30       	cpi	r25, 0x03	; 3
    16ec:	28 f4       	brcc	.+10     	; 0x16f8 <vfprintf+0x10a>
    16ee:	0c 5f       	subi	r16, 0xFC	; 252
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	9f e3       	ldi	r25, 0x3F	; 63
    16f4:	99 83       	std	Y+1, r25	; 0x01
    16f6:	0d c0       	rjmp	.+26     	; 0x1712 <vfprintf+0x124>
    16f8:	83 36       	cpi	r24, 0x63	; 99
    16fa:	31 f0       	breq	.+12     	; 0x1708 <vfprintf+0x11a>
    16fc:	83 37       	cpi	r24, 0x73	; 115
    16fe:	71 f0       	breq	.+28     	; 0x171c <vfprintf+0x12e>
    1700:	83 35       	cpi	r24, 0x53	; 83
    1702:	09 f0       	breq	.+2      	; 0x1706 <vfprintf+0x118>
    1704:	59 c0       	rjmp	.+178    	; 0x17b8 <vfprintf+0x1ca>
    1706:	21 c0       	rjmp	.+66     	; 0x174a <vfprintf+0x15c>
    1708:	f8 01       	movw	r30, r16
    170a:	80 81       	ld	r24, Z
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	0e 5f       	subi	r16, 0xFE	; 254
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	88 24       	eor	r8, r8
    1714:	83 94       	inc	r8
    1716:	91 2c       	mov	r9, r1
    1718:	53 01       	movw	r10, r6
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <vfprintf+0x154>
    171c:	28 01       	movw	r4, r16
    171e:	f2 e0       	ldi	r31, 0x02	; 2
    1720:	4f 0e       	add	r4, r31
    1722:	51 1c       	adc	r5, r1
    1724:	f8 01       	movw	r30, r16
    1726:	a0 80       	ld	r10, Z
    1728:	b1 80       	ldd	r11, Z+1	; 0x01
    172a:	36 fe       	sbrs	r3, 6
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <vfprintf+0x146>
    172e:	69 2d       	mov	r22, r9
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x14a>
    1734:	6f ef       	ldi	r22, 0xFF	; 255
    1736:	7f ef       	ldi	r23, 0xFF	; 255
    1738:	c5 01       	movw	r24, r10
    173a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <strnlen>
    173e:	4c 01       	movw	r8, r24
    1740:	82 01       	movw	r16, r4
    1742:	f3 2d       	mov	r31, r3
    1744:	ff 77       	andi	r31, 0x7F	; 127
    1746:	3f 2e       	mov	r3, r31
    1748:	16 c0       	rjmp	.+44     	; 0x1776 <vfprintf+0x188>
    174a:	28 01       	movw	r4, r16
    174c:	22 e0       	ldi	r18, 0x02	; 2
    174e:	42 0e       	add	r4, r18
    1750:	51 1c       	adc	r5, r1
    1752:	f8 01       	movw	r30, r16
    1754:	a0 80       	ld	r10, Z
    1756:	b1 80       	ldd	r11, Z+1	; 0x01
    1758:	36 fe       	sbrs	r3, 6
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <vfprintf+0x174>
    175c:	69 2d       	mov	r22, r9
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x178>
    1762:	6f ef       	ldi	r22, 0xFF	; 255
    1764:	7f ef       	ldi	r23, 0xFF	; 255
    1766:	c5 01       	movw	r24, r10
    1768:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <strnlen_P>
    176c:	4c 01       	movw	r8, r24
    176e:	f3 2d       	mov	r31, r3
    1770:	f0 68       	ori	r31, 0x80	; 128
    1772:	3f 2e       	mov	r3, r31
    1774:	82 01       	movw	r16, r4
    1776:	33 fc       	sbrc	r3, 3
    1778:	1b c0       	rjmp	.+54     	; 0x17b0 <vfprintf+0x1c2>
    177a:	82 2d       	mov	r24, r2
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	88 16       	cp	r8, r24
    1780:	99 06       	cpc	r9, r25
    1782:	b0 f4       	brcc	.+44     	; 0x17b0 <vfprintf+0x1c2>
    1784:	b6 01       	movw	r22, r12
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    178e:	2a 94       	dec	r2
    1790:	f4 cf       	rjmp	.-24     	; 0x177a <vfprintf+0x18c>
    1792:	f5 01       	movw	r30, r10
    1794:	37 fc       	sbrc	r3, 7
    1796:	85 91       	lpm	r24, Z+
    1798:	37 fe       	sbrs	r3, 7
    179a:	81 91       	ld	r24, Z+
    179c:	5f 01       	movw	r10, r30
    179e:	b6 01       	movw	r22, r12
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    17a6:	21 10       	cpse	r2, r1
    17a8:	2a 94       	dec	r2
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	82 1a       	sub	r8, r18
    17ae:	91 08       	sbc	r9, r1
    17b0:	81 14       	cp	r8, r1
    17b2:	91 04       	cpc	r9, r1
    17b4:	71 f7       	brne	.-36     	; 0x1792 <vfprintf+0x1a4>
    17b6:	e8 c0       	rjmp	.+464    	; 0x1988 <vfprintf+0x39a>
    17b8:	84 36       	cpi	r24, 0x64	; 100
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <vfprintf+0x1d2>
    17bc:	89 36       	cpi	r24, 0x69	; 105
    17be:	41 f5       	brne	.+80     	; 0x1810 <vfprintf+0x222>
    17c0:	f8 01       	movw	r30, r16
    17c2:	37 fe       	sbrs	r3, 7
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <vfprintf+0x1e6>
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	0c 5f       	subi	r16, 0xFC	; 252
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <vfprintf+0x1f6>
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	07 2e       	mov	r0, r23
    17da:	00 0c       	add	r0, r0
    17dc:	88 0b       	sbc	r24, r24
    17de:	99 0b       	sbc	r25, r25
    17e0:	0e 5f       	subi	r16, 0xFE	; 254
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	f3 2d       	mov	r31, r3
    17e6:	ff 76       	andi	r31, 0x6F	; 111
    17e8:	3f 2e       	mov	r3, r31
    17ea:	97 ff       	sbrs	r25, 7
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <vfprintf+0x212>
    17ee:	90 95       	com	r25
    17f0:	80 95       	com	r24
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	f0 68       	ori	r31, 0x80	; 128
    17fe:	3f 2e       	mov	r3, r31
    1800:	2a e0       	ldi	r18, 0x0A	; 10
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	a3 01       	movw	r20, r6
    1806:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__ultoa_invert>
    180a:	88 2e       	mov	r8, r24
    180c:	86 18       	sub	r8, r6
    180e:	45 c0       	rjmp	.+138    	; 0x189a <vfprintf+0x2ac>
    1810:	85 37       	cpi	r24, 0x75	; 117
    1812:	31 f4       	brne	.+12     	; 0x1820 <vfprintf+0x232>
    1814:	23 2d       	mov	r18, r3
    1816:	2f 7e       	andi	r18, 0xEF	; 239
    1818:	b2 2e       	mov	r11, r18
    181a:	2a e0       	ldi	r18, 0x0A	; 10
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	25 c0       	rjmp	.+74     	; 0x186a <vfprintf+0x27c>
    1820:	93 2d       	mov	r25, r3
    1822:	99 7f       	andi	r25, 0xF9	; 249
    1824:	b9 2e       	mov	r11, r25
    1826:	8f 36       	cpi	r24, 0x6F	; 111
    1828:	c1 f0       	breq	.+48     	; 0x185a <vfprintf+0x26c>
    182a:	18 f4       	brcc	.+6      	; 0x1832 <vfprintf+0x244>
    182c:	88 35       	cpi	r24, 0x58	; 88
    182e:	79 f0       	breq	.+30     	; 0x184e <vfprintf+0x260>
    1830:	b5 c0       	rjmp	.+362    	; 0x199c <vfprintf+0x3ae>
    1832:	80 37       	cpi	r24, 0x70	; 112
    1834:	19 f0       	breq	.+6      	; 0x183c <vfprintf+0x24e>
    1836:	88 37       	cpi	r24, 0x78	; 120
    1838:	21 f0       	breq	.+8      	; 0x1842 <vfprintf+0x254>
    183a:	b0 c0       	rjmp	.+352    	; 0x199c <vfprintf+0x3ae>
    183c:	e9 2f       	mov	r30, r25
    183e:	e0 61       	ori	r30, 0x10	; 16
    1840:	be 2e       	mov	r11, r30
    1842:	b4 fe       	sbrs	r11, 4
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <vfprintf+0x272>
    1846:	fb 2d       	mov	r31, r11
    1848:	f4 60       	ori	r31, 0x04	; 4
    184a:	bf 2e       	mov	r11, r31
    184c:	09 c0       	rjmp	.+18     	; 0x1860 <vfprintf+0x272>
    184e:	34 fe       	sbrs	r3, 4
    1850:	0a c0       	rjmp	.+20     	; 0x1866 <vfprintf+0x278>
    1852:	29 2f       	mov	r18, r25
    1854:	26 60       	ori	r18, 0x06	; 6
    1856:	b2 2e       	mov	r11, r18
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <vfprintf+0x278>
    185a:	28 e0       	ldi	r18, 0x08	; 8
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	05 c0       	rjmp	.+10     	; 0x186a <vfprintf+0x27c>
    1860:	20 e1       	ldi	r18, 0x10	; 16
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <vfprintf+0x27c>
    1866:	20 e1       	ldi	r18, 0x10	; 16
    1868:	32 e0       	ldi	r19, 0x02	; 2
    186a:	f8 01       	movw	r30, r16
    186c:	b7 fe       	sbrs	r11, 7
    186e:	07 c0       	rjmp	.+14     	; 0x187e <vfprintf+0x290>
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	0c 5f       	subi	r16, 0xFC	; 252
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	06 c0       	rjmp	.+12     	; 0x188a <vfprintf+0x29c>
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 5f       	subi	r16, 0xFE	; 254
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	a3 01       	movw	r20, r6
    188c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__ultoa_invert>
    1890:	88 2e       	mov	r8, r24
    1892:	86 18       	sub	r8, r6
    1894:	fb 2d       	mov	r31, r11
    1896:	ff 77       	andi	r31, 0x7F	; 127
    1898:	3f 2e       	mov	r3, r31
    189a:	36 fe       	sbrs	r3, 6
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <vfprintf+0x2ca>
    189e:	23 2d       	mov	r18, r3
    18a0:	2e 7f       	andi	r18, 0xFE	; 254
    18a2:	a2 2e       	mov	r10, r18
    18a4:	89 14       	cp	r8, r9
    18a6:	58 f4       	brcc	.+22     	; 0x18be <vfprintf+0x2d0>
    18a8:	34 fe       	sbrs	r3, 4
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <vfprintf+0x2d4>
    18ac:	32 fc       	sbrc	r3, 2
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x2d4>
    18b0:	83 2d       	mov	r24, r3
    18b2:	8e 7e       	andi	r24, 0xEE	; 238
    18b4:	a8 2e       	mov	r10, r24
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <vfprintf+0x2d4>
    18b8:	b8 2c       	mov	r11, r8
    18ba:	a3 2c       	mov	r10, r3
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <vfprintf+0x2d6>
    18be:	b8 2c       	mov	r11, r8
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <vfprintf+0x2d6>
    18c2:	b9 2c       	mov	r11, r9
    18c4:	a4 fe       	sbrs	r10, 4
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <vfprintf+0x2f8>
    18c8:	fe 01       	movw	r30, r28
    18ca:	e8 0d       	add	r30, r8
    18cc:	f1 1d       	adc	r31, r1
    18ce:	80 81       	ld	r24, Z
    18d0:	80 33       	cpi	r24, 0x30	; 48
    18d2:	21 f4       	brne	.+8      	; 0x18dc <vfprintf+0x2ee>
    18d4:	9a 2d       	mov	r25, r10
    18d6:	99 7e       	andi	r25, 0xE9	; 233
    18d8:	a9 2e       	mov	r10, r25
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <vfprintf+0x300>
    18dc:	a2 fe       	sbrs	r10, 2
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x2fe>
    18e0:	b3 94       	inc	r11
    18e2:	b3 94       	inc	r11
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <vfprintf+0x300>
    18e6:	8a 2d       	mov	r24, r10
    18e8:	86 78       	andi	r24, 0x86	; 134
    18ea:	09 f0       	breq	.+2      	; 0x18ee <vfprintf+0x300>
    18ec:	b3 94       	inc	r11
    18ee:	a3 fc       	sbrc	r10, 3
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <vfprintf+0x326>
    18f2:	a0 fe       	sbrs	r10, 0
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x314>
    18f6:	b2 14       	cp	r11, r2
    18f8:	88 f4       	brcc	.+34     	; 0x191c <vfprintf+0x32e>
    18fa:	28 0c       	add	r2, r8
    18fc:	92 2c       	mov	r9, r2
    18fe:	9b 18       	sub	r9, r11
    1900:	0e c0       	rjmp	.+28     	; 0x191e <vfprintf+0x330>
    1902:	b2 14       	cp	r11, r2
    1904:	60 f4       	brcc	.+24     	; 0x191e <vfprintf+0x330>
    1906:	b6 01       	movw	r22, r12
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    1910:	b3 94       	inc	r11
    1912:	f7 cf       	rjmp	.-18     	; 0x1902 <vfprintf+0x314>
    1914:	b2 14       	cp	r11, r2
    1916:	18 f4       	brcc	.+6      	; 0x191e <vfprintf+0x330>
    1918:	2b 18       	sub	r2, r11
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <vfprintf+0x332>
    191c:	98 2c       	mov	r9, r8
    191e:	21 2c       	mov	r2, r1
    1920:	a4 fe       	sbrs	r10, 4
    1922:	10 c0       	rjmp	.+32     	; 0x1944 <vfprintf+0x356>
    1924:	b6 01       	movw	r22, r12
    1926:	80 e3       	ldi	r24, 0x30	; 48
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    192e:	a2 fe       	sbrs	r10, 2
    1930:	17 c0       	rjmp	.+46     	; 0x1960 <vfprintf+0x372>
    1932:	a1 fc       	sbrc	r10, 1
    1934:	03 c0       	rjmp	.+6      	; 0x193c <vfprintf+0x34e>
    1936:	88 e7       	ldi	r24, 0x78	; 120
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x352>
    193c:	88 e5       	ldi	r24, 0x58	; 88
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b6 01       	movw	r22, r12
    1942:	0c c0       	rjmp	.+24     	; 0x195c <vfprintf+0x36e>
    1944:	8a 2d       	mov	r24, r10
    1946:	86 78       	andi	r24, 0x86	; 134
    1948:	59 f0       	breq	.+22     	; 0x1960 <vfprintf+0x372>
    194a:	a1 fe       	sbrs	r10, 1
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <vfprintf+0x364>
    194e:	8b e2       	ldi	r24, 0x2B	; 43
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <vfprintf+0x366>
    1952:	80 e2       	ldi	r24, 0x20	; 32
    1954:	a7 fc       	sbrc	r10, 7
    1956:	8d e2       	ldi	r24, 0x2D	; 45
    1958:	b6 01       	movw	r22, r12
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    1960:	89 14       	cp	r8, r9
    1962:	38 f4       	brcc	.+14     	; 0x1972 <vfprintf+0x384>
    1964:	b6 01       	movw	r22, r12
    1966:	80 e3       	ldi	r24, 0x30	; 48
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    196e:	9a 94       	dec	r9
    1970:	f7 cf       	rjmp	.-18     	; 0x1960 <vfprintf+0x372>
    1972:	8a 94       	dec	r8
    1974:	f3 01       	movw	r30, r6
    1976:	e8 0d       	add	r30, r8
    1978:	f1 1d       	adc	r31, r1
    197a:	80 81       	ld	r24, Z
    197c:	b6 01       	movw	r22, r12
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    1984:	81 10       	cpse	r8, r1
    1986:	f5 cf       	rjmp	.-22     	; 0x1972 <vfprintf+0x384>
    1988:	22 20       	and	r2, r2
    198a:	09 f4       	brne	.+2      	; 0x198e <vfprintf+0x3a0>
    198c:	42 ce       	rjmp	.-892    	; 0x1612 <vfprintf+0x24>
    198e:	b6 01       	movw	r22, r12
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <fputc>
    1998:	2a 94       	dec	r2
    199a:	f6 cf       	rjmp	.-20     	; 0x1988 <vfprintf+0x39a>
    199c:	f6 01       	movw	r30, r12
    199e:	86 81       	ldd	r24, Z+6	; 0x06
    19a0:	97 81       	ldd	r25, Z+7	; 0x07
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <vfprintf+0x3ba>
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	9f ef       	ldi	r25, 0xFF	; 255
    19a8:	2b 96       	adiw	r28, 0x0b	; 11
    19aa:	e2 e1       	ldi	r30, 0x12	; 18
    19ac:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__epilogue_restores__>

000019b0 <strnlen_P>:
    19b0:	fc 01       	movw	r30, r24
    19b2:	05 90       	lpm	r0, Z+
    19b4:	61 50       	subi	r22, 0x01	; 1
    19b6:	70 40       	sbci	r23, 0x00	; 0
    19b8:	01 10       	cpse	r0, r1
    19ba:	d8 f7       	brcc	.-10     	; 0x19b2 <strnlen_P+0x2>
    19bc:	80 95       	com	r24
    19be:	90 95       	com	r25
    19c0:	8e 0f       	add	r24, r30
    19c2:	9f 1f       	adc	r25, r31
    19c4:	08 95       	ret

000019c6 <strnlen>:
    19c6:	fc 01       	movw	r30, r24
    19c8:	61 50       	subi	r22, 0x01	; 1
    19ca:	70 40       	sbci	r23, 0x00	; 0
    19cc:	01 90       	ld	r0, Z+
    19ce:	01 10       	cpse	r0, r1
    19d0:	d8 f7       	brcc	.-10     	; 0x19c8 <strnlen+0x2>
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	8e 0f       	add	r24, r30
    19d8:	9f 1f       	adc	r25, r31
    19da:	08 95       	ret

000019dc <fputc>:
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	fb 01       	movw	r30, r22
    19e6:	23 81       	ldd	r18, Z+3	; 0x03
    19e8:	21 fd       	sbrc	r18, 1
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <fputc+0x16>
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	9f ef       	ldi	r25, 0xFF	; 255
    19f0:	2c c0       	rjmp	.+88     	; 0x1a4a <fputc+0x6e>
    19f2:	22 ff       	sbrs	r18, 2
    19f4:	16 c0       	rjmp	.+44     	; 0x1a22 <fputc+0x46>
    19f6:	46 81       	ldd	r20, Z+6	; 0x06
    19f8:	57 81       	ldd	r21, Z+7	; 0x07
    19fa:	24 81       	ldd	r18, Z+4	; 0x04
    19fc:	35 81       	ldd	r19, Z+5	; 0x05
    19fe:	42 17       	cp	r20, r18
    1a00:	53 07       	cpc	r21, r19
    1a02:	44 f4       	brge	.+16     	; 0x1a14 <fputc+0x38>
    1a04:	a0 81       	ld	r26, Z
    1a06:	b1 81       	ldd	r27, Z+1	; 0x01
    1a08:	9d 01       	movw	r18, r26
    1a0a:	2f 5f       	subi	r18, 0xFF	; 255
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	20 83       	st	Z, r18
    1a10:	31 83       	std	Z+1, r19	; 0x01
    1a12:	8c 93       	st	X, r24
    1a14:	26 81       	ldd	r18, Z+6	; 0x06
    1a16:	37 81       	ldd	r19, Z+7	; 0x07
    1a18:	2f 5f       	subi	r18, 0xFF	; 255
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	26 83       	std	Z+6, r18	; 0x06
    1a1e:	37 83       	std	Z+7, r19	; 0x07
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <fputc+0x6e>
    1a22:	8b 01       	movw	r16, r22
    1a24:	ec 01       	movw	r28, r24
    1a26:	fb 01       	movw	r30, r22
    1a28:	00 84       	ldd	r0, Z+8	; 0x08
    1a2a:	f1 85       	ldd	r31, Z+9	; 0x09
    1a2c:	e0 2d       	mov	r30, r0
    1a2e:	09 95       	icall
    1a30:	89 2b       	or	r24, r25
    1a32:	e1 f6       	brne	.-72     	; 0x19ec <fputc+0x10>
    1a34:	d8 01       	movw	r26, r16
    1a36:	16 96       	adiw	r26, 0x06	; 6
    1a38:	8d 91       	ld	r24, X+
    1a3a:	9c 91       	ld	r25, X
    1a3c:	17 97       	sbiw	r26, 0x07	; 7
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	16 96       	adiw	r26, 0x06	; 6
    1a42:	8d 93       	st	X+, r24
    1a44:	9c 93       	st	X, r25
    1a46:	17 97       	sbiw	r26, 0x07	; 7
    1a48:	ce 01       	movw	r24, r28
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <__ultoa_invert>:
    1a54:	fa 01       	movw	r30, r20
    1a56:	aa 27       	eor	r26, r26
    1a58:	28 30       	cpi	r18, 0x08	; 8
    1a5a:	51 f1       	breq	.+84     	; 0x1ab0 <__ultoa_invert+0x5c>
    1a5c:	20 31       	cpi	r18, 0x10	; 16
    1a5e:	81 f1       	breq	.+96     	; 0x1ac0 <__ultoa_invert+0x6c>
    1a60:	e8 94       	clt
    1a62:	6f 93       	push	r22
    1a64:	6e 7f       	andi	r22, 0xFE	; 254
    1a66:	6e 5f       	subi	r22, 0xFE	; 254
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	af 4f       	sbci	r26, 0xFF	; 255
    1a70:	b1 e0       	ldi	r27, 0x01	; 1
    1a72:	3e d0       	rcall	.+124    	; 0x1af0 <__ultoa_invert+0x9c>
    1a74:	b4 e0       	ldi	r27, 0x04	; 4
    1a76:	3c d0       	rcall	.+120    	; 0x1af0 <__ultoa_invert+0x9c>
    1a78:	67 0f       	add	r22, r23
    1a7a:	78 1f       	adc	r23, r24
    1a7c:	89 1f       	adc	r24, r25
    1a7e:	9a 1f       	adc	r25, r26
    1a80:	a1 1d       	adc	r26, r1
    1a82:	68 0f       	add	r22, r24
    1a84:	79 1f       	adc	r23, r25
    1a86:	8a 1f       	adc	r24, r26
    1a88:	91 1d       	adc	r25, r1
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	6a 0f       	add	r22, r26
    1a8e:	71 1d       	adc	r23, r1
    1a90:	81 1d       	adc	r24, r1
    1a92:	91 1d       	adc	r25, r1
    1a94:	a1 1d       	adc	r26, r1
    1a96:	20 d0       	rcall	.+64     	; 0x1ad8 <__ultoa_invert+0x84>
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <__ultoa_invert+0x48>
    1a9a:	68 94       	set
    1a9c:	3f 91       	pop	r19
    1a9e:	2a e0       	ldi	r18, 0x0A	; 10
    1aa0:	26 9f       	mul	r18, r22
    1aa2:	11 24       	eor	r1, r1
    1aa4:	30 19       	sub	r19, r0
    1aa6:	30 5d       	subi	r19, 0xD0	; 208
    1aa8:	31 93       	st	Z+, r19
    1aaa:	de f6       	brtc	.-74     	; 0x1a62 <__ultoa_invert+0xe>
    1aac:	cf 01       	movw	r24, r30
    1aae:	08 95       	ret
    1ab0:	46 2f       	mov	r20, r22
    1ab2:	47 70       	andi	r20, 0x07	; 7
    1ab4:	40 5d       	subi	r20, 0xD0	; 208
    1ab6:	41 93       	st	Z+, r20
    1ab8:	b3 e0       	ldi	r27, 0x03	; 3
    1aba:	0f d0       	rcall	.+30     	; 0x1ada <__ultoa_invert+0x86>
    1abc:	c9 f7       	brne	.-14     	; 0x1ab0 <__ultoa_invert+0x5c>
    1abe:	f6 cf       	rjmp	.-20     	; 0x1aac <__ultoa_invert+0x58>
    1ac0:	46 2f       	mov	r20, r22
    1ac2:	4f 70       	andi	r20, 0x0F	; 15
    1ac4:	40 5d       	subi	r20, 0xD0	; 208
    1ac6:	4a 33       	cpi	r20, 0x3A	; 58
    1ac8:	18 f0       	brcs	.+6      	; 0x1ad0 <__ultoa_invert+0x7c>
    1aca:	49 5d       	subi	r20, 0xD9	; 217
    1acc:	31 fd       	sbrc	r19, 1
    1ace:	40 52       	subi	r20, 0x20	; 32
    1ad0:	41 93       	st	Z+, r20
    1ad2:	02 d0       	rcall	.+4      	; 0x1ad8 <__ultoa_invert+0x84>
    1ad4:	a9 f7       	brne	.-22     	; 0x1ac0 <__ultoa_invert+0x6c>
    1ad6:	ea cf       	rjmp	.-44     	; 0x1aac <__ultoa_invert+0x58>
    1ad8:	b4 e0       	ldi	r27, 0x04	; 4
    1ada:	a6 95       	lsr	r26
    1adc:	97 95       	ror	r25
    1ade:	87 95       	ror	r24
    1ae0:	77 95       	ror	r23
    1ae2:	67 95       	ror	r22
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__ultoa_invert+0x86>
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	61 05       	cpc	r22, r1
    1aec:	71 05       	cpc	r23, r1
    1aee:	08 95       	ret
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	0a 2e       	mov	r0, r26
    1af6:	06 94       	lsr	r0
    1af8:	57 95       	ror	r21
    1afa:	47 95       	ror	r20
    1afc:	37 95       	ror	r19
    1afe:	27 95       	ror	r18
    1b00:	ba 95       	dec	r27
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__ultoa_invert+0xa2>
    1b04:	62 0f       	add	r22, r18
    1b06:	73 1f       	adc	r23, r19
    1b08:	84 1f       	adc	r24, r20
    1b0a:	95 1f       	adc	r25, r21
    1b0c:	a0 1d       	adc	r26, r0
    1b0e:	08 95       	ret

00001b10 <__prologue_saves__>:
    1b10:	2f 92       	push	r2
    1b12:	3f 92       	push	r3
    1b14:	4f 92       	push	r4
    1b16:	5f 92       	push	r5
    1b18:	6f 92       	push	r6
    1b1a:	7f 92       	push	r7
    1b1c:	8f 92       	push	r8
    1b1e:	9f 92       	push	r9
    1b20:	af 92       	push	r10
    1b22:	bf 92       	push	r11
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	ca 1b       	sub	r28, r26
    1b3a:	db 0b       	sbc	r29, r27
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	09 94       	ijmp

00001b42 <__epilogue_restores__>:
    1b42:	2a 88       	ldd	r2, Y+18	; 0x12
    1b44:	39 88       	ldd	r3, Y+17	; 0x11
    1b46:	48 88       	ldd	r4, Y+16	; 0x10
    1b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b54:	b9 84       	ldd	r11, Y+9	; 0x09
    1b56:	c8 84       	ldd	r12, Y+8	; 0x08
    1b58:	df 80       	ldd	r13, Y+7	; 0x07
    1b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b60:	1b 81       	ldd	r17, Y+3	; 0x03
    1b62:	aa 81       	ldd	r26, Y+2	; 0x02
    1b64:	b9 81       	ldd	r27, Y+1	; 0x01
    1b66:	ce 0f       	add	r28, r30
    1b68:	d1 1d       	adc	r29, r1
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	ed 01       	movw	r28, r26
    1b70:	08 95       	ret

00001b72 <_exit>:
    1b72:	f8 94       	cli

00001b74 <__stop_program>:
    1b74:	ff cf       	rjmp	.-2      	; 0x1b74 <__stop_program>

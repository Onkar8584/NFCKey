
NFC-MODBUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00803800  000019bc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000520  00803966  00803966  00001bb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008491  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000313f  00000000  00000000  0000a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026e4  00000000  00000000  0000d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000748  00000000  00000000  0000fcc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d98  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000233d  00000000  00000000  000131a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  000154e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_8>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_27>
      70:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_28>
      74:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_29>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	98 01       	movw	r18, r16
      7e:	d8 03       	fmulsu	r21, r16
      80:	d8 03       	fmulsu	r21, r16
      82:	36 02       	muls	r19, r22
      84:	d8 03       	fmulsu	r21, r16
      86:	d8 03       	fmulsu	r21, r16
      88:	d8 03       	fmulsu	r21, r16
      8a:	d8 03       	fmulsu	r21, r16
      8c:	d8 03       	fmulsu	r21, r16
      8e:	d8 03       	fmulsu	r21, r16
      90:	d8 03       	fmulsu	r21, r16
      92:	d8 03       	fmulsu	r21, r16
      94:	d8 03       	fmulsu	r21, r16
      96:	6e 02       	muls	r22, r30
      98:	d8 03       	fmulsu	r21, r16
      9a:	d8 03       	fmulsu	r21, r16
      9c:	d8 03       	fmulsu	r21, r16
      9e:	d8 03       	fmulsu	r21, r16
      a0:	d8 03       	fmulsu	r21, r16
      a2:	d8 03       	fmulsu	r21, r16
      a4:	d8 03       	fmulsu	r21, r16
      a6:	d8 03       	fmulsu	r21, r16
      a8:	d8 03       	fmulsu	r21, r16
      aa:	d8 03       	fmulsu	r21, r16
      ac:	d8 03       	fmulsu	r21, r16
      ae:	d8 03       	fmulsu	r21, r16
      b0:	d8 03       	fmulsu	r21, r16
      b2:	d8 03       	fmulsu	r21, r16
      b4:	d8 03       	fmulsu	r21, r16
      b6:	d8 03       	fmulsu	r21, r16
      b8:	d8 03       	fmulsu	r21, r16
      ba:	d8 03       	fmulsu	r21, r16
      bc:	d8 03       	fmulsu	r21, r16
      be:	d8 03       	fmulsu	r21, r16
      c0:	d8 03       	fmulsu	r21, r16
      c2:	d8 03       	fmulsu	r21, r16
      c4:	d8 03       	fmulsu	r21, r16
      c6:	d8 03       	fmulsu	r21, r16
      c8:	d8 03       	fmulsu	r21, r16
      ca:	d8 03       	fmulsu	r21, r16
      cc:	d8 03       	fmulsu	r21, r16
      ce:	d8 03       	fmulsu	r21, r16
      d0:	d8 03       	fmulsu	r21, r16
      d2:	d8 03       	fmulsu	r21, r16
      d4:	d8 03       	fmulsu	r21, r16
      d6:	d8 03       	fmulsu	r21, r16
      d8:	d8 03       	fmulsu	r21, r16
      da:	d8 03       	fmulsu	r21, r16
      dc:	d8 03       	fmulsu	r21, r16
      de:	d8 03       	fmulsu	r21, r16
      e0:	d8 03       	fmulsu	r21, r16
      e2:	d8 03       	fmulsu	r21, r16
      e4:	d8 03       	fmulsu	r21, r16
      e6:	d8 03       	fmulsu	r21, r16
      e8:	d8 03       	fmulsu	r21, r16
      ea:	d8 03       	fmulsu	r21, r16
      ec:	d8 03       	fmulsu	r21, r16
      ee:	d8 03       	fmulsu	r21, r16
      f0:	d8 03       	fmulsu	r21, r16
      f2:	d8 03       	fmulsu	r21, r16
      f4:	d8 03       	fmulsu	r21, r16
      f6:	d8 03       	fmulsu	r21, r16
      f8:	c3 02       	muls	r28, r19
      fa:	d8 03       	fmulsu	r21, r16
      fc:	ea 01       	movw	r28, r20
      fe:	d8 03       	fmulsu	r21, r16
     100:	38 03       	fmul	r19, r16
     102:	84 03       	fmuls	r16, r20
     104:	eb 06       	cpc	r14, r27
     106:	23 07       	cpc	r18, r19
     108:	23 07       	cpc	r18, r19
     10a:	f3 06       	cpc	r15, r19
     10c:	23 07       	cpc	r18, r19
     10e:	23 07       	cpc	r18, r19
     110:	23 07       	cpc	r18, r19
     112:	23 07       	cpc	r18, r19
     114:	23 07       	cpc	r18, r19
     116:	23 07       	cpc	r18, r19
     118:	23 07       	cpc	r18, r19
     11a:	23 07       	cpc	r18, r19
     11c:	23 07       	cpc	r18, r19
     11e:	fb 06       	cpc	r15, r27
     120:	23 07       	cpc	r18, r19
     122:	23 07       	cpc	r18, r19
     124:	23 07       	cpc	r18, r19
     126:	23 07       	cpc	r18, r19
     128:	23 07       	cpc	r18, r19
     12a:	23 07       	cpc	r18, r19
     12c:	23 07       	cpc	r18, r19
     12e:	23 07       	cpc	r18, r19
     130:	23 07       	cpc	r18, r19
     132:	23 07       	cpc	r18, r19
     134:	23 07       	cpc	r18, r19
     136:	23 07       	cpc	r18, r19
     138:	23 07       	cpc	r18, r19
     13a:	23 07       	cpc	r18, r19
     13c:	23 07       	cpc	r18, r19
     13e:	23 07       	cpc	r18, r19
     140:	23 07       	cpc	r18, r19
     142:	23 07       	cpc	r18, r19
     144:	23 07       	cpc	r18, r19
     146:	23 07       	cpc	r18, r19
     148:	23 07       	cpc	r18, r19
     14a:	23 07       	cpc	r18, r19
     14c:	23 07       	cpc	r18, r19
     14e:	23 07       	cpc	r18, r19
     150:	23 07       	cpc	r18, r19
     152:	23 07       	cpc	r18, r19
     154:	23 07       	cpc	r18, r19
     156:	23 07       	cpc	r18, r19
     158:	23 07       	cpc	r18, r19
     15a:	23 07       	cpc	r18, r19
     15c:	23 07       	cpc	r18, r19
     15e:	23 07       	cpc	r18, r19
     160:	23 07       	cpc	r18, r19
     162:	23 07       	cpc	r18, r19
     164:	23 07       	cpc	r18, r19
     166:	23 07       	cpc	r18, r19
     168:	23 07       	cpc	r18, r19
     16a:	23 07       	cpc	r18, r19
     16c:	23 07       	cpc	r18, r19
     16e:	23 07       	cpc	r18, r19
     170:	23 07       	cpc	r18, r19
     172:	23 07       	cpc	r18, r19
     174:	23 07       	cpc	r18, r19
     176:	23 07       	cpc	r18, r19
     178:	23 07       	cpc	r18, r19
     17a:	23 07       	cpc	r18, r19
     17c:	23 07       	cpc	r18, r19
     17e:	23 07       	cpc	r18, r19
     180:	03 07       	cpc	r16, r19
     182:	23 07       	cpc	r18, r19
     184:	0b 07       	cpc	r16, r27
     186:	23 07       	cpc	r18, r19
     188:	13 07       	cpc	r17, r19
     18a:	1b 07       	cpc	r17, r27

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf ef       	ldi	r28, 0xFF	; 255
     192:	cd bf       	out	0x3d, r28	; 61
     194:	df e3       	ldi	r29, 0x3F	; 63
     196:	de bf       	out	0x3e, r29	; 62

00000198 <__do_copy_data>:
     198:	19 e3       	ldi	r17, 0x39	; 57
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b8 e3       	ldi	r27, 0x38	; 56
     19e:	ec eb       	ldi	r30, 0xBC	; 188
     1a0:	f9 e1       	ldi	r31, 0x19	; 25
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	a6 36       	cpi	r26, 0x66	; 102
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	2e e3       	ldi	r18, 0x3E	; 62
     1b0:	a6 e6       	ldi	r26, 0x66	; 102
     1b2:	b9 e3       	ldi	r27, 0x39	; 57
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a6 38       	cpi	r26, 0x86	; 134
     1ba:	b2 07       	cpc	r27, r18
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 10 05 	call	0xa20	; 0xa20 <main>
     1c2:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1ca:	0e 94 51 05 	call	0xaa2	; 0xaa2 <system_init>
     1ce:	08 95       	ret

000001d0 <LedCtrl_init>:
					uint8_t
---------------------------------------------------------------------------------------
*/
void LedCtrl_heartBeatSetInterval(LedCtrl_STYP *lc,uint16_t interval)
{
	lc->HeartBeatBlinkInterval = interval;
     1d0:	2c e2       	ldi	r18, 0x2C	; 44
     1d2:	31 e0       	ldi	r19, 0x01	; 1
     1d4:	fc 01       	movw	r30, r24
     1d6:	22 83       	std	Z+2, r18	; 0x02
     1d8:	33 83       	std	Z+3, r19	; 0x03
     1da:	08 95       	ret

000001dc <LedCtrl_HeartBeatBlink>:
     1dc:	fc 01       	movw	r30, r24
     1de:	80 81       	ld	r24, Z
     1e0:	91 81       	ldd	r25, Z+1	; 0x01
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	21 f0       	breq	.+8      	; 0x1ee <LedCtrl_HeartBeatBlink+0x12>
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	80 83       	st	Z, r24
     1ea:	91 83       	std	Z+1, r25	; 0x01
     1ec:	08 95       	ret
     1ee:	82 81       	ldd	r24, Z+2	; 0x02
     1f0:	93 81       	ldd	r25, Z+3	; 0x03
     1f2:	80 83       	st	Z, r24
     1f4:	91 83       	std	Z+1, r25	; 0x01
     1f6:	34 9a       	sbi	0x06, 4	; 6
     1f8:	08 95       	ret

000001fa <LedCtrl_ledsManager>:

=====================================================================================
*/
void LedCtrl_ledsManager(LedCtrl_STYP *lc,uint8_t errorCode)
{
	LedCtrl_HeartBeatBlink(lc);
     1fa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LedCtrl_HeartBeatBlink>
     1fe:	08 95       	ret

00000200 <MinSlave_spNothingToRespondPRIV>:
 History:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    08-09-2019  Original code                                       Tom Van Sistine
----------------------------------------------------------------------------------------
 */
static uint8_t MinSlave_spNothingToRespondPRIV(void) {
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
	uint16_t crc;
	uint8_t txLength;
	uint8_t * dataPtr;

	txBuf[MIN_FC65_TYPE_CODE_INDEX] = MIN_FC65_NO_RESPONSE_CODE;
     204:	c8 e6       	ldi	r28, 0x68	; 104
     206:	d9 e3       	ldi	r29, 0x39	; 57
     208:	1a 82       	std	Y+2, r1	; 0x02

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX + 1];
	crc = get_crc_16 (0xFFFF, txBuf, (MIN_FC65_NO_RESPONSE_LENGTH - MIN_CRC_LENGTH));         // Calculate the CRC to send with reply
     20a:	43 e0       	ldi	r20, 0x03	; 3
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	be 01       	movw	r22, r28
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	9f ef       	ldi	r25, 0xFF	; 255
     214:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     218:	8b 83       	std	Y+3, r24	; 0x03
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     21a:	9c 83       	std	Y+4, r25	; 0x04
	txLength = MIN_FC65_NO_RESPONSE_LENGTH;
	return txLength;
}
     21c:	85 e0       	ldi	r24, 0x05	; 5
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <MinSlave_sendReplyPRIV>:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    07-11-2019  Original code                                       Tom Van Sistine

 ----------------------------------------------------------------------------------------
 */
void MinSlave_sendReplyPRIV(uint8_t * pSrc, uint8_t txLength) {
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	1f 92       	push	r1
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	unsigned char data;
	assert(txLength);
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <MinSlave_sendReplyPRIV+0x1a>
     23a:	0e 94 15 0a 	call	0x142a	; 0x142a <abort>
	assert(pSrc);
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f4       	brne	.+4      	; 0x246 <MinSlave_sendReplyPRIV+0x22>
     242:	0e 94 15 0a 	call	0x142a	; 0x142a <abort>
     246:	8c 01       	movw	r16, r24
     248:	61 50       	subi	r22, 0x01	; 1
     24a:	e6 2e       	mov	r14, r22
     24c:	f1 2c       	mov	r15, r1
     24e:	2f ef       	ldi	r18, 0xFF	; 255
     250:	e2 1a       	sub	r14, r18
     252:	f2 0a       	sbc	r15, r18
     254:	e8 0e       	add	r14, r24
     256:	f9 1e       	adc	r15, r25
	for (i = 0; i < txLength; i++) {
		data = (unsigned char)*pSrc++;
     258:	f8 01       	movw	r30, r16
     25a:	91 91       	ld	r25, Z+
     25c:	8f 01       	movw	r16, r30
     25e:	99 83       	std	Y+1, r25	; 0x01
		(void) HardwareUart_SendChar(data);
     260:	ce 01       	movw	r24, r28
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	0e 94 00 05 	call	0xa00	; 0xa00 <USART_SendChar>
void MinSlave_sendReplyPRIV(uint8_t * pSrc, uint8_t txLength) {
	uint8_t i;
	unsigned char data;
	assert(txLength);
	assert(pSrc);
	for (i = 0; i < txLength; i++) {
     268:	e0 16       	cp	r14, r16
     26a:	f1 06       	cpc	r15, r17
     26c:	a9 f7       	brne	.-22     	; 0x258 <MinSlave_sendReplyPRIV+0x34>
		data = (unsigned char)*pSrc++;
		(void) HardwareUart_SendChar(data);
	}
	if(i == txLength){
		Enable_TXInterrupt(); 
     26e:	0e 94 0a 05 	call	0xa14	; 0xa14 <USART_SetTxInterrupt>
	}
}
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	08 95       	ret

00000282 <MinSlave_init>:

void MinSlave_init(MinSlave_STYP *minSlave) {

	// Initialize all member values

	minSlave->changeDataFlag = FALSE;
     282:	fc 01       	movw	r30, r24
     284:	11 a6       	std	Z+41, r1	; 0x29
	minSlave->communicationTimeoutCNTR = ONE_SECOND_TIME;
     286:	28 ee       	ldi	r18, 0xE8	; 232
     288:	33 e0       	ldi	r19, 0x03	; 3
     28a:	22 a3       	std	Z+34, r18	; 0x22
     28c:	33 a3       	std	Z+35, r19	; 0x23
	minSlave->delayDoneFLG = FALSE;
     28e:	13 a6       	std	Z+43, r1	; 0x2b

	// Save reference to itself so it can support Slave parameter get requests.
	pMinSlaveSelf = minSlave;
     290:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <__data_end>
     294:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <__data_end+0x1>

	// Initialize the class object
	MinUart_init(&minSlave->uart);
     298:	8f 96       	adiw	r24, 0x2f	; 47
     29a:	0e 94 14 06 	call	0xc28	; 0xc28 <MinUart_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     29e:	0e 98       	cbi	0x01, 6	; 1
     2a0:	08 95       	ret

000002a2 <MinSlave_manageMessages>:
1.03	07-07-2020	Added get and store method for product info		 Anish Venkataraman
					FC69 and FC70	
---------------------------------------------------------------------------------------
 */

void MinSlave_manageMessages(void) {
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	da 95       	dec	r29
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	de bf       	out	0x3e, r29	; 62

	// If pointer to itself has not been initialized, return.
	if (pMinSlaveSelf == 0) {
     2b8:	80 91 66 39 	lds	r24, 0x3966	; 0x803966 <__data_end>
     2bc:	90 91 67 39 	lds	r25, 0x3967	; 0x803967 <__data_end+0x1>
     2c0:	89 2b       	or	r24, r25
     2c2:	41 f4       	brne	.+16     	; 0x2d4 <MinSlave_manageMessages+0x32>
     2c4:	75 c2       	rjmp	.+1258   	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		return;
	}
	// Poll UART Rx buffer for characters and call MinUart_ServiceRx() for each character
	// received until buffer is empty.
	while (HardwareUart_GetCharsInRxBuf() > (uint16_t) 0) {
		MinUart_serviceRx(&pMinSlaveSelf->uart);
     2c6:	80 91 66 39 	lds	r24, 0x3966	; 0x803966 <__data_end>
     2ca:	90 91 67 39 	lds	r25, 0x3967	; 0x803967 <__data_end+0x1>
     2ce:	8f 96       	adiw	r24, 0x2f	; 47
     2d0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <MinUart_serviceRx>
	if (pMinSlaveSelf == 0) {
		return;
	}
	// Poll UART Rx buffer for characters and call MinUart_ServiceRx() for each character
	// received until buffer is empty.
	while (HardwareUart_GetCharsInRxBuf() > (uint16_t) 0) {
     2d4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <USART_GetCharsInRxBuf>
     2d8:	81 11       	cpse	r24, r1
     2da:	f5 cf       	rjmp	.-22     	; 0x2c6 <MinSlave_manageMessages+0x24>
		MinUart_serviceRx(&pMinSlaveSelf->uart);
	}
	// Check if a packet of data from Master device (found in AinUart_ServiceRx()) is ready to process.
	if (pMinSlaveSelf->uart.processPacketFlag == FALSE) {
     2dc:	e0 91 66 39 	lds	r30, 0x3966	; 0x803966 <__data_end>
     2e0:	f0 91 67 39 	lds	r31, 0x3967	; 0x803967 <__data_end+0x1>
     2e4:	df 01       	movw	r26, r30
     2e6:	a7 5c       	subi	r26, 0xC7	; 199
     2e8:	be 4f       	sbci	r27, 0xFE	; 254
     2ea:	8c 91       	ld	r24, X
     2ec:	88 23       	and	r24, r24
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <MinSlave_manageMessages+0x50>
     2f0:	5f c2       	rjmp	.+1214   	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		return;
	}
	pMinSlaveSelf->validCommunicationReceivedFLG = TRUE; //Signal communications timer to reset.
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	82 a7       	std	Z+42, r24	; 0x2a

	// Packet is finished and checksum is OK
	pMinSlaveSelf->uart.processPacketFlag = FALSE;
     2f6:	1c 92       	st	X, r1

	// Reset no communications timer (if somehow no communications for a while Scheduler will reset for discover baud)
	pMinSlaveSelf->communicationTimeoutCNTR = ONE_SECOND_TIME;
     2f8:	88 ee       	ldi	r24, 0xE8	; 232
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	82 a3       	std	Z+34, r24	; 0x22
     2fe:	93 a3       	std	Z+35, r25	; 0x23

	MinTurnAroundDelayMAC();  // 2 msec delay before reply to give chance for master to turn off it TxEnable.
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>

	switch (pMinSlaveSelf->uart.functionCode) {
     308:	60 91 66 39 	lds	r22, 0x3966	; 0x803966 <__data_end>
     30c:	70 91 67 39 	lds	r23, 0x3967	; 0x803967 <__data_end+0x1>
     310:	fb 01       	movw	r30, r22
     312:	e0 5c       	subi	r30, 0xC0	; 192
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	e0 81       	ld	r30, Z
     318:	8e 2f       	mov	r24, r30
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	33 97       	sbiw	r30, 0x03	; 3
     320:	e4 34       	cpi	r30, 0x44	; 68
     322:	f1 05       	cpc	r31, r1
     324:	08 f0       	brcs	.+2      	; 0x328 <MinSlave_manageMessages+0x86>
     326:	44 c2       	rjmp	.+1160   	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     328:	e2 5c       	subi	r30, 0xC2	; 194
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__tablejump2__>
	uint8_t registerNumber;				//Requested Register
	uint16_t address;
	uint8_t length;
	uint8_t read[NFC_MAX_MEM];	//array to store read data
	// Setup reply
	txBuf[MODBUS_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     330:	e8 e6       	ldi	r30, 0x68	; 104
     332:	f9 e3       	ldi	r31, 0x39	; 57
     334:	db 01       	movw	r26, r22
     336:	a8 5c       	subi	r26, 0xC8	; 200
     338:	be 4f       	sbci	r27, 0xFE	; 254
     33a:	8c 91       	ld	r24, X
     33c:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC03;                    			// Function code
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	81 83       	std	Z+1, r24	; 0x01
	txBuf[MODBUS_FC03_BYTES_REPLY_INDEX] = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG;
     342:	db 01       	movw	r26, r22
     344:	d5 96       	adiw	r26, 0x35	; 53
     346:	1c 91       	ld	r17, X
     348:	d5 97       	sbiw	r26, 0x35	; 53
     34a:	11 0f       	add	r17, r17
     34c:	12 83       	std	Z+2, r17	; 0x02
	// Get requested registers
	blockNumber = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC16_BLOCK_INDEX];
	//Set pointer to the Tx Buffer
	dataPtr = &txBuf[MODBUS_FC03_DATA_START];
	//Store Register Number
	registerNumber = (uint8_t)((pMinSlaveSelf->uart.rxBuffer[MODBUS_FC03_START_ADDR_INDEX]) - 0x40);
     34e:	d3 96       	adiw	r26, 0x33	; 51
     350:	8c 91       	ld	r24, X
     352:	80 54       	subi	r24, 0x40	; 64
		//address = (uint16_t)(BLOCK226_OFFSET + registerNumber);
	//}
	
	address = (uint16_t)(HOLDING_REG_OFFSET + registerNumber);
	
	NFC_SequentialRead(address,length,read);
     354:	88 0f       	add	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	ae 01       	movw	r20, r28
     35a:	4f 5f       	subi	r20, 0xFF	; 255
     35c:	5f 4f       	sbci	r21, 0xFF	; 255
     35e:	61 2f       	mov	r22, r17
     360:	80 5e       	subi	r24, 0xE0	; 224
     362:	9e 4f       	sbci	r25, 0xFE	; 254
     364:	0e 94 06 08 	call	0x100c	; 0x100c <NFC_SequentialRead>
	//Copy to txBuf
	for (i = 0; i < length; i++) {
     368:	11 23       	and	r17, r17
     36a:	c1 f0       	breq	.+48     	; 0x39c <MinSlave_manageMessages+0xfa>
     36c:	fe 01       	movw	r30, r28
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	ab e6       	ldi	r26, 0x6B	; 107
     372:	b9 e3       	ldi	r27, 0x39	; 57
     374:	4f ef       	ldi	r20, 0xFF	; 255
     376:	41 0f       	add	r20, r17
     378:	e4 2e       	mov	r14, r20
     37a:	f1 2c       	mov	r15, r1
     37c:	a7 01       	movw	r20, r14
     37e:	4f 5f       	subi	r20, 0xFF	; 255
     380:	5f 4f       	sbci	r21, 0xFF	; 255
     382:	9f 01       	movw	r18, r30
     384:	24 0f       	add	r18, r20
     386:	35 1f       	adc	r19, r21
		*dataPtr++ = read[i];
     388:	81 91       	ld	r24, Z+
     38a:	8d 93       	st	X+, r24
	
	address = (uint16_t)(HOLDING_REG_OFFSET + registerNumber);
	
	NFC_SequentialRead(address,length,read);
	//Copy to txBuf
	for (i = 0; i < length; i++) {
     38c:	e2 17       	cp	r30, r18
     38e:	f3 07       	cpc	r31, r19
     390:	d9 f7       	brne	.-10     	; 0x388 <MinSlave_manageMessages+0xe6>
     392:	fa 01       	movw	r30, r20
     394:	e5 59       	subi	r30, 0x95	; 149
     396:	f6 4c       	sbci	r31, 0xC6	; 198
     398:	7f 01       	movw	r14, r30
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <MinSlave_manageMessages+0x106>
	txBuf[MODBUS_FC03_BYTES_REPLY_INDEX] = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG;
	length = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG; 
	// Get requested registers
	blockNumber = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC16_BLOCK_INDEX];
	//Set pointer to the Tx Buffer
	dataPtr = &txBuf[MODBUS_FC03_DATA_START];
     39c:	0f 2e       	mov	r0, r31
     39e:	fb e6       	ldi	r31, 0x6B	; 107
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f9 e3       	ldi	r31, 0x39	; 57
     3a4:	ff 2e       	mov	r15, r31
     3a6:	f0 2d       	mov	r31, r0
	NFC_SequentialRead(address,length,read);
	//Copy to txBuf
	for (i = 0; i < length; i++) {
		*dataPtr++ = read[i];
	}
	crc = get_crc_16 (0xFFFF, txBuf, MODBUS_FC03_START_ADDR_INDEX + length);// Calculate the CRC to send with reply
     3a8:	41 2f       	mov	r20, r17
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	4d 5f       	subi	r20, 0xFD	; 253
     3ae:	5f 4f       	sbci	r21, 0xFF	; 255
     3b0:	68 e6       	ldi	r22, 0x68	; 104
     3b2:	79 e3       	ldi	r23, 0x39	; 57
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	9f ef       	ldi	r25, 0xFF	; 255
     3b8:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     3bc:	d7 01       	movw	r26, r14
     3be:	8c 93       	st	X, r24
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     3c0:	11 96       	adiw	r26, 0x01	; 1
     3c2:	9c 93       	st	X, r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     3c4:	0e 9a       	sbi	0x01, 6	; 1
	txLength = (MODBUS_FC03_DATA_START + length + MODBUS_CRC_LENGTH);
	// Enable the Tx line
	minTxEnable();
	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     3c6:	65 e0       	ldi	r22, 0x05	; 5
     3c8:	61 0f       	add	r22, r17
     3ca:	88 e6       	ldi	r24, 0x68	; 104
     3cc:	99 e3       	ldi	r25, 0x39	; 57
     3ce:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     3d2:	ee c1       	rjmp	.+988    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
	uint8_t * dataPtr;
	uint16_t crc;
	uint8_t txLength;
	//uint16_t config = 0;
	// Setup reply
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     3d4:	e8 e6       	ldi	r30, 0x68	; 104
     3d6:	f9 e3       	ldi	r31, 0x39	; 57
     3d8:	db 01       	movw	r26, r22
     3da:	a8 5c       	subi	r26, 0xC8	; 200
     3dc:	be 4f       	sbci	r27, 0xFE	; 254
     3de:	8c 91       	ld	r24, X
     3e0:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC67_DISCOVER;                    			// Function code
     3e2:	83 e4       	ldi	r24, 0x43	; 67
     3e4:	81 83       	std	Z+1, r24	; 0x01
	txBuf[MIN_FC03_BYTES_REPLY_INDEX] = pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG;
     3e6:	db 01       	movw	r26, r22
     3e8:	d6 96       	adiw	r26, 0x36	; 54
     3ea:	8c 91       	ld	r24, X
     3ec:	d6 97       	sbiw	r26, 0x36	; 54
     3ee:	98 2f       	mov	r25, r24
     3f0:	99 0f       	add	r25, r25
     3f2:	92 83       	std	Z+2, r25	; 0x02
	// Get requested registers

	// Set source pointer to slave data
	registerDataPointer = &pMinSlaveSelf->slaveRegisters[pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]];
     3f4:	d3 96       	adiw	r26, 0x33	; 51
     3f6:	ec 91       	ld	r30, X
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e6 0f       	add	r30, r22
     400:	f7 1f       	adc	r31, r23

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC03_DATA_START];
	for (i = 0; i < pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX]; i++) {
     402:	88 23       	and	r24, r24
     404:	a9 f0       	breq	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	0b e6       	ldi	r16, 0x6B	; 107
     40a:	19 e3       	ldi	r17, 0x39	; 57
		*dataPtr++ = (uint8_t)(*registerDataPointer >> 8);		// Data High
     40c:	81 81       	ldd	r24, Z+1	; 0x01
     40e:	d8 01       	movw	r26, r16
     410:	8c 93       	st	X, r24
     412:	0e 5f       	subi	r16, 0xFE	; 254
     414:	1f 4f       	sbci	r17, 0xFF	; 255
		*dataPtr++ = (uint8_t) (*registerDataPointer++ & 0xFF);	// Data Low
     416:	c8 01       	movw	r24, r16
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	20 81       	ld	r18, Z
     41c:	32 96       	adiw	r30, 0x02	; 2
     41e:	dc 01       	movw	r26, r24
     420:	2c 93       	st	X, r18
	// Set source pointer to slave data
	registerDataPointer = &pMinSlaveSelf->slaveRegisters[pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]];

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC03_DATA_START];
	for (i = 0; i < pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX]; i++) {
     422:	4f 5f       	subi	r20, 0xFF	; 255
     424:	db 01       	movw	r26, r22
     426:	d6 96       	adiw	r26, 0x36	; 54
     428:	8c 91       	ld	r24, X
     42a:	48 17       	cp	r20, r24
     42c:	78 f3       	brcs	.-34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     42e:	03 c0       	rjmp	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     430:	40 e0       	ldi	r20, 0x00	; 0

	// Set source pointer to slave data
	registerDataPointer = &pMinSlaveSelf->slaveRegisters[pMinSlaveSelf->uart.rxBuffer[MIN_FC03_START_ADDR_INDEX]];

	// Set destination pointer to txBuf
	dataPtr = &txBuf[MIN_FC03_DATA_START];
     432:	0b e6       	ldi	r16, 0x6B	; 107
     434:	19 e3       	ldi	r17, 0x39	; 57
	for (i = 0; i < pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX]; i++) {
		*dataPtr++ = (uint8_t)(*registerDataPointer >> 8);		// Data High
		*dataPtr++ = (uint8_t) (*registerDataPointer++ & 0xFF);	// Data Low
	}

	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC03_START_ADDR_INDEX + (i * MIN_BYTES_PER_REG));         // Calculate the CRC to send with reply
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	4d 5f       	subi	r20, 0xFD	; 253
     43e:	5f 4f       	sbci	r21, 0xFF	; 255
     440:	68 e6       	ldi	r22, 0x68	; 104
     442:	79 e3       	ldi	r23, 0x39	; 57
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	9f ef       	ldi	r25, 0xFF	; 255
     448:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     44c:	f8 01       	movw	r30, r16
     44e:	80 83       	st	Z, r24
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     450:	91 83       	std	Z+1, r25	; 0x01
	txLength = (MIN_FC03_DATA_START + (pMinSlaveSelf->uart.rxBuffer[MIN_FC03_NUM_REG_INDEX] * MIN_BYTES_PER_REG) + MIN_CRC_LENGTH);
     452:	e0 91 66 39 	lds	r30, 0x3966	; 0x803966 <__data_end>
     456:	f0 91 67 39 	lds	r31, 0x3967	; 0x803967 <__data_end+0x1>
     45a:	66 a9       	ldd	r22, Z+54	; 0x36
     45c:	66 0f       	add	r22, r22
     45e:	6b 5f       	subi	r22, 0xFB	; 251
     460:	0e 9a       	sbi	0x01, 6	; 1

	// Enable the Tx line
	minTxEnable();
	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     462:	88 e6       	ldi	r24, 0x68	; 104
     464:	99 e3       	ldi	r25, 0x39	; 57
     466:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     46a:	a2 c1       	rjmp	.+836    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
	uint16_t address;
	uint8_t registerNumber;
	uint8_t block;
	block = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC03_BLOCK_INDEX]; //get block info
	data = (((uint16_t) pMinSlaveSelf->uart.rxBuffer[MODBUS_FC06_REG_VALH_INDEX]) << 8) + (uint16_t) pMinSlaveSelf->uart.rxBuffer[MODBUS_FC06_REG_VALl_INDEX]; //get data
	registerNumber =  pMinSlaveSelf->uart.rxBuffer[MODBUS_FC03_START_ADDR_INDEX]; //store register number
     46c:	db 01       	movw	r26, r22
     46e:	d3 96       	adiw	r26, 0x33	; 51
     470:	8c 91       	ld	r24, X
     472:	d3 97       	sbiw	r26, 0x33	; 51
	
	address = (uint16_t)(HOLDING_REG_OFFSET + (registerNumber * 2));

//	address = (uint16_t)(HOLDING_REG_OFFSET + (registerNumber ));

	NFC_InstantaneousWrite(&oNFC,address,data);//write the data
     474:	d4 96       	adiw	r26, 0x34	; 52
     476:	4c 91       	ld	r20, X
     478:	d4 97       	sbiw	r26, 0x34	; 52
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	54 2f       	mov	r21, r20
     47e:	44 27       	eor	r20, r20
     480:	d5 96       	adiw	r26, 0x35	; 53
     482:	9c 91       	ld	r25, X
     484:	49 0f       	add	r20, r25
     486:	51 1d       	adc	r21, r1
     488:	60 ec       	ldi	r22, 0xC0	; 192
     48a:	68 0f       	add	r22, r24
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	60 57       	subi	r22, 0x70	; 112
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	66 0f       	add	r22, r22
     494:	77 1f       	adc	r23, r23
     496:	81 e7       	ldi	r24, 0x71	; 113
     498:	9b e3       	ldi	r25, 0x3B	; 59
     49a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <NFC_InstantaneousWrite>
	// Reply is required for specific slave writing of a register. Reply is same as request for first 6 bytes received
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX];
     49e:	a0 91 66 39 	lds	r26, 0x3966	; 0x803966 <__data_end>
     4a2:	b0 91 67 39 	lds	r27, 0x3967	; 0x803967 <__data_end+0x1>
     4a6:	d0 96       	adiw	r26, 0x30	; 48
     4a8:	e8 e6       	ldi	r30, 0x68	; 104
     4aa:	f9 e3       	ldi	r31, 0x39	; 57
     4ac:	2e e6       	ldi	r18, 0x6E	; 110
     4ae:	39 e3       	ldi	r19, 0x39	; 57

	for (i = 0; i < MODBUS_FC_WRITE_REPLY_LENGTH; i++) {
		txBuf[i] = *dataPtr++;
     4b0:	8d 91       	ld	r24, X+
     4b2:	81 93       	st	Z+, r24

	NFC_InstantaneousWrite(&oNFC,address,data);//write the data
	// Reply is required for specific slave writing of a register. Reply is same as request for first 6 bytes received
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX];

	for (i = 0; i < MODBUS_FC_WRITE_REPLY_LENGTH; i++) {
     4b4:	e2 17       	cp	r30, r18
     4b6:	f3 07       	cpc	r31, r19
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		txBuf[i] = *dataPtr++;
	}

	crc = get_crc_16 (0xFFFF, txBuf, MODBUS_FC_WRITE_REPLY_LENGTH);         // Calculate the CRC to send with reply slaveAddr, FC, addrH, addrL, dataH, datal
     4ba:	46 e0       	ldi	r20, 0x06	; 6
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	68 e6       	ldi	r22, 0x68	; 104
     4c0:	79 e3       	ldi	r23, 0x39	; 57
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	9f ef       	ldi	r25, 0xFF	; 255
     4c6:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	txBuf[MODBUS_FC_CRCL_INDEX] = (uint8_t) (crc & 0xff);             // CRCL
	txBuf[MODBUS_FC_CRCL_INDEX] = (uint8_t) (crc >> 8);               // CRCH
     4ca:	90 93 6e 39 	sts	0x396E, r25	; 0x80396e <txBuf+0x6>
     4ce:	0e 9a       	sbi	0x01, 6	; 1

	// Enable the Tx line
	minTxEnable();

	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     4d0:	68 e0       	ldi	r22, 0x08	; 8
     4d2:	88 e6       	ldi	r24, 0x68	; 104
     4d4:	99 e3       	ldi	r25, 0x39	; 57
     4d6:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     4da:	6a c1       	rjmp	.+724    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
	uint8_t * dataPtr;
	uint8_t blockNumber;
	uint8_t registerNumber;
	uint8_t dataLength;
	////blockNumber = pMinSlaveSelf->uart.rxBuffer[MIN_FC16_BLOCK_INDEX]; //get block number
	registerNumber = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC16_REGISTER_INDEX]; //get the register number
     4dc:	fb 01       	movw	r30, r22
     4de:	83 a9       	ldd	r24, Z+51	; 0x33
	
	registerNumber = registerNumber - 0x40;
     4e0:	80 54       	subi	r24, 0x40	; 64
	
	dataLength = pMinSlaveSelf->uart.rxBuffer[MODBUS_FC16_BYTES_TO_RX_INDEX]; //length of the data to be written
     4e2:	26 a9       	ldd	r18, Z+54	; 0x36
	// Initialize source data pointer to start of register data in rxBuffer
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MODBUS_FC16_DATA_START_INDEX];	// Set pointer to first incoming register value high byte.
     4e4:	db 01       	movw	r26, r22
     4e6:	d7 96       	adiw	r26, 0x37	; 55
	
	// Check if MASTER is broadcasting a block of its registers (slave address is 0 for master broadcast)
		//if (pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX] == MODBUS_MASTER_BROADCAST && pMinSlaveSelf->slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED) {
		if (pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX] == MODBUS_MASTER_BROADCAST)
     4e8:	90 a9       	ldd	r25, Z+48	; 0x30
     4ea:	91 11       	cpse	r25, r1
     4ec:	16 c0       	rjmp	.+44     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		 {
			oNFC.broadcast.length = dataLength;
     4ee:	20 93 7e 3c 	sts	0x3C7E, r18	; 0x803c7e <oNFC+0x10d>
			//oNFC.storeBroadcastFLG = TRUE;
		//}
		//else if(blockNumber == BLOCK226 && oNFC.block226WriteFLG == TRUE){//store block 226
		//oNFC.broadcast.blockNumber = blockNumber;
		
		oNFC.broadcast.registerNumber = (registerNumber * 2);
     4f2:	88 0f       	add	r24, r24
     4f4:	80 93 7d 3c 	sts	0x3C7D, r24	; 0x803c7d <oNFC+0x10c>
		
		//oNFC.broadcast.registerNumber = (registerNumber);
		
		for (i = 0; i < (uint8_t) (dataLength); i++)   {
     4f8:	22 23       	and	r18, r18
     4fa:	59 f0       	breq	.+22     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     4fc:	ef e7       	ldi	r30, 0x7F	; 127
     4fe:	fc e3       	ldi	r31, 0x3C	; 60
     500:	21 50       	subi	r18, 0x01	; 1
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	20 58       	subi	r18, 0x80	; 128
     506:	33 4c       	sbci	r19, 0xC3	; 195
			oNFC.broadcast.nfcBuffer[i] = *dataPtr++;
     508:	8d 91       	ld	r24, X+
     50a:	81 93       	st	Z+, r24
		
		oNFC.broadcast.registerNumber = (registerNumber * 2);
		
		//oNFC.broadcast.registerNumber = (registerNumber);
		
		for (i = 0; i < (uint8_t) (dataLength); i++)   {
     50c:	e2 17       	cp	r30, r18
     50e:	f3 07       	cpc	r31, r19
     510:	d9 f7       	brne	.-10     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			oNFC.broadcast.nfcBuffer[i] = *dataPtr++;
			}
			oNFC.storeBroadcastFLG = TRUE;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 76 3b 	sts	0x3B76, r24	; 0x803b76 <oNFC+0x5>
     518:	4b c1       	rjmp	.+662    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		
		// Note: there is no reply for master broadcast of a its block.
	}
	//write data to NFC memory instantly
	//else if (pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX] == NFC_SLAVE_ADDRESS && pMinSlaveSelf->slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED) {
	else if (pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX] == NFC_SLAVE_ADDRESS) {		
     51a:	92 30       	cpi	r25, 0x02	; 2
     51c:	09 f0       	breq	.+2      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     51e:	48 c1       	rjmp	.+656    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		oNFC.update.length = dataLength;
     520:	20 93 81 3d 	sts	0x3D81, r18	; 0x803d81 <oNFC+0x210>
		//if(blockNumber == BLOCK2 || blockNumber == BLOCK11 || blockNumber == BLOCK226)
		//{//save Block instantly
			//oNFC.update.blockNumber = blockNumber;
			oNFC.update.registerNumber = registerNumber;
     524:	80 93 80 3d 	sts	0x3D80, r24	; 0x803d80 <oNFC+0x20f>
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     528:	22 23       	and	r18, r18
     52a:	69 f0       	breq	.+26     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     52c:	fd 01       	movw	r30, r26
     52e:	a2 e8       	ldi	r26, 0x82	; 130
     530:	bd e3       	ldi	r27, 0x3D	; 61
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	82 0f       	add	r24, r18
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	8d 57       	subi	r24, 0x7D	; 125
     53a:	92 4c       	sbci	r25, 0xC2	; 194
				oNFC.update.nfcBuffer[i] = *dataPtr++;
     53c:	21 91       	ld	r18, Z+
     53e:	2d 93       	st	X+, r18
		oNFC.update.length = dataLength;
		//if(blockNumber == BLOCK2 || blockNumber == BLOCK11 || blockNumber == BLOCK226)
		//{//save Block instantly
			//oNFC.update.blockNumber = blockNumber;
			oNFC.update.registerNumber = registerNumber;
			for (i = 0; i < (uint8_t) (dataLength); i++) {
     540:	a8 17       	cp	r26, r24
     542:	b9 07       	cpc	r27, r25
     544:	d9 f7       	brne	.-10     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
				oNFC.update.nfcBuffer[i] = *dataPtr++;
			}
			oNFC.instantWriteFLG = TRUE;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 74 3b 	sts	0x3B74, r24	; 0x803b74 <oNFC+0x3>
			// Reply is required for specific slave writing of registers. Reply is same as request for first 6 bytes received
			dataPtr = &pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX];
     54c:	db 01       	movw	r26, r22
     54e:	d0 96       	adiw	r26, 0x30	; 48
     550:	e8 e6       	ldi	r30, 0x68	; 104
     552:	f9 e3       	ldi	r31, 0x39	; 57
     554:	2e e6       	ldi	r18, 0x6E	; 110
     556:	39 e3       	ldi	r19, 0x39	; 57

			for (i = 0; i < MODBUS_FC_WRITE_REPLY_LENGTH; i++) {
				txBuf[i] = *dataPtr++;
     558:	8d 91       	ld	r24, X+
     55a:	81 93       	st	Z+, r24
			}
			oNFC.instantWriteFLG = TRUE;
			// Reply is required for specific slave writing of registers. Reply is same as request for first 6 bytes received
			dataPtr = &pMinSlaveSelf->uart.rxBuffer[MODBUS_SLAVE_ADDRESS_INDEX];

			for (i = 0; i < MODBUS_FC_WRITE_REPLY_LENGTH; i++) {
     55c:	e2 17       	cp	r30, r18
     55e:	f3 07       	cpc	r31, r19
     560:	d9 f7       	brne	.-10     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				txBuf[i] = *dataPtr++;
			}
			crc = get_crc_16 (0xFFFF, txBuf, MODBUS_FC_WRITE_REPLY_LENGTH);         // Calculate the CRC to send with reply slaveAddr, FC, addrH, addrL, dataH, datal
     562:	46 e0       	ldi	r20, 0x06	; 6
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	68 e6       	ldi	r22, 0x68	; 104
     568:	79 e3       	ldi	r23, 0x39	; 57
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	9f ef       	ldi	r25, 0xFF	; 255
     56e:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
			txBuf[MIN_FC_CRCL_INDEX] = (uint8_t) (crc & 0xff);             // CRCL
     572:	e8 e6       	ldi	r30, 0x68	; 104
     574:	f9 e3       	ldi	r31, 0x39	; 57
     576:	86 83       	std	Z+6, r24	; 0x06
			txBuf[MIN_FC_CRCH_INDEX] = (uint8_t) (crc >> 8);               // CRCH
     578:	97 83       	std	Z+7, r25	; 0x07
     57a:	0e 9a       	sbi	0x01, 6	; 1
			txLength = MIN_FC_WRITE_REPLY_LENGTH + MIN_CRC_LENGTH;
			// Enable the Tx line
			minTxEnable();

		// Send reply
		MinSlave_sendReplyPRIV(txBuf, txLength);
     57c:	68 e0       	ldi	r22, 0x08	; 8
     57e:	cf 01       	movw	r24, r30
     580:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     584:	15 c1       	rjmp	.+554    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
 ----------------------------------------------------------------------------------------
 */
static void MinSlave_slavePollPRIV(void) {
	uint8_t txLength;

	if(pMinSlaveSelf->slavePollBroadcastInterval) {
     586:	db 01       	movw	r26, r22
     588:	9d 96       	adiw	r26, 0x2d	; 45
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	9e 97       	sbiw	r26, 0x2e	; 46
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	29 f0       	breq	.+10     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
		pMinSlaveSelf->slavePollBroadcastInterval--;
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	9d 96       	adiw	r26, 0x2d	; 45
     598:	8d 93       	st	X+, r24
     59a:	9c 93       	st	X, r25
     59c:	9e 97       	sbiw	r26, 0x2e	; 46
	}

	// Setup reply first to bytes common to all responses
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     59e:	e8 e6       	ldi	r30, 0x68	; 104
     5a0:	f9 e3       	ldi	r31, 0x39	; 57
     5a2:	db 01       	movw	r26, r22
     5a4:	a8 5c       	subi	r26, 0xC8	; 200
     5a6:	be 4f       	sbci	r27, 0xFE	; 254
     5a8:	8c 91       	ld	r24, X
     5aa:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC65_SLAVE_POLL;         // Function code
     5ac:	81 e4       	ldi	r24, 0x41	; 65
     5ae:	81 83       	std	Z+1, r24	; 0x01

	// Determine what type of response should be sent.
	if (pMinSlaveSelf->changeDataFlag) {
     5b0:	fb 01       	movw	r30, r22
     5b2:	81 a5       	ldd	r24, Z+41	; 0x29
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5b8:	4a c0       	rjmp	.+148    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 */
static uint8_t MinSlave_spSendRegistersPRIV(void) {
	uint8_t i;
	uint16_t crc;
	uint8_t * dataPtr;
	pMinSlaveSelf->changeDataFlag = FALSE;
     5ba:	11 a6       	std	Z+41, r1	; 0x29
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX];
	*dataPtr++ = MIN_FC65_SETPOINT_RESPONSE_CODE;
     5bc:	e8 e6       	ldi	r30, 0x68	; 104
     5be:	f9 e3       	ldi	r31, 0x39	; 57
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	82 83       	std	Z+2, r24	; 0x02
	*dataPtr++ = pMinSlaveSelf->blockToChange;
     5c4:	db 01       	movw	r26, r22
     5c6:	94 96       	adiw	r26, 0x24	; 36
     5c8:	8c 91       	ld	r24, X
     5ca:	94 97       	sbiw	r26, 0x24	; 36
     5cc:	83 83       	std	Z+3, r24	; 0x03
	*dataPtr++ = pMinSlaveSelf->regToChange;
     5ce:	95 96       	adiw	r26, 0x25	; 37
     5d0:	8c 91       	ld	r24, X
     5d2:	95 97       	sbiw	r26, 0x25	; 37
     5d4:	84 83       	std	Z+4, r24	; 0x04
	*dataPtr++ = pMinSlaveSelf->numRegsToChange;
     5d6:	98 96       	adiw	r26, 0x28	; 40
     5d8:	8c 91       	ld	r24, X
     5da:	85 83       	std	Z+5, r24	; 0x05
	for (i = 0; i < pMinSlaveSelf->numRegsToChange; i++) {
     5dc:	88 23       	and	r24, r24
     5de:	11 f1       	breq	.+68     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	0e e6       	ldi	r16, 0x6E	; 110
     5e4:	19 e3       	ldi	r17, 0x39	; 57
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange >> 8);  	// High byte of register
     5e6:	db 01       	movw	r26, r22
     5e8:	96 96       	adiw	r26, 0x26	; 38
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	97 97       	sbiw	r26, 0x27	; 39
     5f0:	81 81       	ldd	r24, Z+1	; 0x01
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 83       	st	Z, r24
     5f6:	0e 5f       	subi	r16, 0xFE	; 254
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange++ & 0xff);	// Low byte of register
     5fa:	96 96       	adiw	r26, 0x26	; 38
     5fc:	ed 91       	ld	r30, X+
     5fe:	fc 91       	ld	r31, X
     600:	97 97       	sbiw	r26, 0x27	; 39
     602:	cf 01       	movw	r24, r30
     604:	02 96       	adiw	r24, 0x02	; 2
     606:	96 96       	adiw	r26, 0x26	; 38
     608:	8d 93       	st	X+, r24
     60a:	9c 93       	st	X, r25
     60c:	97 97       	sbiw	r26, 0x27	; 39
     60e:	d8 01       	movw	r26, r16
     610:	11 97       	sbiw	r26, 0x01	; 1
     612:	80 81       	ld	r24, Z
     614:	8c 93       	st	X, r24
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX];
	*dataPtr++ = MIN_FC65_SETPOINT_RESPONSE_CODE;
	*dataPtr++ = pMinSlaveSelf->blockToChange;
	*dataPtr++ = pMinSlaveSelf->regToChange;
	*dataPtr++ = pMinSlaveSelf->numRegsToChange;
	for (i = 0; i < pMinSlaveSelf->numRegsToChange; i++) {
     616:	4f 5f       	subi	r20, 0xFF	; 255
     618:	db 01       	movw	r26, r22
     61a:	98 96       	adiw	r26, 0x28	; 40
     61c:	8c 91       	ld	r24, X
     61e:	48 17       	cp	r20, r24
     620:	10 f3       	brcs	.-60     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     622:	03 c0       	rjmp	.+6      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     624:	40 e0       	ldi	r20, 0x00	; 0
	pMinSlaveSelf->changeDataFlag = FALSE;
	dataPtr = &txBuf[MIN_FC65_TYPE_CODE_INDEX];
	*dataPtr++ = MIN_FC65_SETPOINT_RESPONSE_CODE;
	*dataPtr++ = pMinSlaveSelf->blockToChange;
	*dataPtr++ = pMinSlaveSelf->regToChange;
	*dataPtr++ = pMinSlaveSelf->numRegsToChange;
     626:	0e e6       	ldi	r16, 0x6E	; 110
     628:	19 e3       	ldi	r17, 0x39	; 57
	for (i = 0; i < pMinSlaveSelf->numRegsToChange; i++) {
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange >> 8);  	// High byte of register
		*dataPtr++ = (uint8_t) (*pMinSlaveSelf->pDataToChange++ & 0xff);	// Low byte of register
	}

	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC65_SETPOINT_RESPONSE_PREFIX_LENGTH + (i * 2));         // Calculate the CRC to send with reply
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	4d 5f       	subi	r20, 0xFD	; 253
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	44 0f       	add	r20, r20
     632:	55 1f       	adc	r21, r21
     634:	68 e6       	ldi	r22, 0x68	; 104
     636:	79 e3       	ldi	r23, 0x39	; 57
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     640:	f8 01       	movw	r30, r16
     642:	80 83       	st	Z, r24
	*dataPtr++ = (uint8_t) (crc >> 8); // CRCH
     644:	91 83       	std	Z+1, r25	; 0x01
	return ((uint8_t) (dataPtr - txBuf));
     646:	06 56       	subi	r16, 0x66	; 102
     648:	19 43       	sbci	r17, 0x39	; 57
     64a:	60 2f       	mov	r22, r16
     64c:	0b c0       	rjmp	.+22     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
	if (pMinSlaveSelf->changeDataFlag) {
		// Setpoint(s) are queued up to send
		txLength = MinSlave_spSendRegistersPRIV();
	}

	else if(pMinSlaveSelf->slavePollBroadcastInterval == 0) {
     64e:	85 a5       	ldd	r24, Z+45	; 0x2d
     650:	96 a5       	ldd	r25, Z+46	; 0x2e
     652:	89 2b       	or	r24, r25
     654:	21 f4       	brne	.+8      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
		// Broadcast some slave registers
		txLength = MinSlave_spNothingToRespondPRIV();
     656:	0e 94 00 01 	call	0x200	; 0x200 <MinSlave_spNothingToRespondPRIV>
     65a:	68 2f       	mov	r22, r24
     65c:	03 c0       	rjmp	.+6      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
	}

	else {
		// Send nothing to respond this time type
		txLength = MinSlave_spNothingToRespondPRIV();
     65e:	0e 94 00 01 	call	0x200	; 0x200 <MinSlave_spNothingToRespondPRIV>
     662:	68 2f       	mov	r22, r24
     664:	0e 9a       	sbi	0x01, 6	; 1
	// Send response - common to all types.
	// Enable the Tx line
	minTxEnable();

	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     666:	88 e6       	ldi	r24, 0x68	; 104
     668:	99 e3       	ldi	r25, 0x39	; 57
     66a:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     66e:	a0 c0       	rjmp	.+320    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
	uint8_t * dataPtr;
	uint8_t readBuf[NFC_MAX_MEM];	//array to store read data
	uint8_t length;
	uint16_t crc;
	uint8_t txLength;
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
     670:	e8 e6       	ldi	r30, 0x68	; 104
     672:	f9 e3       	ldi	r31, 0x39	; 57
     674:	db 01       	movw	r26, r22
     676:	a8 5c       	subi	r26, 0xC8	; 200
     678:	be 4f       	sbci	r27, 0xFE	; 254
     67a:	8c 91       	ld	r24, X
     67c:	80 83       	st	Z, r24
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC69_GET_PRODUCT_INFO;            // Function code
     67e:	85 e4       	ldi	r24, 0x45	; 69
     680:	81 83       	std	Z+1, r24	; 0x01
	txBuf[MIN_FC69_BYTES_TO_RX_INDEX] =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2; // no. of registers * bytes per reg(2)
     682:	db 01       	movw	r26, r22
     684:	d5 96       	adiw	r26, 0x35	; 53
     686:	1c 91       	ld	r17, X
     688:	11 0f       	add	r17, r17
     68a:	12 83       	std	Z+2, r17	; 0x02
	length =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2;
	//set poitner to tx buffer
	dataPtr = &txBuf[MIN_FC69_DATA_START_INDEX];
	//read NFC memory
	NFC_SequentialRead(BLOCK_NVM_OFFSET,length,readBuf);
     68c:	ae 01       	movw	r20, r28
     68e:	4f 5f       	subi	r20, 0xFF	; 255
     690:	5f 4f       	sbci	r21, 0xFF	; 255
     692:	61 2f       	mov	r22, r17
     694:	80 e2       	ldi	r24, 0x20	; 32
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 06 08 	call	0x100c	; 0x100c <NFC_SequentialRead>
	for(i = 0; i < length; i++) {
     69c:	11 23       	and	r17, r17
     69e:	c1 f0       	breq	.+48     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6a0:	fe 01       	movw	r30, r28
     6a2:	31 96       	adiw	r30, 0x01	; 1
     6a4:	ab e6       	ldi	r26, 0x6B	; 107
     6a6:	b9 e3       	ldi	r27, 0x39	; 57
     6a8:	4f ef       	ldi	r20, 0xFF	; 255
     6aa:	41 0f       	add	r20, r17
     6ac:	e4 2e       	mov	r14, r20
     6ae:	f1 2c       	mov	r15, r1
     6b0:	a7 01       	movw	r20, r14
     6b2:	4f 5f       	subi	r20, 0xFF	; 255
     6b4:	5f 4f       	sbci	r21, 0xFF	; 255
     6b6:	9f 01       	movw	r18, r30
     6b8:	24 0f       	add	r18, r20
     6ba:	35 1f       	adc	r19, r21
		*dataPtr++ = readBuf[i];
     6bc:	81 91       	ld	r24, Z+
     6be:	8d 93       	st	X+, r24
	length =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2;
	//set poitner to tx buffer
	dataPtr = &txBuf[MIN_FC69_DATA_START_INDEX];
	//read NFC memory
	NFC_SequentialRead(BLOCK_NVM_OFFSET,length,readBuf);
	for(i = 0; i < length; i++) {
     6c0:	2e 17       	cp	r18, r30
     6c2:	3f 07       	cpc	r19, r31
     6c4:	d9 f7       	brne	.-10     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6c6:	fa 01       	movw	r30, r20
     6c8:	e5 59       	subi	r30, 0x95	; 149
     6ca:	f6 4c       	sbci	r31, 0xC6	; 198
     6cc:	7f 01       	movw	r14, r30
     6ce:	06 c0       	rjmp	.+12     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
	txBuf[MIN_SLAVE_ADDRESS_INDEX] = pMinSlaveSelf->uart.moduleAddress;  	// Slave address
	txBuf[MIN_FUNCTION_CODE_INDEX] = MIN_FC69_GET_PRODUCT_INFO;            // Function code
	txBuf[MIN_FC69_BYTES_TO_RX_INDEX] =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2; // no. of registers * bytes per reg(2)
	length =  pMinSlaveSelf->uart.rxBuffer[MIN_FC69_DATA_LENGTH_INDEX] * 2;
	//set poitner to tx buffer
	dataPtr = &txBuf[MIN_FC69_DATA_START_INDEX];
     6d0:	0f 2e       	mov	r0, r31
     6d2:	fb e6       	ldi	r31, 0x6B	; 107
     6d4:	ef 2e       	mov	r14, r31
     6d6:	f9 e3       	ldi	r31, 0x39	; 57
     6d8:	ff 2e       	mov	r15, r31
     6da:	f0 2d       	mov	r31, r0
	NFC_SequentialRead(BLOCK_NVM_OFFSET,length,readBuf);
	for(i = 0; i < length; i++) {
		*dataPtr++ = readBuf[i];
	}
	//calculate crc 
	crc = get_crc_16 (0xFFFF, txBuf, MIN_FC69_DATA_START_INDEX + length);// Calculate the CRC to send with reply
     6dc:	41 2f       	mov	r20, r17
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	4d 5f       	subi	r20, 0xFD	; 253
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	68 e6       	ldi	r22, 0x68	; 104
     6e6:	79 e3       	ldi	r23, 0x39	; 57
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	*dataPtr++ = (uint8_t) (crc & 0xff);   // CRCL
     6f0:	d7 01       	movw	r26, r14
     6f2:	8c 93       	st	X, r24
	*dataPtr = (uint8_t) (crc >> 8); // CRCH
     6f4:	11 96       	adiw	r26, 0x01	; 1
     6f6:	9c 93       	st	X, r25
     6f8:	0e 9a       	sbi	0x01, 6	; 1
	txLength = (MIN_FC03_DATA_START + length + MIN_CRC_LENGTH);
	// Enable the Tx line
	minTxEnable();
	// Send reply
	MinSlave_sendReplyPRIV(txBuf, txLength);
     6fa:	65 e0       	ldi	r22, 0x05	; 5
     6fc:	61 0f       	add	r22, r17
     6fe:	88 e6       	ldi	r24, 0x68	; 104
     700:	99 e3       	ldi	r25, 0x39	; 57
     702:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
     706:	54 c0       	rjmp	.+168    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
static void MinSlave_storeProductInfoPRIV(void) {
	uint8_t i;
	uint8_t * dataPtr;
	uint16_t crc;
	uint8_t index = 0;
	if(pMinSlaveSelf == 0) {
     708:	61 15       	cp	r22, r1
     70a:	71 05       	cpc	r23, r1
     70c:	09 f4       	brne	.+2      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     70e:	50 c0       	rjmp	.+160    	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		return;
	}
	//Save productInfoLength
	oNFC.productInfoLength = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_BYTES_TO_RX_INDEX] - MIN_FC70_PAYLOAD;
     710:	fb 01       	movw	r30, r22
     712:	42 a9       	ldd	r20, Z+50	; 0x32
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	45 50       	subi	r20, 0x05	; 5
     718:	51 09       	sbc	r21, r1
     71a:	40 93 7a 3b 	sts	0x3B7A, r20	; 0x803b7a <oNFC+0x9>
     71e:	50 93 7b 3b 	sts	0x3B7B, r21	; 0x803b7b <oNFC+0xa>
	//Save the Initialized Variable
	for(i = 0; i < oNFC.productInfoLength; i++) {
     722:	41 15       	cp	r20, r1
     724:	51 05       	cpc	r21, r1
     726:	89 f0       	breq	.+34     	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
     728:	20 e0       	ldi	r18, 0x00	; 0
		oNFC.productInfoData[i] = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_DATA_START_INDEX+i];
     72a:	82 2f       	mov	r24, r18
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	fb 01       	movw	r30, r22
     730:	e8 0f       	add	r30, r24
     732:	f9 1f       	adc	r31, r25
     734:	33 a9       	ldd	r19, Z+51	; 0x33
     736:	fc 01       	movw	r30, r24
     738:	ef 58       	subi	r30, 0x8F	; 143
     73a:	f4 4c       	sbci	r31, 0xC4	; 196
     73c:	33 87       	std	Z+11, r19	; 0x0b
		return;
	}
	//Save productInfoLength
	oNFC.productInfoLength = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_BYTES_TO_RX_INDEX] - MIN_FC70_PAYLOAD;
	//Save the Initialized Variable
	for(i = 0; i < oNFC.productInfoLength; i++) {
     73e:	2f 5f       	subi	r18, 0xFF	; 255
     740:	82 2f       	mov	r24, r18
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	84 17       	cp	r24, r20
     746:	95 07       	cpc	r25, r21
     748:	80 f3       	brcs	.-32     	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
		oNFC.productInfoData[i] = pMinSlaveSelf->uart.rxBuffer[MIN_FC70_DATA_START_INDEX+i];
	}
	// Reply is required for specific slave writing of registers. Reply is same as request for first 6 bytes received
	dataPtr = &pMinSlaveSelf->uart.rxBuffer[MIN_SLAVE_ADDRESS_INDEX];
	for(i = 0; i < 2; i++){
		txBuf[index++] = *dataPtr++;
     74a:	08 e6       	ldi	r16, 0x68	; 104
     74c:	19 e3       	ldi	r17, 0x39	; 57
     74e:	db 01       	movw	r26, r22
     750:	d0 96       	adiw	r26, 0x30	; 48
     752:	8c 91       	ld	r24, X
     754:	d0 97       	sbiw	r26, 0x30	; 48
     756:	f8 01       	movw	r30, r16
     758:	80 83       	st	Z, r24
     75a:	d1 96       	adiw	r26, 0x31	; 49
     75c:	8c 91       	ld	r24, X
     75e:	d1 97       	sbiw	r26, 0x31	; 49
     760:	81 83       	std	Z+1, r24	; 0x01
	}
	//update the config code sent from master MSB byte << 8 + LSB byte
	pMinSlaveSelf->slaveRegisters[MIN_SLAVE_MODEL_CONFIGURATION_CODE] = (((uint16_t)oNFC.productInfoData[oNFC.productInfoLength - 3] << 8) | (uint16_t)oNFC.productInfoData[oNFC.productInfoLength - 4]);
     762:	fa 01       	movw	r30, r20
     764:	ef 58       	subi	r30, 0x8F	; 143
     766:	f4 4c       	sbci	r31, 0xC4	; 196
     768:	80 85       	ldd	r24, Z+8	; 0x08
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	98 2f       	mov	r25, r24
     76e:	88 27       	eor	r24, r24
     770:	27 81       	ldd	r18, Z+7	; 0x07
     772:	82 2b       	or	r24, r18
     774:	1e 96       	adiw	r26, 0x0e	; 14
     776:	8d 93       	st	X+, r24
     778:	9c 93       	st	X, r25
     77a:	1f 97       	sbiw	r26, 0x0f	; 15
	txBuf[index++] = oNFC.productInfoData[oNFC.productInfoLength - 2];//CRC LSB
     77c:	81 85       	ldd	r24, Z+9	; 0x09
     77e:	d8 01       	movw	r26, r16
     780:	12 96       	adiw	r26, 0x02	; 2
     782:	8c 93       	st	X, r24
     784:	12 97       	sbiw	r26, 0x02	; 2
	txBuf[index++] = oNFC.productInfoData[oNFC.productInfoLength - 1];//CRC MSB
     786:	82 85       	ldd	r24, Z+10	; 0x0a
     788:	13 96       	adiw	r26, 0x03	; 3
     78a:	8c 93       	st	X, r24
	crc = get_crc_16 (0xFFFF, txBuf, index);         // Calculate the CRC to send with reply slaveAddr
     78c:	44 e0       	ldi	r20, 0x04	; 4
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	b8 01       	movw	r22, r16
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	9f ef       	ldi	r25, 0xFF	; 255
     796:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
	txBuf[index++] = (uint8_t) (crc & 0xff);             // CRCL
     79a:	f8 01       	movw	r30, r16
     79c:	84 83       	std	Z+4, r24	; 0x04
	txBuf[index++] = (uint8_t) (crc >> 8);               // CRCH
     79e:	95 83       	std	Z+5, r25	; 0x05
     7a0:	0e 9a       	sbi	0x01, 6	; 1
	
	// Enable the Tx line
	minTxEnable();

	// Send reply
	MinSlave_sendReplyPRIV(txBuf, index);
     7a2:	66 e0       	ldi	r22, 0x06	; 6
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 12 01 	call	0x224	; 0x224 <MinSlave_sendReplyPRIV>
	oNFC.productInfoFLG = TRUE;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 75 3b 	sts	0x3B75, r24	; 0x803b75 <oNFC+0x4>
		break; 

	default:
		break;
	}
}
     7b0:	d3 95       	inc	r29
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	08 95       	ret

000007c4 <__vector_27>:
extern MyMain_STYP mainObject;
extern NFC_STYP oNFC;


ISR(USART0_RXC_vect)
{
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	2f 93       	push	r18
     7d0:	3f 93       	push	r19
     7d2:	4f 93       	push	r20
     7d4:	5f 93       	push	r21
     7d6:	6f 93       	push	r22
     7d8:	7f 93       	push	r23
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
     7de:	af 93       	push	r26
     7e0:	bf 93       	push	r27
     7e2:	ef 93       	push	r30
     7e4:	ff 93       	push	r31
	 *
	 * The interrupt flag will be cleared when the receive buffer is empty
	 * Otherwise interrupt flag can be cleared by writing 1 to its bit location
	 * in the STATUS register
	 */
	USART_StoreData();
     7e6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <USART_StoreData>
	MinSlave_manageMessages();
     7ea:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MinSlave_manageMessages>
	USART_ClearRxBuffer();
     7ee:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <USART_ClearRxBuffer>
}
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <__vector_29>:


ISR(USART0_TXC_vect)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
	 * Insert your USART_0 transmission complete interrupt handling code
	 *
	 * The interrupt flag will be automatically cleared
	 */
	
	if(USART0.STATUS & USART_TXCIF_bm)
     836:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     83a:	86 ff       	sbrs	r24, 6
     83c:	06 c0       	rjmp	.+12     	; 0x84a <__vector_29+0x36>
	{
		MinUart_serviceTx(&oMinSlave.uart);
     83e:	81 e5       	ldi	r24, 0x51	; 81
     840:	98 e3       	ldi	r25, 0x38	; 56
     842:	0e 94 9b 07 	call	0xf36	; 0xf36 <MinUart_serviceTx>
		USART_ClearRxBuffer();
     846:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <USART_ClearRxBuffer>
	}
	USART0.STATUS |= (0<<USART_TXCIE_bp);  //Clear the transmission complete status bit
     84a:	e0 e0       	ldi	r30, 0x00	; 0
     84c:	f8 e0       	ldi	r31, 0x08	; 8
     84e:	84 81       	ldd	r24, Z+4	; 0x04
     850:	84 83       	std	Z+4, r24	; 0x04
}
     852:	ff 91       	pop	r31
     854:	ef 91       	pop	r30
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	7f 91       	pop	r23
     860:	6f 91       	pop	r22
     862:	5f 91       	pop	r21
     864:	4f 91       	pop	r20
     866:	3f 91       	pop	r19
     868:	2f 91       	pop	r18
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <__vector_28>:

ISR(USART0_DRE_vect)
{
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1

}
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <__vector_8>:

ISR(TCA0_OVF_vect)
{
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	2f 93       	push	r18
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
	//1msec interrupt
	static unsigned int schedulerRunCounter = 1;
	static unsigned int schedulerTimeCounter = 0;
	static uint16_t schedulerWaitCounter = 0;
	mainObject.realTimeInterruptFlag = TRUE;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	80 93 6f 3b 	sts	0x3B6F, r24	; 0x803b6f <mainObject>
	
	if(SCHEDULER_NFC_WRITE_TIME <= schedulerTimeCounter)
     89e:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <schedulerTimeCounter.3972>
     8a2:	90 91 6b 3a 	lds	r25, 0x3A6B	; 0x803a6b <schedulerTimeCounter.3972+0x1>
     8a6:	89 2b       	or	r24, r25
     8a8:	41 f0       	breq	.+16     	; 0x8ba <__vector_8+0x32>
	{
		schedulerTimeCounter = 0;
     8aa:	10 92 6a 3a 	sts	0x3A6A, r1	; 0x803a6a <schedulerTimeCounter.3972>
     8ae:	10 92 6b 3a 	sts	0x3A6B, r1	; 0x803a6b <schedulerTimeCounter.3972+0x1>
		mainObject.schedulerNFCRunFlag = TRUE;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 70 3b 	sts	0x3B70, r24	; 0x803b70 <mainObject+0x1>
     8b8:	18 c0       	rjmp	.+48     	; 0x8ea <__vector_8+0x62>
	}
	else if(schedulerRunCounter >= ONE_MINUTE_TIME)
     8ba:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
     8be:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__data_start+0x1>
     8c2:	80 36       	cpi	r24, 0x60	; 96
     8c4:	2a ee       	ldi	r18, 0xEA	; 234
     8c6:	92 07       	cpc	r25, r18
     8c8:	58 f0       	brcs	.+22     	; 0x8e0 <__vector_8+0x58>
	{
		schedulerRunCounter = 0;
     8ca:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
     8ce:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <__data_start+0x1>
		schedulerTimeCounter++;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <schedulerTimeCounter.3972>
     8da:	90 93 6b 3a 	sts	0x3A6B, r25	; 0x803a6b <schedulerTimeCounter.3972+0x1>
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <__vector_8+0x62>
	}
	else
	{
		schedulerRunCounter++;
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     8e6:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
	}
	//Wait counter for NFC wait for write
	if(oNFC.schedulerNFCWriteWait == TRUE) {
     8ea:	80 91 77 3b 	lds	r24, 0x3B77	; 0x803b77 <oNFC+0x6>
     8ee:	88 23       	and	r24, r24
     8f0:	89 f0       	breq	.+34     	; 0x914 <__vector_8+0x8c>
		schedulerWaitCounter++;
     8f2:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <schedulerWaitCounter.3973>
     8f6:	90 91 69 3a 	lds	r25, 0x3A69	; 0x803a69 <schedulerWaitCounter.3973+0x1>
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	80 93 68 3a 	sts	0x3A68, r24	; 0x803a68 <schedulerWaitCounter.3973>
     900:	90 93 69 3a 	sts	0x3A69, r25	; 0x803a69 <schedulerWaitCounter.3973+0x1>
		if(schedulerWaitCounter >= TIME_6_MSEC) {
     904:	06 97       	sbiw	r24, 0x06	; 6
     906:	30 f0       	brcs	.+12     	; 0x914 <__vector_8+0x8c>
			oNFC.schedulerNFCWriteWait = FALSE;
     908:	10 92 77 3b 	sts	0x3B77, r1	; 0x803b77 <oNFC+0x6>
			schedulerWaitCounter = 0;
     90c:	10 92 68 3a 	sts	0x3A68, r1	; 0x803a68 <schedulerWaitCounter.3973>
     910:	10 92 69 3a 	sts	0x3A69, r1	; 0x803a69 <schedulerWaitCounter.3973+0x1>
		}
	}
	
	if (oMinSlave.uart.modbusReSync) 
     914:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <oMinSlave+0x2f>
     918:	88 23       	and	r24, r24
     91a:	19 f0       	breq	.+6      	; 0x922 <__vector_8+0x9a>
	{	// Count for no MIN UART transmission lately
		oMinSlave.uart.modbusReSync--;
     91c:	81 50       	subi	r24, 0x01	; 1
     91e:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <oMinSlave+0x2f>
	}

	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <SDA_Write>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void SDA_Write(unsigned char val){
	if(val)	{
     938:	88 23       	and	r24, r24
     93a:	11 f0       	breq	.+4      	; 0x940 <SDA_Write+0x8>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     93c:	29 9a       	sbi	0x05, 1	; 5
     93e:	08 95       	ret
	} else {
		VPORTB.OUT &= ~(1 << pin);
     940:	29 98       	cbi	0x05, 1	; 5
     942:	08 95       	ret

00000944 <SDA_Read>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     944:	86 b1       	in	r24, 0x06	; 6

 ----------------------------------------------------------------------------------------
 */
uint8_t SDA_Read(void){
	return SDA_get_level();
}
     946:	86 95       	lsr	r24
     948:	81 70       	andi	r24, 0x01	; 1
     94a:	08 95       	ret

0000094c <Hardware_Delay>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman
  ----------------------------------------------------------------------------------------
 */

void Hardware_Delay(int val) {
	for(int i = 0; i < val; i++){
     94c:	18 16       	cp	r1, r24
     94e:	19 06       	cpc	r1, r25
     950:	44 f4       	brge	.+16     	; 0x962 <Hardware_Delay+0x16>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
		asm("NOP");		
     956:	00 00       	nop
 1.00    11-04-2019  Original code                                     Anish Venkataraman
  ----------------------------------------------------------------------------------------
 */

void Hardware_Delay(int val) {
	for(int i = 0; i < val; i++){
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	82 17       	cp	r24, r18
     95e:	93 07       	cpc	r25, r19
     960:	d1 f7       	brne	.-12     	; 0x956 <Hardware_Delay+0xa>
     962:	08 95       	ret

00000964 <USART_RxChar>:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
uint8_t USART_RxChar(byte *val) {
     964:	dc 01       	movw	r26, r24

	if(rxChars > 0) {
     966:	90 91 6d 3b 	lds	r25, 0x3B6D	; 0x803b6d <rxChars>
     96a:	99 23       	and	r25, r25
     96c:	89 f0       	breq	.+34     	; 0x990 <USART_RxChar+0x2c>
		rxChars -= 1;
     96e:	91 50       	subi	r25, 0x01	; 1
     970:	90 93 6d 3b 	sts	0x3B6D, r25	; 0x803b6d <rxChars>
		*val = rxBuffer[tempIndex];
     974:	e0 91 6c 3a 	lds	r30, 0x3A6C	; 0x803a6c <tempIndex>
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	e2 59       	subi	r30, 0x92	; 146
     97c:	f5 4c       	sbci	r31, 0xC5	; 197
     97e:	80 81       	ld	r24, Z
     980:	8c 93       	st	X, r24
		tempIndex++;
     982:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <tempIndex>
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	80 93 6c 3a 	sts	0x3A6C, r24	; 0x803a6c <tempIndex>
		rxIndex = 0;
		memset(rxBuffer, 0, RX_BUFFER_LENGTH);
		return ERR;
	}

	return NO_ERR;
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	08 95       	ret
		rxChars -= 1;
		*val = rxBuffer[tempIndex];
		tempIndex++;
	}
	else {
		*val = 0;
     990:	1c 92       	st	X, r1
		tempIndex = 0;
     992:	10 92 6c 3a 	sts	0x3A6C, r1	; 0x803a6c <tempIndex>
		rxIndex = 0;
     996:	10 92 6d 3a 	sts	0x3A6D, r1	; 0x803a6d <rxIndex>
		memset(rxBuffer, 0, RX_BUFFER_LENGTH);
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	ee e6       	ldi	r30, 0x6E	; 110
     99e:	fa e3       	ldi	r31, 0x3A	; 58
     9a0:	df 01       	movw	r26, r30
     9a2:	1d 92       	st	X+, r1
     9a4:	8a 95       	dec	r24
     9a6:	e9 f7       	brne	.-6      	; 0x9a2 <USART_RxChar+0x3e>
		return ERR;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
	}

	return NO_ERR;
}
     9aa:	08 95       	ret

000009ac <USART_GetCharsInRxBuf>:
 ----------------------------------------------------------------------------------------
 */

uint8_t USART_GetCharsInRxBuf(void){
	return rxChars;
}
     9ac:	80 91 6d 3b 	lds	r24, 0x3B6D	; 0x803b6d <rxChars>
     9b0:	08 95       	ret

000009b2 <USART_StoreData>:

 ----------------------------------------------------------------------------------------
 */

void USART_StoreData(void) {
	if(USART0.STATUS & USART_RXCIF_bm) { //checks if the interrupt flag is set
     9b2:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
     9b6:	88 23       	and	r24, r24
     9b8:	a4 f4       	brge	.+40     	; 0x9e2 <USART_StoreData+0x30>
		byte data = USART0.RXDATAL;		//stores data 
     9ba:	e0 e0       	ldi	r30, 0x00	; 0
     9bc:	f8 e0       	ldi	r31, 0x08	; 8
     9be:	80 81       	ld	r24, Z
		USART0.STATUS = USART_RXCIF_bm;	//clears the the receive interrupt status bit
     9c0:	90 e8       	ldi	r25, 0x80	; 128
     9c2:	94 83       	std	Z+4, r25	; 0x04
		if(rxIndex <= RX_BUFFER_LENGTH){
			rxBuffer[rxIndex++] = data;
     9c4:	e0 91 6d 3a 	lds	r30, 0x3A6D	; 0x803a6d <rxIndex>
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	9e 0f       	add	r25, r30
     9cc:	90 93 6d 3a 	sts	0x3A6D, r25	; 0x803a6d <rxIndex>
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	e2 59       	subi	r30, 0x92	; 146
     9d4:	f5 4c       	sbci	r31, 0xC5	; 197
     9d6:	80 83       	st	Z, r24
			rxChars += 1;					//increments the receive charachter
     9d8:	80 91 6d 3b 	lds	r24, 0x3B6D	; 0x803b6d <rxChars>
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 6d 3b 	sts	0x3B6D, r24	; 0x803b6d <rxChars>
     9e2:	08 95       	ret

000009e4 <USART_ClearRxBuffer>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void USART_ClearRxBuffer(void) {
	memset(rxBuffer, 0, RX_BUFFER_LENGTH);
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	ee e6       	ldi	r30, 0x6E	; 110
     9e8:	fa e3       	ldi	r31, 0x3A	; 58
     9ea:	df 01       	movw	r26, r30
     9ec:	1d 92       	st	X+, r1
     9ee:	8a 95       	dec	r24
     9f0:	e9 f7       	brne	.-6      	; 0x9ec <USART_ClearRxBuffer+0x8>
	rxChars = 0;
     9f2:	10 92 6d 3b 	sts	0x3B6D, r1	; 0x803b6d <rxChars>
	rxIndex = 0;
     9f6:	10 92 6d 3a 	sts	0x3A6D, r1	; 0x803a6d <rxIndex>
	tempIndex = 0;
     9fa:	10 92 6c 3a 	sts	0x3A6C, r1	; 0x803a6c <tempIndex>
     9fe:	08 95       	ret

00000a00 <USART_SendChar>:
 *-------*-----------*---------------------------------------------------*---------------
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void USART_SendChar(byte *str) {
     a00:	dc 01       	movw	r26, r24
	while (!(USART0.STATUS & USART_DREIF_bm));
     a02:	e0 e0       	ldi	r30, 0x00	; 0
     a04:	f8 e0       	ldi	r31, 0x08	; 8
     a06:	94 81       	ldd	r25, Z+4	; 0x04
     a08:	95 ff       	sbrs	r25, 5
     a0a:	fd cf       	rjmp	.-6      	; 0xa06 <USART_SendChar+0x6>
	USART0.TXDATAL = *str;
     a0c:	8c 91       	ld	r24, X
     a0e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
     a12:	08 95       	ret

00000a14 <USART_SetTxInterrupt>:
 1.00    11-04-2019  Original code                                     Anish Venkataraman

 ----------------------------------------------------------------------------------------
 */
void USART_SetTxInterrupt(void) {
	USART0.STATUS |= (1<<USART_TXCIE_bp); 
     a14:	e0 e0       	ldi	r30, 0x00	; 0
     a16:	f8 e0       	ldi	r31, 0x08	; 8
     a18:	84 81       	ldd	r24, Z+4	; 0x04
     a1a:	80 64       	ori	r24, 0x40	; 64
     a1c:	84 83       	std	Z+4, r24	; 0x04
     a1e:	08 95       	ret

00000a20 <main>:
#include <atmel_start.h>
#include "MyMain.h"
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     a20:	0e 94 e5 00 	call	0x1ca	; 0x1ca <atmel_start_init>
	MyMain_main();
     a24:	0e 94 93 08 	call	0x1126	; 0x1126 <MyMain_main>
     a28:	ff cf       	rjmp	.-2      	; 0xa28 <main+0x8>

00000a2a <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret

00000a2e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	68 ed       	ldi	r22, 0xD8	; 216
     a32:	81 e6       	ldi	r24, 0x61	; 97
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 66 05 	call	0xacc	; 0xacc <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret

00000a3e <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     a3e:	78 94       	sei

	return 0;
}
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 95       	ret

00000a44 <mcu_init>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     a44:	e0 e1       	ldi	r30, 0x10	; 16
     a46:	f4 e0       	ldi	r31, 0x04	; 4
     a48:	80 81       	ld	r24, Z
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	81 93       	st	Z+, r24
     a4e:	e8 31       	cpi	r30, 0x18	; 24
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	f8 07       	cpc	r31, r24
     a54:	c9 f7       	brne	.-14     	; 0xa48 <mcu_init+0x4>
     a56:	e0 e3       	ldi	r30, 0x30	; 48
     a58:	f4 e0       	ldi	r31, 0x04	; 4
     a5a:	80 81       	ld	r24, Z
     a5c:	88 60       	ori	r24, 0x08	; 8
     a5e:	81 93       	st	Z+, r24
     a60:	e8 33       	cpi	r30, 0x38	; 56
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	f8 07       	cpc	r31, r24
     a66:	c9 f7       	brne	.-14     	; 0xa5a <mcu_init+0x16>
     a68:	e0 e5       	ldi	r30, 0x50	; 80
     a6a:	f4 e0       	ldi	r31, 0x04	; 4
     a6c:	80 81       	ld	r24, Z
     a6e:	88 60       	ori	r24, 0x08	; 8
     a70:	81 93       	st	Z+, r24
     a72:	e8 35       	cpi	r30, 0x58	; 88
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	f8 07       	cpc	r31, r24
     a78:	c9 f7       	brne	.-14     	; 0xa6c <mcu_init+0x28>
     a7a:	08 95       	ret

00000a7c <USART_0_initialization>:
     a7c:	02 98       	cbi	0x00, 2	; 0
     a7e:	e2 e1       	ldi	r30, 0x12	; 18
     a80:	f4 e0       	ldi	r31, 0x04	; 4
     a82:	80 81       	ld	r24, Z
     a84:	87 7f       	andi	r24, 0xF7	; 247
     a86:	80 83       	st	Z, r24
     a88:	e0 e0       	ldi	r30, 0x00	; 0
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	81 81       	ldd	r24, Z+1	; 0x01
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	81 83       	std	Z+1, r24	; 0x01
     a92:	01 9a       	sbi	0x00, 1	; 0
     a94:	09 98       	cbi	0x01, 1	; 1
     a96:	81 81       	ldd	r24, Z+1	; 0x01
     a98:	81 60       	ori	r24, 0x01	; 1
     a9a:	81 83       	std	Z+1, r24	; 0x01
     a9c:	0e 94 77 05 	call	0xaee	; 0xaee <USART_0_init>
     aa0:	08 95       	ret

00000aa2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     aa2:	0e 94 22 05 	call	0xa44	; 0xa44 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     aa6:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     aa8:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     aaa:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     aac:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     aae:	24 9a       	sbi	0x04, 4	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     ab0:	2c 98       	cbi	0x05, 4	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
     ab2:	0e 94 17 05 	call	0xa2e	; 0xa2e <CLKCTRL_init>

	USART_0_initialization();
     ab6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <USART_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     aba:	0e 94 6c 05 	call	0xad8	; 0xad8 <TIMER_0_init>

	USART_0_initialization();

	TIMER_0_initialization();

	CPUINT_init();
     abe:	0e 94 1f 05 	call	0xa3e	; 0xa3e <CPUINT_init>

	SLPCTRL_init();
     ac2:	0e 94 6a 05 	call	0xad4	; 0xad4 <SLPCTRL_init>

	BOD_init();
     ac6:	0e 94 15 05 	call	0xa2a	; 0xa2a <BOD_init>
     aca:	08 95       	ret

00000acc <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     acc:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     ace:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     ad0:	40 83       	st	Z, r20
	ret                             // Return to caller
     ad2:	08 95       	ret

00000ad4 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret

00000ad8 <TIMER_0_init>:
	// TCA0.SINGLE.DBGCTRL = 0 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: disabled */

	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTEI_bp /* Count on Event Input: disabled */
	//		 | TCA_SINGLE_EVACT_POSEDGE_gc; /* Count on positive edge event */

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: disabled */
     ad8:	e0 e0       	ldi	r30, 0x00	; 0
     ada:	fa e0       	ldi	r31, 0x0A	; 10
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: enabled */

	TCA0.SINGLE.PER = 0x4e1e; /* Period: 0x4e1f */
     ae0:	2e e1       	ldi	r18, 0x1E	; 30
     ae2:	3e e4       	ldi	r19, 0x4E	; 78
     ae4:	26 a3       	std	Z+38, r18	; 0x26
     ae6:	37 a3       	std	Z+39, r19	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc    /* System Clock */
     ae8:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp; /* Module Enable: enabled */

	return 0;
}
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret

00000aee <USART_0_init>:


int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
     aee:	e0 e0       	ldi	r30, 0x00	; 0
     af0:	f8 e0       	ldi	r31, 0x08	; 8
     af2:	86 eb       	ldi	r24, 0xB6	; 182
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	80 87       	std	Z+8, r24	; 0x08
     af8:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
     afa:	80 ec       	ldi	r24, 0xC0	; 192
     afc:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 1 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: enabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     afe:	86 83       	std	Z+6, r24	; 0x06
	               | 1 << USART_RXEN_bp     /* Reciever enable: enabled */
	               | USART_RXMODE_NORMAL_gc /* Normal mode */
	               | 0 << USART_SFDEN_bp    /* Start Frame Detection Enable: disabled */
	               | 1 << USART_TXEN_bp;    /* Transmitter Enable: enabled */

	 USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
     b00:	83 e2       	ldi	r24, 0x23	; 35
     b02:	87 83       	std	Z+7, r24	; 0x07
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret

00000b08 <I2cDrive_Start>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     b08:	21 9a       	sbi	0x04, 1	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     b0a:	28 9a       	sbi	0x05, 0	; 5
     b0c:	29 9a       	sbi	0x05, 1	; 5
{
    I2C_SDA_OUTPUT();
    I2C_SCL_OUTPUT();
    I2C_SCL_SetVal();
    I2C_SDA_SetVal();
    I2c_Delay();   
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     b16:	29 98       	cbi	0x05, 1	; 5
    I2C_SDA_ClrVal();
    I2c_Delay();
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
     b20:	28 98       	cbi	0x05, 0	; 5
     b22:	08 95       	ret

00000b24 <I2cDrive_Stop>:
     b24:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     b26:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     b28:	29 98       	cbi	0x05, 1	; 5
void I2cDrive_Stop ( void )
{
    I2C_SCL_ClrVal();
    I2C_SDA_OUTPUT();
    I2C_SDA_ClrVal();
    I2c_Delay();
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     b32:	28 9a       	sbi	0x05, 0	; 5
    I2C_SCL_SetVal();
    I2c_Delay();
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
     b3c:	29 9a       	sbi	0x05, 1	; 5
     b3e:	08 95       	ret

00000b40 <I2cDrive_AckSend>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     b40:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     b42:	29 98       	cbi	0x05, 1	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     b44:	28 9a       	sbi	0x05, 0	; 5
void I2cDrive_AckSend ( void )
{
    I2C_SDA_OUTPUT();
    I2C_SDA_ClrVal();
    I2C_SCL_SetVal(); 
    I2c_Delay();    
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     b4e:	28 98       	cbi	0x05, 0	; 5
    I2C_SCL_ClrVal();
    I2c_Delay();
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
     b58:	08 95       	ret

00000b5a <I2cDrive_NAckSend>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     b5a:	21 9a       	sbi	0x04, 1	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     b5c:	29 9a       	sbi	0x05, 1	; 5
     b5e:	28 9a       	sbi	0x05, 0	; 5
void I2cDrive_NAckSend ( void )
{
    I2C_SDA_OUTPUT();
    I2C_SDA_SetVal();
    I2C_SCL_SetVal(); 
    I2c_Delay();    
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     b68:	28 98       	cbi	0x05, 0	; 5
    I2C_SCL_ClrVal();
    I2c_Delay();
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
     b72:	08 95       	ret

00000b74 <I2cDrive_SendByte>:
---------------------------------------------------------------------------------------
*/
uint8_t e = 0;
uint8_t et = 1;
uint8_t I2cDrive_SendByte ( uint8_t data )
{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	d8 2f       	mov	r29, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     b7a:	21 9a       	sbi	0x04, 1	; 4
     b7c:	c8 e0       	ldi	r28, 0x08	; 8
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     b7e:	28 98       	cbi	0x05, 0	; 5
    uint8_t err = 0;
	
    I2C_SDA_OUTPUT();
    for(cnt = 0; cnt < 8; cnt++) {
        I2C_SCL_ClrVal();                    
        I2C_SDA_PutVal(data_buffer & 0x80); // Set or clear SDA line before SCL line turned high
     b80:	8d 2f       	mov	r24, r29
     b82:	80 78       	andi	r24, 0x80	; 128
     b84:	0e 94 9c 04 	call	0x938	; 0x938 <SDA_Write>
        I2c_Delay();
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     b90:	28 9a       	sbi	0x05, 0	; 5
        I2C_SCL_SetVal();
        I2c_Delay();
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
        data_buffer <<= 1;
     b9a:	dd 0f       	add	r29, r29
     b9c:	c1 50       	subi	r28, 0x01	; 1
    uint8_t data_buffer = data;
    uint8_t timeOut = TIMEOUT;
    uint8_t err = 0;
	
    I2C_SDA_OUTPUT();
    for(cnt = 0; cnt < 8; cnt++) {
     b9e:	79 f7       	brne	.-34     	; 0xb7e <I2cDrive_SendByte+0xa>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     ba0:	28 98       	cbi	0x05, 0	; 5
        I2C_SCL_SetVal();
        I2c_Delay();
        data_buffer <<= 1;
    }
    I2C_SCL_ClrVal();
    I2c_Delay();
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     baa:	29 9a       	sbi	0x05, 1	; 5
     bac:	28 9a       	sbi	0x05, 0	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     bae:	21 98       	cbi	0x04, 1	; 4
	I2C_SDA_SetVal();
    I2C_SCL_SetVal();
    I2C_SDA_INPUT();
	I2c_Delay();
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
uint8_t et = 1;
uint8_t I2cDrive_SendByte ( uint8_t data )
{
    uint8_t cnt;
    uint8_t data_buffer = data;
    uint8_t timeOut = TIMEOUT;
     bb8:	c5 e0       	ldi	r28, 0x05	; 5
    I2C_SCL_SetVal();
    I2C_SDA_INPUT();
	I2c_Delay();
	    // Wait for the ACK signal
	 do{
    	timeOut--;
     bba:	c1 50       	subi	r28, 0x01	; 1
		} while(I2C_SDA_GetVal() && timeOut);
     bbc:	0e 94 a2 04 	call	0x944	; 0x944 <SDA_Read>
     bc0:	88 23       	and	r24, r24
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <I2cDrive_SendByte+0x54>
     bc4:	c1 11       	cpse	r28, r1
     bc6:	f9 cf       	rjmp	.-14     	; 0xbba <I2cDrive_SendByte+0x46>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     bc8:	28 98       	cbi	0x05, 0	; 5
    
	I2C_SCL_ClrVal();
	I2c_Delay();	
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
    if(timeOut == 0) {
        err = 1;
    }

    return err;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	c1 11       	cpse	r28, r1
     bd6:	80 e0       	ldi	r24, 0x00	; 0
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <I2cDrive_ReceiveByte>:
*-------*-----------*---------------------------------------------------*--------------
1.00    4-24-2019   Original code                                       Sun Ran
---------------------------------------------------------------------------------------
*/
uint8_t I2cDrive_ReceiveByte ( void )
{
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     be6:	21 98       	cbi	0x04, 1	; 4
     be8:	c8 e0       	ldi	r28, 0x08	; 8
     bea:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t data = 0;
    uint8_t mask = 0;
    I2C_SDA_INPUT();
    for(mask = 0x80; mask > 0; mask >>= 1) {
     bec:	10 e8       	ldi	r17, 0x80	; 128
1.00    4-24-2019   Original code                                       Sun Ran
---------------------------------------------------------------------------------------
*/
uint8_t I2cDrive_ReceiveByte ( void )
{
    uint8_t data = 0;
     bee:	00 e0       	ldi	r16, 0x00	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     bf0:	28 9a       	sbi	0x05, 0	; 5
    uint8_t mask = 0;
    I2C_SDA_INPUT();
    for(mask = 0x80; mask > 0; mask >>= 1) {
        I2C_SCL_SetVal();
        I2c_Delay();
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
        if(I2C_SDA_GetVal()) {  // Read SDA line when SCL line is high
     bfa:	0e 94 a2 04 	call	0x944	; 0x944 <SDA_Read>
     bfe:	81 11       	cpse	r24, r1
            data |= mask;
     c00:	01 2b       	or	r16, r17
     c02:	28 9a       	sbi	0x05, 0	; 5
        }

        I2C_SCL_SetVal();
        I2c_Delay();
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     c0c:	28 98       	cbi	0x05, 0	; 5
        I2C_SCL_ClrVal();
        I2c_Delay();     
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 a6 04 	call	0x94c	; 0x94c <Hardware_Delay>
uint8_t I2cDrive_ReceiveByte ( void )
{
    uint8_t data = 0;
    uint8_t mask = 0;
    I2C_SDA_INPUT();
    for(mask = 0x80; mask > 0; mask >>= 1) {
     c16:	16 95       	lsr	r17
     c18:	21 97       	sbiw	r28, 0x01	; 1
     c1a:	51 f7       	brne	.-44     	; 0xbf0 <I2cDrive_ReceiveByte+0x12>
        I2C_SCL_ClrVal();
        I2c_Delay();     
    }
	
    return data;
     c1c:	80 2f       	mov	r24, r16
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <MinUart_init>:
1.00	07-18-2012	Initial Write										Tom Van Sistine
1.01	12-09-2019	Removed change of baud rate module	 			   Anish Venkataraman
---------------------------------------------------------------------------------------
*/
void MinUart_init(MinUart_STYP *uart) {
	uart->processPacketFlag = FALSE;
     c28:	fc 01       	movw	r30, r24
     c2a:	e6 5f       	subi	r30, 0xF6	; 246
     c2c:	fe 4f       	sbci	r31, 0xFE	; 254
     c2e:	10 82       	st	Z, r1
	uart->currentState = (uint8_t)   WAIT_FOR_RESYNC;
     c30:	38 96       	adiw	r30, 0x08	; 8
     c32:	10 82       	st	Z, r1
	uart->rxBufferIndex = 0U;
     c34:	33 97       	sbiw	r30, 0x03	; 3
     c36:	10 82       	st	Z, r1
     c38:	11 82       	std	Z+1, r1	; 0x01
	uart->badCrcFlag = 0U;
     c3a:	33 97       	sbiw	r30, 0x03	; 3
     c3c:	10 82       	st	Z, r1
	uart->dataLength = 10;
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	2a e0       	ldi	r18, 0x0A	; 10
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	20 83       	st	Z, r18
     c46:	31 83       	std	Z+1, r19	; 0x01

	// Reinitialize the hardware UART
	HardwareUart_Init();  
     c48:	0e 94 77 05 	call	0xaee	; 0xaee <USART_0_init>
     c4c:	08 95       	ret

00000c4e <get_crc_16>:
 ----------------------------------------------------------------------------------------
 */
uint16_t crc_16_table[16] = {0x0000, 0xCC01, 0xD801, 0x1400, 0xF001, 0x3C00, 0x2800, 0xE401,
  0xA001, 0x6C00, 0x7800, 0xB401, 0x5000, 0x9C01, 0x8801, 0x4400 };

uint16_t get_crc_16 (uint16_t start, uint8_t *p, uint16_t n) {
     c4e:	db 01       	movw	r26, r22
uint16_t crc = start;
uint16_t r;

  /* while there is more data to process */
  while (n-- > 0) {
     c50:	41 15       	cp	r20, r1
     c52:	51 05       	cpc	r21, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <get_crc_16+0xa>
     c56:	41 c0       	rjmp	.+130    	; 0xcda <get_crc_16+0x8c>
     c58:	46 0f       	add	r20, r22
     c5a:	57 1f       	adc	r21, r23

    /* compute checksum of lower four bits of *p */
    r = crc_16_table[crc & 0xF];
     c5c:	fc 01       	movw	r30, r24
     c5e:	ef 70       	andi	r30, 0x0F	; 15
     c60:	ff 27       	eor	r31, r31
     c62:	ee 0f       	add	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	ee 5f       	subi	r30, 0xFE	; 254
     c68:	f7 4c       	sbci	r31, 0xC7	; 199
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[*p & 0xF];
     c6a:	92 95       	swap	r25
     c6c:	82 95       	swap	r24
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	89 27       	eor	r24, r25
     c72:	9f 70       	andi	r25, 0x0F	; 15
     c74:	89 27       	eor	r24, r25
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	28 27       	eor	r18, r24
     c7c:	39 27       	eor	r19, r25
     c7e:	9d 91       	ld	r25, X+
     c80:	e9 2f       	mov	r30, r25
     c82:	ef 70       	andi	r30, 0x0F	; 15
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	ee 5f       	subi	r30, 0xFE	; 254
     c8c:	f7 4c       	sbci	r31, 0xC7	; 199
     c8e:	01 90       	ld	r0, Z+
     c90:	f0 81       	ld	r31, Z
     c92:	e0 2d       	mov	r30, r0
     c94:	2e 27       	eor	r18, r30
     c96:	3f 27       	eor	r19, r31

    /* now compute checksum of upper four bits of *p */
    r = crc_16_table[crc & 0xF];
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[(*p >> 4) & 0xF];
     c98:	92 95       	swap	r25
     c9a:	9f 70       	andi	r25, 0x0F	; 15
     c9c:	e9 2f       	mov	r30, r25
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ee 5f       	subi	r30, 0xFE	; 254
     ca6:	f7 4c       	sbci	r31, 0xC7	; 199
     ca8:	b9 01       	movw	r22, r18
     caa:	72 95       	swap	r23
     cac:	62 95       	swap	r22
     cae:	6f 70       	andi	r22, 0x0F	; 15
     cb0:	67 27       	eor	r22, r23
     cb2:	7f 70       	andi	r23, 0x0F	; 15
     cb4:	67 27       	eor	r22, r23
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	86 27       	eor	r24, r22
     cbc:	97 27       	eor	r25, r23
    r = crc_16_table[crc & 0xF];
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[*p & 0xF];

    /* now compute checksum of upper four bits of *p */
    r = crc_16_table[crc & 0xF];
     cbe:	f9 01       	movw	r30, r18
     cc0:	ef 70       	andi	r30, 0x0F	; 15
     cc2:	ff 27       	eor	r31, r31
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ee 5f       	subi	r30, 0xFE	; 254
     cca:	f7 4c       	sbci	r31, 0xC7	; 199
    crc = (crc >> 4) & 0x0FFF;
    crc = crc ^ r ^ crc_16_table[(*p >> 4) & 0xF];
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	86 27       	eor	r24, r22
     cd2:	97 27       	eor	r25, r23
uint16_t get_crc_16 (uint16_t start, uint8_t *p, uint16_t n) {
uint16_t crc = start;
uint16_t r;

  /* while there is more data to process */
  while (n-- > 0) {
     cd4:	4a 17       	cp	r20, r26
     cd6:	5b 07       	cpc	r21, r27
     cd8:	09 f6       	brne	.-126    	; 0xc5c <get_crc_16+0xe>
    /* next... */
    p++;
  }

  return(crc);
}
     cda:	08 95       	ret

00000cdc <MinUart_serviceRx>:
1.00	07-18-2012	Initial Write										Tom Van Sistine
1.01	12-09-2019	Removed change of baud rate module	 			   Anish Venkataraman
---------------------------------------------------------------------------------------
*/

void MinUart_serviceRx(MinUart_STYP *uart) {
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24

static uint8_t rxByte = 0;			// Because a pointer is passed with HardwareUart_RecvChar() should not be auto-variable.
uint8_t error = 0;
uint16_t crc;
	// Get character from buffer
	error = HardwareUart_RecvChar(rxByte);
     cea:	8e e6       	ldi	r24, 0x6E	; 110
     cec:	9b e3       	ldi	r25, 0x3B	; 59
     cee:	0e 94 b2 04 	call	0x964	; 0x964 <USART_RxChar>
	
	if (error) {
     cf2:	88 23       	and	r24, r24
     cf4:	a1 f0       	breq	.+40     	; 0xd1e <MinUart_serviceRx+0x42>
		uart->currentState = WAIT_FOR_RESYNC;	// If in the middle of a message, this will wait until the end.
     cf6:	fe 01       	movw	r30, r28
     cf8:	ee 5e       	subi	r30, 0xEE	; 238
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	10 82       	st	Z, r1
		HardwareUart_clearRxBuf();
     cfe:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <USART_ClearRxBuffer>
		// Reset stuff needed in next character received is start of new message.
		uart->badCrcFlag = 0;
     d02:	fe 01       	movw	r30, r28
     d04:	e4 5f       	subi	r30, 0xF4	; 244
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	10 82       	st	Z, r1
		uart->rxBufferIndex = 0;
     d0a:	33 96       	adiw	r30, 0x03	; 3
     d0c:	10 82       	st	Z, r1
     d0e:	11 82       	std	Z+1, r1	; 0x01
		uart->dataLength = 10;
     d10:	c3 5f       	subi	r28, 0xF3	; 243
     d12:	de 4f       	sbci	r29, 0xFE	; 254
     d14:	8a e0       	ldi	r24, 0x0A	; 10
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	88 83       	st	Y, r24
     d1a:	99 83       	std	Y+1, r25	; 0x01
		return;
     d1c:	05 c1       	rjmp	.+522    	; 0xf28 <MinUart_serviceRx+0x24c>
	// Check if modbusReSync is counter is 0 which indicates start of new message.  If between
	// messages, it stays in WAIT_FOR_RESYNC state until modbusReSync counter is 0.
	// If modbusReSync is 0, then, regardless of state, force it to state HANDLE_DEVICE_ID to re-
	// synchronize communication.

    if (uart->modbusReSync == 0) {
     d1e:	88 81       	ld	r24, Y
     d20:	81 11       	cpse	r24, r1
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <MinUart_serviceRx+0x66>
        uart->currentState = PARSE_INCOMING;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	fe 01       	movw	r30, r28
     d28:	ee 5e       	subi	r30, 0xEE	; 238
     d2a:	fe 4f       	sbci	r31, 0xFE	; 254
     d2c:	80 83       	st	Z, r24
		uart->badCrcFlag = 0;
     d2e:	36 97       	sbiw	r30, 0x06	; 6
     d30:	10 82       	st	Z, r1
		uart->rxBufferIndex = 0;
     d32:	33 96       	adiw	r30, 0x03	; 3
     d34:	10 82       	st	Z, r1
     d36:	11 82       	std	Z+1, r1	; 0x01
		uart->dataLength = 10;
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	32 97       	sbiw	r30, 0x02	; 2
     d3e:	80 83       	st	Z, r24
     d40:	91 83       	std	Z+1, r25	; 0x01
    }
    uart->modbusReSync = MODBUS_RESYNC_LOAD;	// Set for three 1msec interrupts that are asynchronous to MIN_OnRxChar()
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	88 83       	st	Y, r24
    											// to insure a minimum of 2 msec without receiving byte to indicate resync.

	// Run the UART character receive method state machine which parses the various types
	// of messages from the Master device
	switch (uart->currentState) {
     d46:	fe 01       	movw	r30, r28
     d48:	ee 5e       	subi	r30, 0xEE	; 238
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	80 81       	ld	r24, Z
     d4e:	88 23       	and	r24, r24
     d50:	19 f0       	breq	.+6      	; 0xd58 <MinUart_serviceRx+0x7c>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	89 f0       	breq	.+34     	; 0xd78 <MinUart_serviceRx+0x9c>
     d56:	e8 c0       	rjmp	.+464    	; 0xf28 <MinUart_serviceRx+0x24c>

	case WAIT_FOR_RESYNC:

		// Waiting for resync, i.e. no characters for 2 msec.
		uart->badCrcFlag = 0;
     d58:	fe 01       	movw	r30, r28
     d5a:	e4 5f       	subi	r30, 0xF4	; 244
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	10 82       	st	Z, r1
		uart->rxBufferIndex = 0;
     d60:	33 96       	adiw	r30, 0x03	; 3
     d62:	10 82       	st	Z, r1
     d64:	11 82       	std	Z+1, r1	; 0x01
		uart->dataLength = 10;
     d66:	c3 5f       	subi	r28, 0xF3	; 243
     d68:	de 4f       	sbci	r29, 0xFE	; 254
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	88 83       	st	Y, r24
     d70:	99 83       	std	Y+1, r25	; 0x01
		USART_ClearRxBuffer();
     d72:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <USART_ClearRxBuffer>
		break;
     d76:	d8 c0       	rjmp	.+432    	; 0xf28 <MinUart_serviceRx+0x24c>
	case PARSE_INCOMING:

		// Resync timeout elapsed

		// Save received byte
		uart->rxBuffer[uart->rxBufferIndex] = rxByte;
     d78:	fe 01       	movw	r30, r28
     d7a:	e1 5f       	subi	r30, 0xF1	; 241
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	e0 91 6e 3b 	lds	r30, 0x3B6E	; 0x803b6e <rxByte.3800>
     d86:	de 01       	movw	r26, r28
     d88:	a8 0f       	add	r26, r24
     d8a:	b9 1f       	adc	r27, r25
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	ec 93       	st	X, r30
		
		// Check if slave address matches this slave device
		if (uart->rxBufferIndex == 0) {
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	79 f4       	brne	.+30     	; 0xdb2 <MinUart_serviceRx+0xd6>
			if((rxByte != uart->moduleAddress) && rxByte != (uint8_t) MIN_MASTER_BROADCAST) {
     d94:	de 01       	movw	r26, r28
     d96:	a7 5f       	subi	r26, 0xF7	; 247
     d98:	be 4f       	sbci	r27, 0xFE	; 254
     d9a:	8c 91       	ld	r24, X
     d9c:	e8 17       	cp	r30, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <MinUart_serviceRx+0xc6>
     da0:	bb c0       	rjmp	.+374    	; 0xf18 <MinUart_serviceRx+0x23c>
     da2:	ee 23       	and	r30, r30
     da4:	09 f4       	brne	.+2      	; 0xda8 <MinUart_serviceRx+0xcc>
     da6:	b8 c0       	rjmp	.+368    	; 0xf18 <MinUart_serviceRx+0x23c>
				uart->currentState = WAIT_FOR_RESYNC;  // Message not for this slave.
     da8:	fe 01       	movw	r30, r28
     daa:	ee 5e       	subi	r30, 0xEE	; 238
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	10 82       	st	Z, r1
     db0:	b3 c0       	rjmp	.+358    	; 0xf18 <MinUart_serviceRx+0x23c>
			}
		}
		
		// Check if FC code then set expected number of bytes
		else if (uart->rxBufferIndex == (uint8_t) MIN_FUNCTION_CODE_INDEX) {
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	09 f0       	breq	.+2      	; 0xdb8 <MinUart_serviceRx+0xdc>
     db6:	4d c0       	rjmp	.+154    	; 0xe52 <MinUart_serviceRx+0x176>
			uart->functionCode = rxByte;
     db8:	de 01       	movw	r26, r28
     dba:	af 5e       	subi	r26, 0xEF	; 239
     dbc:	be 4f       	sbci	r27, 0xFE	; 254
     dbe:	ec 93       	st	X, r30
			switch (uart->functionCode) {
     dc0:	8e 2f       	mov	r24, r30
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	33 97       	sbiw	r30, 0x03	; 3
     dc8:	e4 34       	cpi	r30, 0x44	; 68
     dca:	f1 05       	cpc	r31, r1
     dcc:	e0 f5       	brcc	.+120    	; 0xe46 <MinUart_serviceRx+0x16a>
     dce:	ee 57       	subi	r30, 0x7E	; 126
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__tablejump2__>

			case MIN_FC03:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC03;
     dd6:	88 e0       	ldi	r24, 0x08	; 8
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fe 01       	movw	r30, r28
     ddc:	e3 5f       	subi	r30, 0xF3	; 243
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	80 83       	st	Z, r24
     de2:	91 83       	std	Z+1, r25	; 0x01
				break;
     de4:	58 c0       	rjmp	.+176    	; 0xe96 <MinUart_serviceRx+0x1ba>

			case MIN_FC06:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC06;
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	fe 01       	movw	r30, r28
     dec:	e3 5f       	subi	r30, 0xF3	; 243
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	80 83       	st	Z, r24
     df2:	91 83       	std	Z+1, r25	; 0x01
				break;
     df4:	50 c0       	rjmp	.+160    	; 0xe96 <MinUart_serviceRx+0x1ba>

			case MIN_FC16:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC16;
     df6:	8b e0       	ldi	r24, 0x0B	; 11
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fe 01       	movw	r30, r28
     dfc:	e3 5f       	subi	r30, 0xF3	; 243
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	80 83       	st	Z, r24
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	48 c0       	rjmp	.+144    	; 0xe96 <MinUart_serviceRx+0x1ba>
				break;

			case MIN_FC65_SLAVE_POLL:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC65;
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	fe 01       	movw	r30, r28
     e0c:	e3 5f       	subi	r30, 0xF3	; 243
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	80 83       	st	Z, r24
     e12:	91 83       	std	Z+1, r25	; 0x01
				break;
     e14:	40 c0       	rjmp	.+128    	; 0xe96 <MinUart_serviceRx+0x1ba>

			case MIN_FC67_DISCOVER:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC67;
     e16:	88 e0       	ldi	r24, 0x08	; 8
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fe 01       	movw	r30, r28
     e1c:	e3 5f       	subi	r30, 0xF3	; 243
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	80 83       	st	Z, r24
     e22:	91 83       	std	Z+1, r25	; 0x01
				break;
     e24:	38 c0       	rjmp	.+112    	; 0xe96 <MinUart_serviceRx+0x1ba>
			
			case MIN_FC69_GET_PRODUCT_INFO:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC69;
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	fe 01       	movw	r30, r28
     e2c:	e3 5f       	subi	r30, 0xF3	; 243
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	80 83       	st	Z, r24
     e32:	91 83       	std	Z+1, r25	; 0x01
				break;
     e34:	30 c0       	rjmp	.+96     	; 0xe96 <MinUart_serviceRx+0x1ba>
				
			case MIN_FC70_STORE_PRODUCT_INFO:
				uart->dataLength = NUMBER_REQUEST_BYTES_FC70;
     e36:	89 e6       	ldi	r24, 0x69	; 105
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fe 01       	movw	r30, r28
     e3c:	e3 5f       	subi	r30, 0xF3	; 243
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 83       	st	Z, r24
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	28 c0       	rjmp	.+80     	; 0xe96 <MinUart_serviceRx+0x1ba>
				break;

			default: // Unknown FC code
				uart->currentState = WAIT_FOR_RESYNC;
     e46:	fe 01       	movw	r30, r28
     e48:	ee 5e       	subi	r30, 0xEE	; 238
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	10 82       	st	Z, r1
				HardwareUart_clearRxBuf();
     e4e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <USART_ClearRxBuffer>
				break;
			}
		}

		// FC16 received and number of data bytes is rxByte?
		if ((uart->functionCode == (uint8_t) MIN_FC16) && (uart->rxBufferIndex == (uint8_t) MIN_FC16_BYTES_TO_RX_INDEX)) {
     e52:	fe 01       	movw	r30, r28
     e54:	ef 5e       	subi	r30, 0xEF	; 239
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	80 81       	ld	r24, Z
     e5a:	80 31       	cpi	r24, 0x10	; 16
     e5c:	69 f4       	brne	.+26     	; 0xe78 <MinUart_serviceRx+0x19c>
     e5e:	32 97       	sbiw	r30, 0x02	; 2
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	06 97       	sbiw	r24, 0x06	; 6
     e66:	b9 f4       	brne	.+46     	; 0xe96 <MinUart_serviceRx+0x1ba>
			
			uart->dataLength = rxByte + 9;
     e68:	32 97       	sbiw	r30, 0x02	; 2
     e6a:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <rxByte.3800>
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	09 96       	adiw	r24, 0x09	; 9
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <MinUart_serviceRx+0x1ba>
		}
		// FC70 received and number of data bytes is rxByte?
		else if((uart->functionCode == (uint8_t) MIN_FC70_STORE_PRODUCT_INFO) && (uart->rxBufferIndex == (uint8_t) MIN_FC70_BYTES_TO_RX_INDEX)){
     e78:	86 34       	cpi	r24, 0x46	; 70
     e7a:	69 f4       	brne	.+26     	; 0xe96 <MinUart_serviceRx+0x1ba>
     e7c:	fe 01       	movw	r30, r28
     e7e:	e1 5f       	subi	r30, 0xF1	; 241
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	02 97       	sbiw	r24, 0x02	; 2
     e88:	31 f4       	brne	.+12     	; 0xe96 <MinUart_serviceRx+0x1ba>
			uart->dataLength = rxByte;
     e8a:	32 97       	sbiw	r30, 0x02	; 2
     e8c:	80 91 6e 3b 	lds	r24, 0x3B6E	; 0x803b6e <rxByte.3800>
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	80 83       	st	Z, r24
     e94:	91 83       	std	Z+1, r25	; 0x01
		}	
		// Increment buffer pointer
		
		uart->rxBufferIndex += 1;
     e96:	fe 01       	movw	r30, r28
     e98:	e1 5f       	subi	r30, 0xF1	; 241
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
		
		// Have all bytes arrived?

		if (uart->rxBufferIndex >= uart->dataLength) {
     ea6:	32 97       	sbiw	r30, 0x02	; 2
     ea8:	00 81       	ld	r16, Z
     eaa:	11 81       	ldd	r17, Z+1	; 0x01
     eac:	80 17       	cp	r24, r16
     eae:	91 07       	cpc	r25, r17
     eb0:	d8 f1       	brcs	.+118    	; 0xf28 <MinUart_serviceRx+0x24c>
            // All bytes received

			// Reset state for next incoming message regardless of CRC check.
			uart->currentState = WAIT_FOR_RESYNC;   // In case extra bytes sent
     eb2:	35 96       	adiw	r30, 0x05	; 5
     eb4:	10 82       	st	Z, r1
			uart->rxBufferIndex = 0;				// Make sure next received character is assumed to be first.
     eb6:	33 97       	sbiw	r30, 0x03	; 3
     eb8:	10 82       	st	Z, r1
     eba:	11 82       	std	Z+1, r1	; 0x01

			// Check CRC, if good signal calling method to process it and reply.
			crc = get_crc_16(0xFFFF, uart->rxBuffer, (uart->dataLength - 2));
     ebc:	78 01       	movw	r14, r16
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	e8 1a       	sub	r14, r24
     ec2:	f1 08       	sbc	r15, r1
     ec4:	a7 01       	movw	r20, r14
     ec6:	be 01       	movw	r22, r28
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	9f ef       	ldi	r25, 0xFF	; 255
     ed0:	0e 94 27 06 	call	0xc4e	; 0xc4e <get_crc_16>
			
			if (crc == (((uint16_t) uart->rxBuffer[uart->dataLength - 1] << 8) +  (uint16_t) uart->rxBuffer[uart->dataLength - 2])) {
     ed4:	fe 01       	movw	r30, r28
     ed6:	e0 0f       	add	r30, r16
     ed8:	f1 1f       	adc	r31, r17
     eda:	20 81       	ld	r18, Z
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	32 2f       	mov	r19, r18
     ee0:	22 27       	eor	r18, r18
     ee2:	fe 01       	movw	r30, r28
     ee4:	ee 0d       	add	r30, r14
     ee6:	ff 1d       	adc	r31, r15
     ee8:	41 81       	ldd	r20, Z+1	; 0x01
     eea:	24 0f       	add	r18, r20
     eec:	31 1d       	adc	r19, r1
     eee:	82 17       	cp	r24, r18
     ef0:	93 07       	cpc	r25, r19
     ef2:	49 f4       	brne	.+18     	; 0xf06 <MinUart_serviceRx+0x22a>
				
		        // CRC is good!
		    	// Set flag to process message upon return to MinSlave_manageMessage()
				uart->badCrcFlag = FALSE;
     ef4:	fe 01       	movw	r30, r28
     ef6:	e4 5f       	subi	r30, 0xF4	; 244
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	10 82       	st	Z, r1
		    	uart->processPacketFlag = TRUE;
     efc:	c6 5f       	subi	r28, 0xF6	; 246
     efe:	de 4f       	sbci	r29, 0xFE	; 254
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	88 83       	st	Y, r24
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <MinUart_serviceRx+0x24c>
			}
			else {
				uart->badCrcFlag = TRUE;
     f06:	fe 01       	movw	r30, r28
     f08:	e4 5f       	subi	r30, 0xF4	; 244
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 83       	st	Z, r24
				uart->processPacketFlag = FALSE;
     f10:	c6 5f       	subi	r28, 0xF6	; 246
     f12:	de 4f       	sbci	r29, 0xFE	; 254
     f14:	18 82       	st	Y, r1
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <MinUart_serviceRx+0x24c>
				break;
			}
		}

		// FC16 received and number of data bytes is rxByte?
		if ((uart->functionCode == (uint8_t) MIN_FC16) && (uart->rxBufferIndex == (uint8_t) MIN_FC16_BYTES_TO_RX_INDEX)) {
     f18:	fe 01       	movw	r30, r28
     f1a:	ef 5e       	subi	r30, 0xEF	; 239
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	80 31       	cpi	r24, 0x10	; 16
     f22:	09 f0       	breq	.+2      	; 0xf26 <MinUart_serviceRx+0x24a>
     f24:	a9 cf       	rjmp	.-174    	; 0xe78 <MinUart_serviceRx+0x19c>
     f26:	b7 cf       	rjmp	.-146    	; 0xe96 <MinUart_serviceRx+0x1ba>
		}

	} // End switch current state


}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	08 95       	ret

00000f36 <MinUart_serviceTx>:
---------------------------------------------------------------------------------------
*/

void MinUart_serviceTx(MinUart_STYP *uart){
	// If the last byte has been transmitted then change the 485 to receive
	MinUart_init(uart);  // Reset everything.
     f36:	0e 94 14 06 	call	0xc28	; 0xc28 <MinUart_init>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     f3a:	0e 98       	cbi	0x01, 6	; 1
     f3c:	08 95       	ret

00000f3e <NFC_InstantaneousWrite>:
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
	data = I2cDrive_ReceiveByte();
	I2cDrive_Stop();
	return data;
}
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	16 2f       	mov	r17, r22
     f48:	07 2f       	mov	r16, r23
     f4a:	c4 2f       	mov	r28, r20
     f4c:	d5 2f       	mov	r29, r21
     f4e:	0e 94 84 05 	call	0xb08	; 0xb08 <I2cDrive_Start>
     f52:	86 ea       	ldi	r24, 0xA6	; 166
     f54:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f58:	80 2f       	mov	r24, r16
     f5a:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f5e:	81 2f       	mov	r24, r17
     f60:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f64:	8d 2f       	mov	r24, r29
     f66:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f6a:	8c 2f       	mov	r24, r28
     f6c:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f70:	0e 94 92 05 	call	0xb24	; 0xb24 <I2cDrive_Stop>
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <NFC_ReadByte>:
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	c8 2f       	mov	r28, r24
     f84:	d9 2f       	mov	r29, r25
     f86:	0e 94 84 05 	call	0xb08	; 0xb08 <I2cDrive_Start>
     f8a:	86 ea       	ldi	r24, 0xA6	; 166
     f8c:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f90:	8d 2f       	mov	r24, r29
     f92:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f96:	8c 2f       	mov	r24, r28
     f98:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     f9c:	0e 94 84 05 	call	0xb08	; 0xb08 <I2cDrive_Start>
     fa0:	87 ea       	ldi	r24, 0xA7	; 167
     fa2:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
     fa6:	0e 94 ef 05 	call	0xbde	; 0xbde <I2cDrive_ReceiveByte>
     faa:	c8 2f       	mov	r28, r24
     fac:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2cDrive_NAckSend>
     fb0:	0e 94 92 05 	call	0xb24	; 0xb24 <I2cDrive_Stop>
     fb4:	8c 2f       	mov	r24, r28
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <NFC_init>:
					 to 0x5a5a
1.02    09-10-2020   Updated the NFC config assignment LSB first     Anish Venkataraman
					 and then MSB
---------------------------------------------------------------------------------------*/

void NFC_init(NFC_STYP *nfc) {
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
	nfc->configuration = NFC_ReadByte(NFC_CONFIG_CODE_MSB) << 8;			//MSB location for configuration
     fc2:	89 e9       	ldi	r24, 0x99	; 153
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <NFC_ReadByte>
     fca:	1f 82       	std	Y+7, r1	; 0x07
     fcc:	88 87       	std	Y+8, r24	; 0x08
	nfc->configuration |= NFC_ReadByte(NFC_CONFIG_CODE_LSB);				//LSB location for configuration
     fce:	88 e9       	ldi	r24, 0x98	; 152
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <NFC_ReadByte>
     fd6:	2f 81       	ldd	r18, Y+7	; 0x07
     fd8:	38 85       	ldd	r19, Y+8	; 0x08
     fda:	a9 01       	movw	r20, r18
     fdc:	48 2b       	or	r20, r24
     fde:	ca 01       	movw	r24, r20
     fe0:	8f 83       	std	Y+7, r24	; 0x07
     fe2:	98 87       	std	Y+8, r25	; 0x08
	//ToDo create a look up table for checking if the config code is valid or not
	if(nfc->configuration > 0){
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	49 f0       	breq	.+18     	; 0xffa <NFC_init+0x3e>
		oMinSlave.slaveRegisters[MIN_SLAVE_MODEL_CONFIGURATION_CODE] = nfc->configuration; //save configuration
     fe8:	e2 e2       	ldi	r30, 0x22	; 34
     fea:	f8 e3       	ldi	r31, 0x38	; 56
     fec:	86 87       	std	Z+14, r24	; 0x0e
     fee:	97 87       	std	Z+15, r25	; 0x0f
		oMinSlave.slaveRegisters[MIN_SLAVE_EEPROM_INIT_VALUE_RNUM] = INITIALIZED; 
     ff0:	8a e5       	ldi	r24, 0x5A	; 90
     ff2:	9a e5       	ldi	r25, 0x5A	; 90
     ff4:	86 83       	std	Z+6, r24	; 0x06
     ff6:	97 83       	std	Z+7, r25	; 0x07
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <NFC_init+0x4a>
	}
	else{
		oMinSlave.slaveRegisters[MIN_SLAVE_MODEL_CONFIGURATION_CODE] = 0; 
     ffa:	e2 e2       	ldi	r30, 0x22	; 34
     ffc:	f8 e3       	ldi	r31, 0x38	; 56
     ffe:	16 86       	std	Z+14, r1	; 0x0e
    1000:	17 86       	std	Z+15, r1	; 0x0f
		oMinSlave.slaveRegisters[MIN_SLAVE_EEPROM_INIT_VALUE_RNUM] = 0;
    1002:	16 82       	std	Z+6, r1	; 0x06
    1004:	17 82       	std	Z+7, r1	; 0x07
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <NFC_SequentialRead>:
 *-------*-----------*-----------------------------------------------*-------------------
1.00    06-26-2020   Original code                                   Anish Venkataraman
1.01    07-07-2020   Removed NFC_STYP parameter passed				 Anish Venkataraman
---------------------------------------------------------------------------------------*/

void NFC_SequentialRead(uint16_t address, uint8_t length, uint8_t *data) {
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	c8 2f       	mov	r28, r24
    101e:	d9 2f       	mov	r29, r25
    1020:	e6 2e       	mov	r14, r22
    1022:	d4 2e       	mov	r13, r20
    1024:	f5 2e       	mov	r15, r21
	uint8_t i;
	I2cDrive_Start();
    1026:	0e 94 84 05 	call	0xb08	; 0xb08 <I2cDrive_Start>
	(void)I2cDrive_SendByte(NFC_ADDRESS_Write);
    102a:	86 ea       	ldi	r24, 0xA6	; 166
    102c:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address >> MSB_MASK);
    1030:	8d 2f       	mov	r24, r29
    1032:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address & LSB_MASK);
    1036:	8c 2f       	mov	r24, r28
    1038:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	//Read Data
	I2cDrive_Start();
    103c:	0e 94 84 05 	call	0xb08	; 0xb08 <I2cDrive_Start>
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
    1040:	87 ea       	ldi	r24, 0xA7	; 167
    1042:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	for(i = 0; i < length; i++){
    1046:	ee 20       	and	r14, r14
    1048:	01 f1       	breq	.+64     	; 0x108a <NFC_SequentialRead+0x7e>
    104a:	0d 2d       	mov	r16, r13
    104c:	1f 2d       	mov	r17, r15
    104e:	cc 24       	eor	r12, r12
    1050:	ca 94       	dec	r12
    1052:	ce 0c       	add	r12, r14
    1054:	d1 2c       	mov	r13, r1
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	c8 1a       	sub	r12, r24
    105a:	d8 0a       	sbc	r13, r24
    105c:	c0 e0       	ldi	r28, 0x00	; 0
    105e:	d0 e0       	ldi	r29, 0x00	; 0
		*data++ = I2cDrive_ReceiveByte();
		if(i < length-1) {
    1060:	f1 2c       	mov	r15, r1
    1062:	e1 e0       	ldi	r30, 0x01	; 1
    1064:	ee 1a       	sub	r14, r30
    1066:	f1 08       	sbc	r15, r1
	(void)I2cDrive_SendByte(address & LSB_MASK);
	//Read Data
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
	for(i = 0; i < length; i++){
		*data++ = I2cDrive_ReceiveByte();
    1068:	0e 94 ef 05 	call	0xbde	; 0xbde <I2cDrive_ReceiveByte>
    106c:	f8 01       	movw	r30, r16
    106e:	81 93       	st	Z+, r24
    1070:	8f 01       	movw	r16, r30
		if(i < length-1) {
    1072:	ce 15       	cp	r28, r14
    1074:	df 05       	cpc	r29, r15
    1076:	1c f4       	brge	.+6      	; 0x107e <NFC_SequentialRead+0x72>
			I2cDrive_AckSend();	//ACK all the bytes received
    1078:	0e 94 a0 05 	call	0xb40	; 0xb40 <I2cDrive_AckSend>
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <NFC_SequentialRead+0x76>
		}
		else{
			I2cDrive_NAckSend();//NAK the last byte received
    107e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2cDrive_NAckSend>
    1082:	21 96       	adiw	r28, 0x01	; 1
	(void)I2cDrive_SendByte(address >> MSB_MASK);
	(void)I2cDrive_SendByte(address & LSB_MASK);
	//Read Data
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Read);
	for(i = 0; i < length; i++){
    1084:	cc 15       	cp	r28, r12
    1086:	dd 05       	cpc	r29, r13
    1088:	79 f7       	brne	.-34     	; 0x1068 <NFC_SequentialRead+0x5c>
		}
		else{
			I2cDrive_NAckSend();//NAK the last byte received
		}
	}
	I2cDrive_Stop();
    108a:	0e 94 92 05 	call	0xb24	; 0xb24 <I2cDrive_Stop>
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	08 95       	ret

000010a0 <NFC_getUpdateBlkAddress>:
		return (BLOCK11_OFFSET + (nfc->update.registerNumber *2));
	}
	else{
		return (BLOCK226_OFFSET + (nfc->update.registerNumber *2));
	}*/
	return (HOLDING_REG_OFFSET + (nfc->update.registerNumber *2));
    10a0:	81 5f       	subi	r24, 0xF1	; 241
    10a2:	9d 4f       	sbci	r25, 0xFD	; 253
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	80 57       	subi	r24, 0x70	; 112
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
}
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	08 95       	ret

000010b4 <NFC_getBroadcastBlkAddress>:
	else{
//		return (BLOCK226_OFFSET + (nfc->broadcast.registerNumber *2));
		return (HOLDING_REG_OFFSET + (nfc->broadcast.registerNumber *2));
	}
	*/
	return (HOLDING_REG_OFFSET + (nfc->broadcast.registerNumber *2));
    10b4:	84 5f       	subi	r24, 0xF4	; 244
    10b6:	9e 4f       	sbci	r25, 0xFE	; 254
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	80 57       	subi	r24, 0x70	; 112
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
}
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	08 95       	ret

000010c8 <NFC_PageWrite>:
=======================================================================================
History:
 *-------*-----------*---------------------------------------------------*--------------
1.00    08-28-2020   Original code                                   Anish Venkataraman
---------------------------------------------------------------------------------------*/
void NFC_PageWrite(uint16_t address, uint8_t *data) {
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	c8 2f       	mov	r28, r24
    10d2:	d9 2f       	mov	r29, r25
    10d4:	8b 01       	movw	r16, r22
	uint8_t i = 0;
	I2cDrive_Start();
    10d6:	0e 94 84 05 	call	0xb08	; 0xb08 <I2cDrive_Start>
	(void)I2cDrive_SendByte(NFC_ADDRESS_Write);
    10da:	86 ea       	ldi	r24, 0xA6	; 166
    10dc:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address >> MSB_MASK);
    10e0:	8d 2f       	mov	r24, r29
    10e2:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	(void)I2cDrive_SendByte(address & LSB_MASK);
    10e6:	8c 2f       	mov	r24, r28
    10e8:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
    10ec:	e8 01       	movw	r28, r16
    10ee:	0c 5f       	subi	r16, 0xFC	; 252
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i = 0; i < BYTES_IN_PAGE; i++){
		I2cDrive_SendByte(*data++);
    10f2:	89 91       	ld	r24, Y+
    10f4:	0e 94 ba 05 	call	0xb74	; 0xb74 <I2cDrive_SendByte>
	uint8_t i = 0;
	I2cDrive_Start();
	(void)I2cDrive_SendByte(NFC_ADDRESS_Write);
	(void)I2cDrive_SendByte(address >> MSB_MASK);
	(void)I2cDrive_SendByte(address & LSB_MASK);
	for(i = 0; i < BYTES_IN_PAGE; i++){
    10f8:	c0 17       	cp	r28, r16
    10fa:	d1 07       	cpc	r29, r17
    10fc:	d1 f7       	brne	.-12     	; 0x10f2 <NFC_PageWrite+0x2a>
		I2cDrive_SendByte(*data++);
	}
	I2cDrive_Stop();
    10fe:	0e 94 92 05 	call	0xb24	; 0xb24 <I2cDrive_Stop>
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	08 95       	ret

0000110c <MyMain_systemInit>:

---------------------------------------------------------------------------------------
*/

void MyMain_systemInit(void){
	LedCtrl_init(&oLed);
    110c:	82 e8       	ldi	r24, 0x82	; 130
    110e:	9e e3       	ldi	r25, 0x3E	; 62
    1110:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LedCtrl_init>
	MinSlave_init(&oMinSlave);
    1114:	82 e2       	ldi	r24, 0x22	; 34
    1116:	98 e3       	ldi	r25, 0x38	; 56
    1118:	0e 94 41 01 	call	0x282	; 0x282 <MinSlave_init>
	NFC_init(&oNFC);
    111c:	81 e7       	ldi	r24, 0x71	; 113
    111e:	9b e3       	ldi	r25, 0x3B	; 59
    1120:	0e 94 de 07 	call	0xfbc	; 0xfbc <NFC_init>
    1124:	08 95       	ret

00001126 <MyMain_main>:
---------------------------------------------------------------------------------------
*/
void MyMain_main(void){
	
	//Initialize Objects
	MyMain_systemInit();
    1126:	0e 94 86 08 	call	0x110c	; 0x110c <MyMain_systemInit>
	while(1)
	{
		//1ms interrupt check
		if(mainObject.realTimeInterruptFlag == TRUE){			// Set every 1 msec in driver_isr.c
    112a:	cf e6       	ldi	r28, 0x6F	; 111
    112c:	db e3       	ldi	r29, 0x3B	; 59
    112e:	88 81       	ld	r24, Y
    1130:	88 23       	and	r24, r24
    1132:	19 f0       	breq	.+6      	; 0x113a <MyMain_main+0x14>
			mainObject.realTimeInterruptFlag = FALSE;
    1134:	18 82       	st	Y, r1
			Scheduler_manageTasks();
    1136:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Scheduler_manageTasks>
		}
		//1min interrupt check
		if(mainObject.schedulerNFCRunFlag == TRUE){				// Set every 1min in driver_isr.c
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	88 23       	and	r24, r24
    113e:	b9 f3       	breq	.-18     	; 0x112e <MyMain_main+0x8>
			//only write if the permission to save has been initiated by TRC
			//if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED)
			{
			//Writes to NFC's memory if the there is any data to be written
				Scheduler_serviceNFCWrite();
    1140:	0e 94 a4 08 	call	0x1148	; 0x1148 <Scheduler_serviceNFCWrite>
			}
			mainObject.schedulerNFCRunFlag = FALSE;
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	f3 cf       	rjmp	.-26     	; 0x112e <MyMain_main+0x8>

00001148 <Scheduler_serviceNFCWrite>:
 ----------------------------------------------------------------------------------------
*/

void Scheduler_serviceNFCWrite(void) {
	static uint8_t secondCounter = 1;
	 if (secondCounter == SCHEDULER_BLK2_WRITE) {
    1148:	80 91 64 39 	lds	r24, 0x3964	; 0x803964 <secondCounter.3972>
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	21 f4       	brne	.+8      	; 0x1158 <Scheduler_serviceNFCWrite+0x10>
		 oNFC.block2WriteFLG = TRUE;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 71 3b 	sts	0x3B71, r24	; 0x803b71 <oNFC>
    1156:	0d c0       	rjmp	.+26     	; 0x1172 <Scheduler_serviceNFCWrite+0x2a>
	 }
	 else if (secondCounter == SCHEDULER_BLK11_WRITE) {
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	21 f4       	brne	.+8      	; 0x1164 <Scheduler_serviceNFCWrite+0x1c>
		  oNFC.block11WriteFLG = TRUE;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 72 3b 	sts	0x3B72, r24	; 0x803b72 <oNFC+0x1>
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <Scheduler_serviceNFCWrite+0x2a>
	 }
	else if (secondCounter == SCHEDULER_BLK226_WRITE) {
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	29 f4       	brne	.+10     	; 0x1172 <Scheduler_serviceNFCWrite+0x2a>
		 oNFC.block226WriteFLG = TRUE;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 73 3b 	sts	0x3B73, r24	; 0x803b73 <oNFC+0x2>
		secondCounter = 1;
    116e:	80 93 64 39 	sts	0x3964, r24	; 0x803964 <secondCounter.3972>
	 }
	 secondCounter++;
    1172:	80 91 64 39 	lds	r24, 0x3964	; 0x803964 <secondCounter.3972>
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	80 93 64 39 	sts	0x3964, r24	; 0x803964 <secondCounter.3972>
    117c:	08 95       	ret

0000117e <Scheduler_minTimeoutCheck>:
 1.00    08-02-2019  Original code                                       Tom Van Sistine
 ----------------------------------------------------------------------------------------
 */

void Scheduler_minTimeoutCheck(void){
	if(oMinSlave.communicationTimeoutCNTR){
    117e:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <oMinSlave+0x22>
    1182:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <oMinSlave+0x23>
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	71 f0       	breq	.+28     	; 0x11a6 <Scheduler_minTimeoutCheck+0x28>
		oMinSlave.communicationTimeoutCNTR--;
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <oMinSlave+0x22>
    1190:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <oMinSlave+0x23>
		if(oMinSlave.communicationTimeoutCNTR == 0) {
    1194:	89 2b       	or	r24, r25
    1196:	39 f4       	brne	.+14     	; 0x11a6 <Scheduler_minTimeoutCheck+0x28>
			oMinSlave.uart.baudSelect = BR_SELECT_115200;  // Set back to Discovery baud
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <oMinSlave+0x13a>
			MinSlave_init(&oMinSlave);
    119e:	82 e2       	ldi	r24, 0x22	; 34
    11a0:	98 e3       	ldi	r25, 0x38	; 56
    11a2:	0e 94 41 01 	call	0x282	; 0x282 <MinSlave_init>
    11a6:	08 95       	ret

000011a8 <Scheduler_manageTasks>:
1.05	01-08-2021  Added code to save data only when permitted by	 Anish Venkataraman
					TRC
---------------------------------------------------------------------------------------
*/
void Scheduler_manageTasks(void)
{
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <Scheduler_manageTasks+0x18>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <Scheduler_manageTasks+0x1a>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t flashCode = 0;
	LedCtrl_ledsManager(&oLed,flashCode);
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	82 e8       	ldi	r24, 0x82	; 130
    11ca:	9e e3       	ldi	r25, 0x3E	; 62
    11cc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LedCtrl_ledsManager>
	Scheduler_minTimeoutCheck();
    11d0:	0e 94 bf 08 	call	0x117e	; 0x117e <Scheduler_minTimeoutCheck>
	//only write if the permission to save has been initiated by TRC
	//if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED)
	{
			if(oNFC.instantWriteFLG == TRUE){//schedule to write block instantly
    11d4:	80 91 74 3b 	lds	r24, 0x3B74	; 0x803b74 <oNFC+0x3>
    11d8:	88 23       	and	r24, r24
    11da:	09 f4       	brne	.+2      	; 0x11de <Scheduler_manageTasks+0x36>
    11dc:	4b c0       	rjmp	.+150    	; 0x1274 <Scheduler_manageTasks+0xcc>
	uint8_t length = 0;
	uint8_t data[BYTES_IN_PAGE];
	uint8_t j = 0;
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getUpdateBlkAddress(&oNFC);
    11de:	81 e7       	ldi	r24, 0x71	; 113
    11e0:	9b e3       	ldi	r25, 0x3B	; 59
    11e2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <NFC_getUpdateBlkAddress>
    11e6:	6c 01       	movw	r12, r24
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
    11e8:	80 91 81 3d 	lds	r24, 0x3D81	; 0x803d81 <oNFC+0x210>
    11ec:	56 01       	movw	r10, r12
    11ee:	a8 0e       	add	r10, r24
    11f0:	b1 1c       	adc	r11, r1
    11f2:	ca 14       	cp	r12, r10
    11f4:	db 04       	cpc	r13, r11
    11f6:	d8 f5       	brcc	.+118    	; 0x126e <Scheduler_manageTasks+0xc6>
    11f8:	10 e0       	ldi	r17, 0x00	; 0
			}
			data[j] = oNFC.update.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){
			NFC_PageWrite(i,data);
			oNFC.schedulerNFCWriteWait = TRUE;
    11fa:	0f 2e       	mov	r0, r31
    11fc:	f1 e7       	ldi	r31, 0x71	; 113
    11fe:	ef 2e       	mov	r14, r31
    1200:	fb e3       	ldi	r31, 0x3B	; 59
    1202:	ff 2e       	mov	r15, r31
    1204:	f0 2d       	mov	r31, r0
    1206:	99 24       	eor	r9, r9
    1208:	93 94       	inc	r9
	//get address and length of bytes to write
	address = NFC_getUpdateBlkAddress(&oNFC);
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
    120a:	ae 01       	movw	r20, r28
    120c:	4f 5f       	subi	r20, 0xFF	; 255
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	64 e0       	ldi	r22, 0x04	; 4
    1212:	c6 01       	movw	r24, r12
    1214:	0e 94 06 08 	call	0x100c	; 0x100c <NFC_SequentialRead>
    1218:	fe 01       	movw	r30, r28
    121a:	31 96       	adiw	r30, 0x01	; 1
    121c:	04 e0       	ldi	r16, 0x04	; 4
    121e:	01 0f       	add	r16, r17
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	9f 01       	movw	r18, r30
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.update.nfcBuffer[index]){
    1224:	a1 2f       	mov	r26, r17
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ae 57       	subi	r26, 0x7E	; 126
    122a:	b2 4c       	sbci	r27, 0xC2	; 194
    122c:	8c 91       	ld	r24, X
    122e:	90 81       	ld	r25, Z
    1230:	98 13       	cpse	r25, r24
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <Scheduler_manageTasks+0x8e>
				count++;
    1234:	4f 5f       	subi	r20, 0xFF	; 255
			}
			data[j] = oNFC.update.nfcBuffer[index++];
    1236:	1f 5f       	subi	r17, 0xFF	; 255
    1238:	d9 01       	movw	r26, r18
    123a:	8c 93       	st	X, r24
    123c:	31 96       	adiw	r30, 0x01	; 1
	address = NFC_getUpdateBlkAddress(&oNFC);
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
    123e:	10 13       	cpse	r17, r16
    1240:	f0 cf       	rjmp	.-32     	; 0x1222 <Scheduler_manageTasks+0x7a>
			if(data[j] == oNFC.update.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.update.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){
    1242:	44 30       	cpi	r20, 0x04	; 4
    1244:	69 f0       	breq	.+26     	; 0x1260 <Scheduler_manageTasks+0xb8>
			NFC_PageWrite(i,data);
    1246:	be 01       	movw	r22, r28
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	c6 01       	movw	r24, r12
    124e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <NFC_PageWrite>
			oNFC.schedulerNFCWriteWait = TRUE;
    1252:	f7 01       	movw	r30, r14
    1254:	96 82       	std	Z+6, r9	; 0x06
			//wait for 5ms before next read
			while(oNFC.schedulerNFCWriteWait == TRUE);
    1256:	d7 01       	movw	r26, r14
    1258:	16 96       	adiw	r26, 0x06	; 6
    125a:	8c 91       	ld	r24, X
    125c:	81 11       	cpse	r24, r1
    125e:	fb cf       	rjmp	.-10     	; 0x1256 <Scheduler_manageTasks+0xae>
		}
		j = 0;
		count = 0;
		i = i + BYTES_IN_PAGE;
    1260:	b4 e0       	ldi	r27, 0x04	; 4
    1262:	cb 0e       	add	r12, r27
    1264:	d1 1c       	adc	r13, r1
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.update.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.update.nfcBuffer[index++];
    1266:	10 2f       	mov	r17, r16
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getUpdateBlkAddress(&oNFC);
	length = oNFC.update.length;
	index = 0;
	for(i = address;i < address+length;){
    1268:	ca 14       	cp	r12, r10
    126a:	db 04       	cpc	r13, r11
    126c:	70 f2       	brcs	.-100    	; 0x120a <Scheduler_manageTasks+0x62>
	//only write if the permission to save has been initiated by TRC
	//if(oMinSlave.slaveRegisters[MIN_SLAVE_PERMIT_TO_SAVE_DATA_RNUM] == INITIALIZED)
	{
			if(oNFC.instantWriteFLG == TRUE){//schedule to write block instantly
				Scheduler_writeInstant();
				oNFC.instantWriteFLG = FALSE;
    126e:	10 92 74 3b 	sts	0x3B74, r1	; 0x803b74 <oNFC+0x3>
    1272:	c6 c0       	rjmp	.+396    	; 0x1400 <Scheduler_manageTasks+0x258>
			}
			else if (oNFC.productInfoFLG == TRUE){//schedule to write productInfo block
    1274:	80 91 75 3b 	lds	r24, 0x3B75	; 0x803b75 <oNFC+0x4>
    1278:	88 23       	and	r24, r24
    127a:	09 f4       	brne	.+2      	; 0x127e <Scheduler_manageTasks+0xd6>
    127c:	50 c0       	rjmp	.+160    	; 0x131e <Scheduler_manageTasks+0x176>
	uint8_t j = 0;
	uint8_t index;
	address = BLOCK_NVM_OFFSET;
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
    127e:	a0 90 7a 3b 	lds	r10, 0x3B7A	; 0x803b7a <oNFC+0x9>
    1282:	b0 90 7b 3b 	lds	r11, 0x3B7B	; 0x803b7b <oNFC+0xa>
    1286:	bb 24       	eor	r11, r11
    1288:	e0 e2       	ldi	r30, 0x20	; 32
    128a:	ae 0e       	add	r10, r30
    128c:	b1 1c       	adc	r11, r1
    128e:	f1 e2       	ldi	r31, 0x21	; 33
    1290:	af 16       	cp	r10, r31
    1292:	b1 04       	cpc	r11, r1
    1294:	08 f4       	brcc	.+2      	; 0x1298 <Scheduler_manageTasks+0xf0>
    1296:	40 c0       	rjmp	.+128    	; 0x1318 <Scheduler_manageTasks+0x170>
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	68 94       	set
    129c:	cc 24       	eor	r12, r12
    129e:	c5 f8       	bld	r12, 5
    12a0:	d1 2c       	mov	r13, r1
			}
			data[j] = oNFC.productInfoData[index++];
		}
		if(count != BYTES_IN_PAGE){
			NFC_PageWrite(i,data);
			oNFC.schedulerNFCWriteWait = TRUE;
    12a2:	0f 2e       	mov	r0, r31
    12a4:	f1 e7       	ldi	r31, 0x71	; 113
    12a6:	ef 2e       	mov	r14, r31
    12a8:	fb e3       	ldi	r31, 0x3B	; 59
    12aa:	ff 2e       	mov	r15, r31
    12ac:	f0 2d       	mov	r31, r0
    12ae:	99 24       	eor	r9, r9
    12b0:	93 94       	inc	r9
	address = BLOCK_NVM_OFFSET;
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
		//read data
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
    12b2:	ae 01       	movw	r20, r28
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	64 e0       	ldi	r22, 0x04	; 4
    12ba:	c6 01       	movw	r24, r12
    12bc:	0e 94 06 08 	call	0x100c	; 0x100c <NFC_SequentialRead>
    12c0:	fe 01       	movw	r30, r28
    12c2:	31 96       	adiw	r30, 0x01	; 1
    12c4:	04 e0       	ldi	r16, 0x04	; 4
    12c6:	01 0f       	add	r16, r17
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	9f 01       	movw	r18, r30
		for(j = 0; j < BYTES_IN_PAGE; j++){
			//check data if it matches
			if(data[j] == oNFC.productInfoData[index]){
    12cc:	a1 2f       	mov	r26, r17
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	af 58       	subi	r26, 0x8F	; 143
    12d2:	b4 4c       	sbci	r27, 0xC4	; 196
    12d4:	1b 96       	adiw	r26, 0x0b	; 11
    12d6:	8c 91       	ld	r24, X
    12d8:	90 81       	ld	r25, Z
    12da:	98 13       	cpse	r25, r24
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <Scheduler_manageTasks+0x138>
				count++;
    12de:	4f 5f       	subi	r20, 0xFF	; 255
			}
			data[j] = oNFC.productInfoData[index++];
    12e0:	1f 5f       	subi	r17, 0xFF	; 255
    12e2:	d9 01       	movw	r26, r18
    12e4:	8c 93       	st	X, r24
    12e6:	31 96       	adiw	r30, 0x01	; 1
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
		//read data
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
    12e8:	10 13       	cpse	r17, r16
    12ea:	ef cf       	rjmp	.-34     	; 0x12ca <Scheduler_manageTasks+0x122>
			if(data[j] == oNFC.productInfoData[index]){
				count++;
			}
			data[j] = oNFC.productInfoData[index++];
		}
		if(count != BYTES_IN_PAGE){
    12ec:	44 30       	cpi	r20, 0x04	; 4
    12ee:	69 f0       	breq	.+26     	; 0x130a <Scheduler_manageTasks+0x162>
			NFC_PageWrite(i,data);
    12f0:	be 01       	movw	r22, r28
    12f2:	6f 5f       	subi	r22, 0xFF	; 255
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	c6 01       	movw	r24, r12
    12f8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <NFC_PageWrite>
			oNFC.schedulerNFCWriteWait = TRUE;
    12fc:	f7 01       	movw	r30, r14
    12fe:	96 82       	std	Z+6, r9	; 0x06
			//wait for 5ms before next read
			while(oNFC.schedulerNFCWriteWait == TRUE);
    1300:	d7 01       	movw	r26, r14
    1302:	16 96       	adiw	r26, 0x06	; 6
    1304:	8c 91       	ld	r24, X
    1306:	81 11       	cpse	r24, r1
    1308:	fb cf       	rjmp	.-10     	; 0x1300 <Scheduler_manageTasks+0x158>
		}
		j = 0;
		count = 0;
		i = i + BYTES_IN_PAGE;
    130a:	b4 e0       	ldi	r27, 0x04	; 4
    130c:	cb 0e       	add	r12, r27
    130e:	d1 1c       	adc	r13, r1
		for(j = 0; j < BYTES_IN_PAGE; j++){
			//check data if it matches
			if(data[j] == oNFC.productInfoData[index]){
				count++;
			}
			data[j] = oNFC.productInfoData[index++];
    1310:	10 2f       	mov	r17, r16
	uint8_t j = 0;
	uint8_t index;
	address = BLOCK_NVM_OFFSET;
	length = oNFC.productInfoLength;
	index = 0;
	for(i = address;i < address+length;){
    1312:	ca 14       	cp	r12, r10
    1314:	db 04       	cpc	r13, r11
    1316:	68 f2       	brcs	.-102    	; 0x12b2 <Scheduler_manageTasks+0x10a>
				Scheduler_writeInstant();
				oNFC.instantWriteFLG = FALSE;
			}
			else if (oNFC.productInfoFLG == TRUE){//schedule to write productInfo block
				Scheduler_writeProductInfo();
				oNFC.productInfoFLG = FALSE;
    1318:	10 92 75 3b 	sts	0x3B75, r1	; 0x803b75 <oNFC+0x4>
    131c:	71 c0       	rjmp	.+226    	; 0x1400 <Scheduler_manageTasks+0x258>
			}
			else if(oNFC.storeBroadcastFLG == TRUE){//schedule to write block broadcast
    131e:	80 91 76 3b 	lds	r24, 0x3B76	; 0x803b76 <oNFC+0x5>
    1322:	88 23       	and	r24, r24
    1324:	09 f4       	brne	.+2      	; 0x1328 <Scheduler_manageTasks+0x180>
    1326:	6c c0       	rjmp	.+216    	; 0x1400 <Scheduler_manageTasks+0x258>
	uint8_t length = 0;
	uint8_t data[BYTES_IN_PAGE];
	uint8_t j = 0;
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getBroadcastBlkAddress(&oNFC);
    1328:	81 e7       	ldi	r24, 0x71	; 113
    132a:	9b e3       	ldi	r25, 0x3B	; 59
    132c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <NFC_getBroadcastBlkAddress>
    1330:	6c 01       	movw	r12, r24
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
    1332:	80 91 7e 3c 	lds	r24, 0x3C7E	; 0x803c7e <oNFC+0x10d>
    1336:	56 01       	movw	r10, r12
    1338:	a8 0e       	add	r10, r24
    133a:	b1 1c       	adc	r11, r1
    133c:	ca 14       	cp	r12, r10
    133e:	db 04       	cpc	r13, r11
    1340:	d8 f5       	brcc	.+118    	; 0x13b8 <Scheduler_manageTasks+0x210>
    1342:	10 e0       	ldi	r17, 0x00	; 0
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){//data is different so write the page
			NFC_PageWrite(i,data);
			oNFC.schedulerNFCWriteWait = TRUE;
    1344:	0f 2e       	mov	r0, r31
    1346:	f1 e7       	ldi	r31, 0x71	; 113
    1348:	ef 2e       	mov	r14, r31
    134a:	fb e3       	ldi	r31, 0x3B	; 59
    134c:	ff 2e       	mov	r15, r31
    134e:	f0 2d       	mov	r31, r0
    1350:	99 24       	eor	r9, r9
    1352:	93 94       	inc	r9
	address = NFC_getBroadcastBlkAddress(&oNFC);
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
		//Read data before writing
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
    1354:	ae 01       	movw	r20, r28
    1356:	4f 5f       	subi	r20, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	64 e0       	ldi	r22, 0x04	; 4
    135c:	c6 01       	movw	r24, r12
    135e:	0e 94 06 08 	call	0x100c	; 0x100c <NFC_SequentialRead>
    1362:	fe 01       	movw	r30, r28
    1364:	31 96       	adiw	r30, 0x01	; 1
    1366:	04 e0       	ldi	r16, 0x04	; 4
    1368:	01 0f       	add	r16, r17
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	9f 01       	movw	r18, r30
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.broadcast.nfcBuffer[index]){
    136e:	a1 2f       	mov	r26, r17
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	a1 58       	subi	r26, 0x81	; 129
    1374:	b3 4c       	sbci	r27, 0xC3	; 195
    1376:	8c 91       	ld	r24, X
    1378:	90 81       	ld	r25, Z
    137a:	98 13       	cpse	r25, r24
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <Scheduler_manageTasks+0x1d8>
				count++;
    137e:	4f 5f       	subi	r20, 0xFF	; 255
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
    1380:	1f 5f       	subi	r17, 0xFF	; 255
    1382:	d9 01       	movw	r26, r18
    1384:	8c 93       	st	X, r24
    1386:	31 96       	adiw	r30, 0x01	; 1
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
		//Read data before writing
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
    1388:	10 13       	cpse	r17, r16
    138a:	f0 cf       	rjmp	.-32     	; 0x136c <Scheduler_manageTasks+0x1c4>
			if(data[j] == oNFC.broadcast.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
		}
		if(count != BYTES_IN_PAGE){//data is different so write the page
    138c:	44 30       	cpi	r20, 0x04	; 4
    138e:	69 f0       	breq	.+26     	; 0x13aa <Scheduler_manageTasks+0x202>
			NFC_PageWrite(i,data);
    1390:	be 01       	movw	r22, r28
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	c6 01       	movw	r24, r12
    1398:	0e 94 64 08 	call	0x10c8	; 0x10c8 <NFC_PageWrite>
			oNFC.schedulerNFCWriteWait = TRUE;
    139c:	f7 01       	movw	r30, r14
    139e:	96 82       	std	Z+6, r9	; 0x06
			//wait for 5ms before next read
			while(oNFC.schedulerNFCWriteWait == TRUE);
    13a0:	d7 01       	movw	r26, r14
    13a2:	16 96       	adiw	r26, 0x06	; 6
    13a4:	8c 91       	ld	r24, X
    13a6:	81 11       	cpse	r24, r1
    13a8:	fb cf       	rjmp	.-10     	; 0x13a0 <Scheduler_manageTasks+0x1f8>
		}
		j = 0;
		count = 0;
		i = i + BYTES_IN_PAGE;
    13aa:	b4 e0       	ldi	r27, 0x04	; 4
    13ac:	cb 0e       	add	r12, r27
    13ae:	d1 1c       	adc	r13, r1
		NFC_SequentialRead(i,BYTES_IN_PAGE,data);
		for(j = 0; j < BYTES_IN_PAGE; j++){
			if(data[j] == oNFC.broadcast.nfcBuffer[index]){
				count++;
			}
			data[j] = oNFC.broadcast.nfcBuffer[index++];
    13b0:	10 2f       	mov	r17, r16
	uint8_t index;
	//get address and length of bytes to write
	address = NFC_getBroadcastBlkAddress(&oNFC);
	length = oNFC.broadcast.length;
	index = 0;
	for(i = address;i < address+length;){
    13b2:	ca 14       	cp	r12, r10
    13b4:	db 04       	cpc	r13, r11
    13b6:	70 f2       	brcs	.-100    	; 0x1354 <Scheduler_manageTasks+0x1ac>
				Scheduler_writeProductInfo();
				oNFC.productInfoFLG = FALSE;
			}
			else if(oNFC.storeBroadcastFLG == TRUE){//schedule to write block broadcast
				Scheduler_writeBroadcast();
				if(oNFC.broadcast.blockNumber == BLOCK2 && oNFC.block2WriteFLG == TRUE){
    13b8:	80 91 7c 3c 	lds	r24, 0x3C7C	; 0x803c7c <oNFC+0x10b>
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	39 f4       	brne	.+14     	; 0x13ce <Scheduler_manageTasks+0x226>
    13c0:	80 91 71 3b 	lds	r24, 0x3B71	; 0x803b71 <oNFC>
    13c4:	88 23       	and	r24, r24
    13c6:	a9 f0       	breq	.+42     	; 0x13f2 <Scheduler_manageTasks+0x24a>
					oNFC.block2WriteFLG = FALSE;//clear block2 broadcast flag
    13c8:	10 92 71 3b 	sts	0x3B71, r1	; 0x803b71 <oNFC>
    13cc:	17 c0       	rjmp	.+46     	; 0x13fc <Scheduler_manageTasks+0x254>
				}
				else if(oNFC.broadcast.blockNumber == BLOCK11 && oNFC.block11WriteFLG == TRUE){
    13ce:	8b 30       	cpi	r24, 0x0B	; 11
    13d0:	39 f4       	brne	.+14     	; 0x13e0 <Scheduler_manageTasks+0x238>
    13d2:	80 91 72 3b 	lds	r24, 0x3B72	; 0x803b72 <oNFC+0x1>
    13d6:	88 23       	and	r24, r24
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <Scheduler_manageTasks+0x24a>
					oNFC.block11WriteFLG = FALSE;//clear block11 broadcast flag
    13da:	10 92 72 3b 	sts	0x3B72, r1	; 0x803b72 <oNFC+0x1>
    13de:	0e c0       	rjmp	.+28     	; 0x13fc <Scheduler_manageTasks+0x254>
				}
				else if(oNFC.broadcast.blockNumber == BLOCK226 && oNFC.block226WriteFLG == TRUE){
    13e0:	82 3e       	cpi	r24, 0xE2	; 226
    13e2:	39 f4       	brne	.+14     	; 0x13f2 <Scheduler_manageTasks+0x24a>
    13e4:	80 91 73 3b 	lds	r24, 0x3B73	; 0x803b73 <oNFC+0x2>
    13e8:	88 23       	and	r24, r24
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <Scheduler_manageTasks+0x24a>
					oNFC.block226WriteFLG = FALSE;//clear block226 broadcast flag
    13ec:	10 92 73 3b 	sts	0x3B73, r1	; 0x803b73 <oNFC+0x2>
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <Scheduler_manageTasks+0x254>
				}
				else{//clear flags
					oNFC.block2WriteFLG = FALSE;
    13f2:	e1 e7       	ldi	r30, 0x71	; 113
    13f4:	fb e3       	ldi	r31, 0x3B	; 59
    13f6:	10 82       	st	Z, r1
					oNFC.block11WriteFLG = FALSE;
    13f8:	11 82       	std	Z+1, r1	; 0x01
					oNFC.block226WriteFLG = FALSE;
    13fa:	12 82       	std	Z+2, r1	; 0x02
				}
				oNFC.storeBroadcastFLG = FALSE;
    13fc:	10 92 76 3b 	sts	0x3B76, r1	; 0x803b76 <oNFC+0x5>
			}
	}
} 
    1400:	24 96       	adiw	r28, 0x04	; 4
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	bf 90       	pop	r11
    1418:	af 90       	pop	r10
    141a:	9f 90       	pop	r9
    141c:	08 95       	ret

0000141e <__tablejump2__>:
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	05 90       	lpm	r0, Z+
    1424:	f4 91       	lpm	r31, Z
    1426:	e0 2d       	mov	r30, r0
    1428:	09 94       	ijmp

0000142a <abort>:
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	f8 94       	cli
    1430:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <_exit>

00001434 <vfprintf>:
    1434:	ab e0       	ldi	r26, 0x0B	; 11
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e2       	ldi	r30, 0x20	; 32
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__prologue_saves__>
    1440:	6c 01       	movw	r12, r24
    1442:	7b 01       	movw	r14, r22
    1444:	8a 01       	movw	r16, r20
    1446:	fc 01       	movw	r30, r24
    1448:	16 82       	std	Z+6, r1	; 0x06
    144a:	17 82       	std	Z+7, r1	; 0x07
    144c:	83 81       	ldd	r24, Z+3	; 0x03
    144e:	81 ff       	sbrs	r24, 1
    1450:	cc c1       	rjmp	.+920    	; 0x17ea <vfprintf+0x3b6>
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	3c 01       	movw	r6, r24
    1458:	f6 01       	movw	r30, r12
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	f7 01       	movw	r30, r14
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	7f 01       	movw	r14, r30
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <vfprintf+0x3a>
    146c:	ba c1       	rjmp	.+884    	; 0x17e2 <vfprintf+0x3ae>
    146e:	85 32       	cpi	r24, 0x25	; 37
    1470:	39 f4       	brne	.+14     	; 0x1480 <vfprintf+0x4c>
    1472:	93 fd       	sbrc	r25, 3
    1474:	85 91       	lpm	r24, Z+
    1476:	93 ff       	sbrs	r25, 3
    1478:	81 91       	ld	r24, Z+
    147a:	7f 01       	movw	r14, r30
    147c:	85 32       	cpi	r24, 0x25	; 37
    147e:	29 f4       	brne	.+10     	; 0x148a <vfprintf+0x56>
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    1488:	e7 cf       	rjmp	.-50     	; 0x1458 <vfprintf+0x24>
    148a:	91 2c       	mov	r9, r1
    148c:	21 2c       	mov	r2, r1
    148e:	31 2c       	mov	r3, r1
    1490:	ff e1       	ldi	r31, 0x1F	; 31
    1492:	f3 15       	cp	r31, r3
    1494:	d8 f0       	brcs	.+54     	; 0x14cc <vfprintf+0x98>
    1496:	8b 32       	cpi	r24, 0x2B	; 43
    1498:	79 f0       	breq	.+30     	; 0x14b8 <vfprintf+0x84>
    149a:	38 f4       	brcc	.+14     	; 0x14aa <vfprintf+0x76>
    149c:	80 32       	cpi	r24, 0x20	; 32
    149e:	79 f0       	breq	.+30     	; 0x14be <vfprintf+0x8a>
    14a0:	83 32       	cpi	r24, 0x23	; 35
    14a2:	a1 f4       	brne	.+40     	; 0x14cc <vfprintf+0x98>
    14a4:	23 2d       	mov	r18, r3
    14a6:	20 61       	ori	r18, 0x10	; 16
    14a8:	1d c0       	rjmp	.+58     	; 0x14e4 <vfprintf+0xb0>
    14aa:	8d 32       	cpi	r24, 0x2D	; 45
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <vfprintf+0x92>
    14ae:	80 33       	cpi	r24, 0x30	; 48
    14b0:	69 f4       	brne	.+26     	; 0x14cc <vfprintf+0x98>
    14b2:	23 2d       	mov	r18, r3
    14b4:	21 60       	ori	r18, 0x01	; 1
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <vfprintf+0xb0>
    14b8:	83 2d       	mov	r24, r3
    14ba:	82 60       	ori	r24, 0x02	; 2
    14bc:	38 2e       	mov	r3, r24
    14be:	e3 2d       	mov	r30, r3
    14c0:	e4 60       	ori	r30, 0x04	; 4
    14c2:	3e 2e       	mov	r3, r30
    14c4:	2a c0       	rjmp	.+84     	; 0x151a <vfprintf+0xe6>
    14c6:	f3 2d       	mov	r31, r3
    14c8:	f8 60       	ori	r31, 0x08	; 8
    14ca:	1d c0       	rjmp	.+58     	; 0x1506 <vfprintf+0xd2>
    14cc:	37 fc       	sbrc	r3, 7
    14ce:	2d c0       	rjmp	.+90     	; 0x152a <vfprintf+0xf6>
    14d0:	20 ed       	ldi	r18, 0xD0	; 208
    14d2:	28 0f       	add	r18, r24
    14d4:	2a 30       	cpi	r18, 0x0A	; 10
    14d6:	40 f0       	brcs	.+16     	; 0x14e8 <vfprintf+0xb4>
    14d8:	8e 32       	cpi	r24, 0x2E	; 46
    14da:	b9 f4       	brne	.+46     	; 0x150a <vfprintf+0xd6>
    14dc:	36 fc       	sbrc	r3, 6
    14de:	81 c1       	rjmp	.+770    	; 0x17e2 <vfprintf+0x3ae>
    14e0:	23 2d       	mov	r18, r3
    14e2:	20 64       	ori	r18, 0x40	; 64
    14e4:	32 2e       	mov	r3, r18
    14e6:	19 c0       	rjmp	.+50     	; 0x151a <vfprintf+0xe6>
    14e8:	36 fe       	sbrs	r3, 6
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <vfprintf+0xc4>
    14ec:	8a e0       	ldi	r24, 0x0A	; 10
    14ee:	98 9e       	mul	r9, r24
    14f0:	20 0d       	add	r18, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	92 2e       	mov	r9, r18
    14f6:	11 c0       	rjmp	.+34     	; 0x151a <vfprintf+0xe6>
    14f8:	ea e0       	ldi	r30, 0x0A	; 10
    14fa:	2e 9e       	mul	r2, r30
    14fc:	20 0d       	add	r18, r0
    14fe:	11 24       	eor	r1, r1
    1500:	22 2e       	mov	r2, r18
    1502:	f3 2d       	mov	r31, r3
    1504:	f0 62       	ori	r31, 0x20	; 32
    1506:	3f 2e       	mov	r3, r31
    1508:	08 c0       	rjmp	.+16     	; 0x151a <vfprintf+0xe6>
    150a:	8c 36       	cpi	r24, 0x6C	; 108
    150c:	21 f4       	brne	.+8      	; 0x1516 <vfprintf+0xe2>
    150e:	83 2d       	mov	r24, r3
    1510:	80 68       	ori	r24, 0x80	; 128
    1512:	38 2e       	mov	r3, r24
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0xe6>
    1516:	88 36       	cpi	r24, 0x68	; 104
    1518:	41 f4       	brne	.+16     	; 0x152a <vfprintf+0xf6>
    151a:	f7 01       	movw	r30, r14
    151c:	93 fd       	sbrc	r25, 3
    151e:	85 91       	lpm	r24, Z+
    1520:	93 ff       	sbrs	r25, 3
    1522:	81 91       	ld	r24, Z+
    1524:	7f 01       	movw	r14, r30
    1526:	81 11       	cpse	r24, r1
    1528:	b3 cf       	rjmp	.-154    	; 0x1490 <vfprintf+0x5c>
    152a:	98 2f       	mov	r25, r24
    152c:	9f 7d       	andi	r25, 0xDF	; 223
    152e:	95 54       	subi	r25, 0x45	; 69
    1530:	93 30       	cpi	r25, 0x03	; 3
    1532:	28 f4       	brcc	.+10     	; 0x153e <vfprintf+0x10a>
    1534:	0c 5f       	subi	r16, 0xFC	; 252
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	9f e3       	ldi	r25, 0x3F	; 63
    153a:	99 83       	std	Y+1, r25	; 0x01
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <vfprintf+0x124>
    153e:	83 36       	cpi	r24, 0x63	; 99
    1540:	31 f0       	breq	.+12     	; 0x154e <vfprintf+0x11a>
    1542:	83 37       	cpi	r24, 0x73	; 115
    1544:	71 f0       	breq	.+28     	; 0x1562 <vfprintf+0x12e>
    1546:	83 35       	cpi	r24, 0x53	; 83
    1548:	09 f0       	breq	.+2      	; 0x154c <vfprintf+0x118>
    154a:	59 c0       	rjmp	.+178    	; 0x15fe <vfprintf+0x1ca>
    154c:	21 c0       	rjmp	.+66     	; 0x1590 <vfprintf+0x15c>
    154e:	f8 01       	movw	r30, r16
    1550:	80 81       	ld	r24, Z
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	0e 5f       	subi	r16, 0xFE	; 254
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	88 24       	eor	r8, r8
    155a:	83 94       	inc	r8
    155c:	91 2c       	mov	r9, r1
    155e:	53 01       	movw	r10, r6
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <vfprintf+0x154>
    1562:	28 01       	movw	r4, r16
    1564:	f2 e0       	ldi	r31, 0x02	; 2
    1566:	4f 0e       	add	r4, r31
    1568:	51 1c       	adc	r5, r1
    156a:	f8 01       	movw	r30, r16
    156c:	a0 80       	ld	r10, Z
    156e:	b1 80       	ldd	r11, Z+1	; 0x01
    1570:	36 fe       	sbrs	r3, 6
    1572:	03 c0       	rjmp	.+6      	; 0x157a <vfprintf+0x146>
    1574:	69 2d       	mov	r22, r9
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x14a>
    157a:	6f ef       	ldi	r22, 0xFF	; 255
    157c:	7f ef       	ldi	r23, 0xFF	; 255
    157e:	c5 01       	movw	r24, r10
    1580:	0e 94 06 0c 	call	0x180c	; 0x180c <strnlen>
    1584:	4c 01       	movw	r8, r24
    1586:	82 01       	movw	r16, r4
    1588:	f3 2d       	mov	r31, r3
    158a:	ff 77       	andi	r31, 0x7F	; 127
    158c:	3f 2e       	mov	r3, r31
    158e:	16 c0       	rjmp	.+44     	; 0x15bc <vfprintf+0x188>
    1590:	28 01       	movw	r4, r16
    1592:	22 e0       	ldi	r18, 0x02	; 2
    1594:	42 0e       	add	r4, r18
    1596:	51 1c       	adc	r5, r1
    1598:	f8 01       	movw	r30, r16
    159a:	a0 80       	ld	r10, Z
    159c:	b1 80       	ldd	r11, Z+1	; 0x01
    159e:	36 fe       	sbrs	r3, 6
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <vfprintf+0x174>
    15a2:	69 2d       	mov	r22, r9
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x178>
    15a8:	6f ef       	ldi	r22, 0xFF	; 255
    15aa:	7f ef       	ldi	r23, 0xFF	; 255
    15ac:	c5 01       	movw	r24, r10
    15ae:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <strnlen_P>
    15b2:	4c 01       	movw	r8, r24
    15b4:	f3 2d       	mov	r31, r3
    15b6:	f0 68       	ori	r31, 0x80	; 128
    15b8:	3f 2e       	mov	r3, r31
    15ba:	82 01       	movw	r16, r4
    15bc:	33 fc       	sbrc	r3, 3
    15be:	1b c0       	rjmp	.+54     	; 0x15f6 <vfprintf+0x1c2>
    15c0:	82 2d       	mov	r24, r2
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	88 16       	cp	r8, r24
    15c6:	99 06       	cpc	r9, r25
    15c8:	b0 f4       	brcc	.+44     	; 0x15f6 <vfprintf+0x1c2>
    15ca:	b6 01       	movw	r22, r12
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    15d4:	2a 94       	dec	r2
    15d6:	f4 cf       	rjmp	.-24     	; 0x15c0 <vfprintf+0x18c>
    15d8:	f5 01       	movw	r30, r10
    15da:	37 fc       	sbrc	r3, 7
    15dc:	85 91       	lpm	r24, Z+
    15de:	37 fe       	sbrs	r3, 7
    15e0:	81 91       	ld	r24, Z+
    15e2:	5f 01       	movw	r10, r30
    15e4:	b6 01       	movw	r22, r12
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    15ec:	21 10       	cpse	r2, r1
    15ee:	2a 94       	dec	r2
    15f0:	21 e0       	ldi	r18, 0x01	; 1
    15f2:	82 1a       	sub	r8, r18
    15f4:	91 08       	sbc	r9, r1
    15f6:	81 14       	cp	r8, r1
    15f8:	91 04       	cpc	r9, r1
    15fa:	71 f7       	brne	.-36     	; 0x15d8 <vfprintf+0x1a4>
    15fc:	e8 c0       	rjmp	.+464    	; 0x17ce <vfprintf+0x39a>
    15fe:	84 36       	cpi	r24, 0x64	; 100
    1600:	11 f0       	breq	.+4      	; 0x1606 <vfprintf+0x1d2>
    1602:	89 36       	cpi	r24, 0x69	; 105
    1604:	41 f5       	brne	.+80     	; 0x1656 <vfprintf+0x222>
    1606:	f8 01       	movw	r30, r16
    1608:	37 fe       	sbrs	r3, 7
    160a:	07 c0       	rjmp	.+14     	; 0x161a <vfprintf+0x1e6>
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	0c 5f       	subi	r16, 0xFC	; 252
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	08 c0       	rjmp	.+16     	; 0x162a <vfprintf+0x1f6>
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	07 2e       	mov	r0, r23
    1620:	00 0c       	add	r0, r0
    1622:	88 0b       	sbc	r24, r24
    1624:	99 0b       	sbc	r25, r25
    1626:	0e 5f       	subi	r16, 0xFE	; 254
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	f3 2d       	mov	r31, r3
    162c:	ff 76       	andi	r31, 0x6F	; 111
    162e:	3f 2e       	mov	r3, r31
    1630:	97 ff       	sbrs	r25, 7
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <vfprintf+0x212>
    1634:	90 95       	com	r25
    1636:	80 95       	com	r24
    1638:	70 95       	com	r23
    163a:	61 95       	neg	r22
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	8f 4f       	sbci	r24, 0xFF	; 255
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	f0 68       	ori	r31, 0x80	; 128
    1644:	3f 2e       	mov	r3, r31
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	a3 01       	movw	r20, r6
    164c:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ultoa_invert>
    1650:	88 2e       	mov	r8, r24
    1652:	86 18       	sub	r8, r6
    1654:	45 c0       	rjmp	.+138    	; 0x16e0 <vfprintf+0x2ac>
    1656:	85 37       	cpi	r24, 0x75	; 117
    1658:	31 f4       	brne	.+12     	; 0x1666 <vfprintf+0x232>
    165a:	23 2d       	mov	r18, r3
    165c:	2f 7e       	andi	r18, 0xEF	; 239
    165e:	b2 2e       	mov	r11, r18
    1660:	2a e0       	ldi	r18, 0x0A	; 10
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	25 c0       	rjmp	.+74     	; 0x16b0 <vfprintf+0x27c>
    1666:	93 2d       	mov	r25, r3
    1668:	99 7f       	andi	r25, 0xF9	; 249
    166a:	b9 2e       	mov	r11, r25
    166c:	8f 36       	cpi	r24, 0x6F	; 111
    166e:	c1 f0       	breq	.+48     	; 0x16a0 <vfprintf+0x26c>
    1670:	18 f4       	brcc	.+6      	; 0x1678 <vfprintf+0x244>
    1672:	88 35       	cpi	r24, 0x58	; 88
    1674:	79 f0       	breq	.+30     	; 0x1694 <vfprintf+0x260>
    1676:	b5 c0       	rjmp	.+362    	; 0x17e2 <vfprintf+0x3ae>
    1678:	80 37       	cpi	r24, 0x70	; 112
    167a:	19 f0       	breq	.+6      	; 0x1682 <vfprintf+0x24e>
    167c:	88 37       	cpi	r24, 0x78	; 120
    167e:	21 f0       	breq	.+8      	; 0x1688 <vfprintf+0x254>
    1680:	b0 c0       	rjmp	.+352    	; 0x17e2 <vfprintf+0x3ae>
    1682:	e9 2f       	mov	r30, r25
    1684:	e0 61       	ori	r30, 0x10	; 16
    1686:	be 2e       	mov	r11, r30
    1688:	b4 fe       	sbrs	r11, 4
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <vfprintf+0x272>
    168c:	fb 2d       	mov	r31, r11
    168e:	f4 60       	ori	r31, 0x04	; 4
    1690:	bf 2e       	mov	r11, r31
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <vfprintf+0x272>
    1694:	34 fe       	sbrs	r3, 4
    1696:	0a c0       	rjmp	.+20     	; 0x16ac <vfprintf+0x278>
    1698:	29 2f       	mov	r18, r25
    169a:	26 60       	ori	r18, 0x06	; 6
    169c:	b2 2e       	mov	r11, r18
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x278>
    16a0:	28 e0       	ldi	r18, 0x08	; 8
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <vfprintf+0x27c>
    16a6:	20 e1       	ldi	r18, 0x10	; 16
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x27c>
    16ac:	20 e1       	ldi	r18, 0x10	; 16
    16ae:	32 e0       	ldi	r19, 0x02	; 2
    16b0:	f8 01       	movw	r30, r16
    16b2:	b7 fe       	sbrs	r11, 7
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <vfprintf+0x290>
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0c 5f       	subi	r16, 0xFC	; 252
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <vfprintf+0x29c>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 5f       	subi	r16, 0xFE	; 254
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	a3 01       	movw	r20, r6
    16d2:	0e 94 4d 0c 	call	0x189a	; 0x189a <__ultoa_invert>
    16d6:	88 2e       	mov	r8, r24
    16d8:	86 18       	sub	r8, r6
    16da:	fb 2d       	mov	r31, r11
    16dc:	ff 77       	andi	r31, 0x7F	; 127
    16de:	3f 2e       	mov	r3, r31
    16e0:	36 fe       	sbrs	r3, 6
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <vfprintf+0x2ca>
    16e4:	23 2d       	mov	r18, r3
    16e6:	2e 7f       	andi	r18, 0xFE	; 254
    16e8:	a2 2e       	mov	r10, r18
    16ea:	89 14       	cp	r8, r9
    16ec:	58 f4       	brcc	.+22     	; 0x1704 <vfprintf+0x2d0>
    16ee:	34 fe       	sbrs	r3, 4
    16f0:	0b c0       	rjmp	.+22     	; 0x1708 <vfprintf+0x2d4>
    16f2:	32 fc       	sbrc	r3, 2
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <vfprintf+0x2d4>
    16f6:	83 2d       	mov	r24, r3
    16f8:	8e 7e       	andi	r24, 0xEE	; 238
    16fa:	a8 2e       	mov	r10, r24
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <vfprintf+0x2d4>
    16fe:	b8 2c       	mov	r11, r8
    1700:	a3 2c       	mov	r10, r3
    1702:	03 c0       	rjmp	.+6      	; 0x170a <vfprintf+0x2d6>
    1704:	b8 2c       	mov	r11, r8
    1706:	01 c0       	rjmp	.+2      	; 0x170a <vfprintf+0x2d6>
    1708:	b9 2c       	mov	r11, r9
    170a:	a4 fe       	sbrs	r10, 4
    170c:	0f c0       	rjmp	.+30     	; 0x172c <vfprintf+0x2f8>
    170e:	fe 01       	movw	r30, r28
    1710:	e8 0d       	add	r30, r8
    1712:	f1 1d       	adc	r31, r1
    1714:	80 81       	ld	r24, Z
    1716:	80 33       	cpi	r24, 0x30	; 48
    1718:	21 f4       	brne	.+8      	; 0x1722 <vfprintf+0x2ee>
    171a:	9a 2d       	mov	r25, r10
    171c:	99 7e       	andi	r25, 0xE9	; 233
    171e:	a9 2e       	mov	r10, r25
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <vfprintf+0x300>
    1722:	a2 fe       	sbrs	r10, 2
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0x2fe>
    1726:	b3 94       	inc	r11
    1728:	b3 94       	inc	r11
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <vfprintf+0x300>
    172c:	8a 2d       	mov	r24, r10
    172e:	86 78       	andi	r24, 0x86	; 134
    1730:	09 f0       	breq	.+2      	; 0x1734 <vfprintf+0x300>
    1732:	b3 94       	inc	r11
    1734:	a3 fc       	sbrc	r10, 3
    1736:	11 c0       	rjmp	.+34     	; 0x175a <vfprintf+0x326>
    1738:	a0 fe       	sbrs	r10, 0
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <vfprintf+0x314>
    173c:	b2 14       	cp	r11, r2
    173e:	88 f4       	brcc	.+34     	; 0x1762 <vfprintf+0x32e>
    1740:	28 0c       	add	r2, r8
    1742:	92 2c       	mov	r9, r2
    1744:	9b 18       	sub	r9, r11
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <vfprintf+0x330>
    1748:	b2 14       	cp	r11, r2
    174a:	60 f4       	brcc	.+24     	; 0x1764 <vfprintf+0x330>
    174c:	b6 01       	movw	r22, r12
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    1756:	b3 94       	inc	r11
    1758:	f7 cf       	rjmp	.-18     	; 0x1748 <vfprintf+0x314>
    175a:	b2 14       	cp	r11, r2
    175c:	18 f4       	brcc	.+6      	; 0x1764 <vfprintf+0x330>
    175e:	2b 18       	sub	r2, r11
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x332>
    1762:	98 2c       	mov	r9, r8
    1764:	21 2c       	mov	r2, r1
    1766:	a4 fe       	sbrs	r10, 4
    1768:	10 c0       	rjmp	.+32     	; 0x178a <vfprintf+0x356>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    1774:	a2 fe       	sbrs	r10, 2
    1776:	17 c0       	rjmp	.+46     	; 0x17a6 <vfprintf+0x372>
    1778:	a1 fc       	sbrc	r10, 1
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <vfprintf+0x34e>
    177c:	88 e7       	ldi	r24, 0x78	; 120
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x352>
    1782:	88 e5       	ldi	r24, 0x58	; 88
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	b6 01       	movw	r22, r12
    1788:	0c c0       	rjmp	.+24     	; 0x17a2 <vfprintf+0x36e>
    178a:	8a 2d       	mov	r24, r10
    178c:	86 78       	andi	r24, 0x86	; 134
    178e:	59 f0       	breq	.+22     	; 0x17a6 <vfprintf+0x372>
    1790:	a1 fe       	sbrs	r10, 1
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x364>
    1794:	8b e2       	ldi	r24, 0x2B	; 43
    1796:	01 c0       	rjmp	.+2      	; 0x179a <vfprintf+0x366>
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	a7 fc       	sbrc	r10, 7
    179c:	8d e2       	ldi	r24, 0x2D	; 45
    179e:	b6 01       	movw	r22, r12
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17a6:	89 14       	cp	r8, r9
    17a8:	38 f4       	brcc	.+14     	; 0x17b8 <vfprintf+0x384>
    17aa:	b6 01       	movw	r22, r12
    17ac:	80 e3       	ldi	r24, 0x30	; 48
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17b4:	9a 94       	dec	r9
    17b6:	f7 cf       	rjmp	.-18     	; 0x17a6 <vfprintf+0x372>
    17b8:	8a 94       	dec	r8
    17ba:	f3 01       	movw	r30, r6
    17bc:	e8 0d       	add	r30, r8
    17be:	f1 1d       	adc	r31, r1
    17c0:	80 81       	ld	r24, Z
    17c2:	b6 01       	movw	r22, r12
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17ca:	81 10       	cpse	r8, r1
    17cc:	f5 cf       	rjmp	.-22     	; 0x17b8 <vfprintf+0x384>
    17ce:	22 20       	and	r2, r2
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <vfprintf+0x3a0>
    17d2:	42 ce       	rjmp	.-892    	; 0x1458 <vfprintf+0x24>
    17d4:	b6 01       	movw	r22, r12
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 11 0c 	call	0x1822	; 0x1822 <fputc>
    17de:	2a 94       	dec	r2
    17e0:	f6 cf       	rjmp	.-20     	; 0x17ce <vfprintf+0x39a>
    17e2:	f6 01       	movw	r30, r12
    17e4:	86 81       	ldd	r24, Z+6	; 0x06
    17e6:	97 81       	ldd	r25, Z+7	; 0x07
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <vfprintf+0x3ba>
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	9f ef       	ldi	r25, 0xFF	; 255
    17ee:	2b 96       	adiw	r28, 0x0b	; 11
    17f0:	e2 e1       	ldi	r30, 0x12	; 18
    17f2:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__epilogue_restores__>

000017f6 <strnlen_P>:
    17f6:	fc 01       	movw	r30, r24
    17f8:	05 90       	lpm	r0, Z+
    17fa:	61 50       	subi	r22, 0x01	; 1
    17fc:	70 40       	sbci	r23, 0x00	; 0
    17fe:	01 10       	cpse	r0, r1
    1800:	d8 f7       	brcc	.-10     	; 0x17f8 <strnlen_P+0x2>
    1802:	80 95       	com	r24
    1804:	90 95       	com	r25
    1806:	8e 0f       	add	r24, r30
    1808:	9f 1f       	adc	r25, r31
    180a:	08 95       	ret

0000180c <strnlen>:
    180c:	fc 01       	movw	r30, r24
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	70 40       	sbci	r23, 0x00	; 0
    1812:	01 90       	ld	r0, Z+
    1814:	01 10       	cpse	r0, r1
    1816:	d8 f7       	brcc	.-10     	; 0x180e <strnlen+0x2>
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	8e 0f       	add	r24, r30
    181e:	9f 1f       	adc	r25, r31
    1820:	08 95       	ret

00001822 <fputc>:
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	fb 01       	movw	r30, r22
    182c:	23 81       	ldd	r18, Z+3	; 0x03
    182e:	21 fd       	sbrc	r18, 1
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <fputc+0x16>
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f ef       	ldi	r25, 0xFF	; 255
    1836:	2c c0       	rjmp	.+88     	; 0x1890 <fputc+0x6e>
    1838:	22 ff       	sbrs	r18, 2
    183a:	16 c0       	rjmp	.+44     	; 0x1868 <fputc+0x46>
    183c:	46 81       	ldd	r20, Z+6	; 0x06
    183e:	57 81       	ldd	r21, Z+7	; 0x07
    1840:	24 81       	ldd	r18, Z+4	; 0x04
    1842:	35 81       	ldd	r19, Z+5	; 0x05
    1844:	42 17       	cp	r20, r18
    1846:	53 07       	cpc	r21, r19
    1848:	44 f4       	brge	.+16     	; 0x185a <fputc+0x38>
    184a:	a0 81       	ld	r26, Z
    184c:	b1 81       	ldd	r27, Z+1	; 0x01
    184e:	9d 01       	movw	r18, r26
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	20 83       	st	Z, r18
    1856:	31 83       	std	Z+1, r19	; 0x01
    1858:	8c 93       	st	X, r24
    185a:	26 81       	ldd	r18, Z+6	; 0x06
    185c:	37 81       	ldd	r19, Z+7	; 0x07
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	26 83       	std	Z+6, r18	; 0x06
    1864:	37 83       	std	Z+7, r19	; 0x07
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <fputc+0x6e>
    1868:	8b 01       	movw	r16, r22
    186a:	ec 01       	movw	r28, r24
    186c:	fb 01       	movw	r30, r22
    186e:	00 84       	ldd	r0, Z+8	; 0x08
    1870:	f1 85       	ldd	r31, Z+9	; 0x09
    1872:	e0 2d       	mov	r30, r0
    1874:	09 95       	icall
    1876:	89 2b       	or	r24, r25
    1878:	e1 f6       	brne	.-72     	; 0x1832 <fputc+0x10>
    187a:	d8 01       	movw	r26, r16
    187c:	16 96       	adiw	r26, 0x06	; 6
    187e:	8d 91       	ld	r24, X+
    1880:	9c 91       	ld	r25, X
    1882:	17 97       	sbiw	r26, 0x07	; 7
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	16 96       	adiw	r26, 0x06	; 6
    1888:	8d 93       	st	X+, r24
    188a:	9c 93       	st	X, r25
    188c:	17 97       	sbiw	r26, 0x07	; 7
    188e:	ce 01       	movw	r24, r28
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <__ultoa_invert>:
    189a:	fa 01       	movw	r30, r20
    189c:	aa 27       	eor	r26, r26
    189e:	28 30       	cpi	r18, 0x08	; 8
    18a0:	51 f1       	breq	.+84     	; 0x18f6 <__ultoa_invert+0x5c>
    18a2:	20 31       	cpi	r18, 0x10	; 16
    18a4:	81 f1       	breq	.+96     	; 0x1906 <__ultoa_invert+0x6c>
    18a6:	e8 94       	clt
    18a8:	6f 93       	push	r22
    18aa:	6e 7f       	andi	r22, 0xFE	; 254
    18ac:	6e 5f       	subi	r22, 0xFE	; 254
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	af 4f       	sbci	r26, 0xFF	; 255
    18b6:	b1 e0       	ldi	r27, 0x01	; 1
    18b8:	3e d0       	rcall	.+124    	; 0x1936 <__ultoa_invert+0x9c>
    18ba:	b4 e0       	ldi	r27, 0x04	; 4
    18bc:	3c d0       	rcall	.+120    	; 0x1936 <__ultoa_invert+0x9c>
    18be:	67 0f       	add	r22, r23
    18c0:	78 1f       	adc	r23, r24
    18c2:	89 1f       	adc	r24, r25
    18c4:	9a 1f       	adc	r25, r26
    18c6:	a1 1d       	adc	r26, r1
    18c8:	68 0f       	add	r22, r24
    18ca:	79 1f       	adc	r23, r25
    18cc:	8a 1f       	adc	r24, r26
    18ce:	91 1d       	adc	r25, r1
    18d0:	a1 1d       	adc	r26, r1
    18d2:	6a 0f       	add	r22, r26
    18d4:	71 1d       	adc	r23, r1
    18d6:	81 1d       	adc	r24, r1
    18d8:	91 1d       	adc	r25, r1
    18da:	a1 1d       	adc	r26, r1
    18dc:	20 d0       	rcall	.+64     	; 0x191e <__ultoa_invert+0x84>
    18de:	09 f4       	brne	.+2      	; 0x18e2 <__ultoa_invert+0x48>
    18e0:	68 94       	set
    18e2:	3f 91       	pop	r19
    18e4:	2a e0       	ldi	r18, 0x0A	; 10
    18e6:	26 9f       	mul	r18, r22
    18e8:	11 24       	eor	r1, r1
    18ea:	30 19       	sub	r19, r0
    18ec:	30 5d       	subi	r19, 0xD0	; 208
    18ee:	31 93       	st	Z+, r19
    18f0:	de f6       	brtc	.-74     	; 0x18a8 <__ultoa_invert+0xe>
    18f2:	cf 01       	movw	r24, r30
    18f4:	08 95       	ret
    18f6:	46 2f       	mov	r20, r22
    18f8:	47 70       	andi	r20, 0x07	; 7
    18fa:	40 5d       	subi	r20, 0xD0	; 208
    18fc:	41 93       	st	Z+, r20
    18fe:	b3 e0       	ldi	r27, 0x03	; 3
    1900:	0f d0       	rcall	.+30     	; 0x1920 <__ultoa_invert+0x86>
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__ultoa_invert+0x5c>
    1904:	f6 cf       	rjmp	.-20     	; 0x18f2 <__ultoa_invert+0x58>
    1906:	46 2f       	mov	r20, r22
    1908:	4f 70       	andi	r20, 0x0F	; 15
    190a:	40 5d       	subi	r20, 0xD0	; 208
    190c:	4a 33       	cpi	r20, 0x3A	; 58
    190e:	18 f0       	brcs	.+6      	; 0x1916 <__ultoa_invert+0x7c>
    1910:	49 5d       	subi	r20, 0xD9	; 217
    1912:	31 fd       	sbrc	r19, 1
    1914:	40 52       	subi	r20, 0x20	; 32
    1916:	41 93       	st	Z+, r20
    1918:	02 d0       	rcall	.+4      	; 0x191e <__ultoa_invert+0x84>
    191a:	a9 f7       	brne	.-22     	; 0x1906 <__ultoa_invert+0x6c>
    191c:	ea cf       	rjmp	.-44     	; 0x18f2 <__ultoa_invert+0x58>
    191e:	b4 e0       	ldi	r27, 0x04	; 4
    1920:	a6 95       	lsr	r26
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	77 95       	ror	r23
    1928:	67 95       	ror	r22
    192a:	ba 95       	dec	r27
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__ultoa_invert+0x86>
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	61 05       	cpc	r22, r1
    1932:	71 05       	cpc	r23, r1
    1934:	08 95       	ret
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	0a 2e       	mov	r0, r26
    193c:	06 94       	lsr	r0
    193e:	57 95       	ror	r21
    1940:	47 95       	ror	r20
    1942:	37 95       	ror	r19
    1944:	27 95       	ror	r18
    1946:	ba 95       	dec	r27
    1948:	c9 f7       	brne	.-14     	; 0x193c <__ultoa_invert+0xa2>
    194a:	62 0f       	add	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	95 1f       	adc	r25, r21
    1952:	a0 1d       	adc	r26, r0
    1954:	08 95       	ret

00001956 <__prologue_saves__>:
    1956:	2f 92       	push	r2
    1958:	3f 92       	push	r3
    195a:	4f 92       	push	r4
    195c:	5f 92       	push	r5
    195e:	6f 92       	push	r6
    1960:	7f 92       	push	r7
    1962:	8f 92       	push	r8
    1964:	9f 92       	push	r9
    1966:	af 92       	push	r10
    1968:	bf 92       	push	r11
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	ca 1b       	sub	r28, r26
    1980:	db 0b       	sbc	r29, r27
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	09 94       	ijmp

00001988 <__epilogue_restores__>:
    1988:	2a 88       	ldd	r2, Y+18	; 0x12
    198a:	39 88       	ldd	r3, Y+17	; 0x11
    198c:	48 88       	ldd	r4, Y+16	; 0x10
    198e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1990:	6e 84       	ldd	r6, Y+14	; 0x0e
    1992:	7d 84       	ldd	r7, Y+13	; 0x0d
    1994:	8c 84       	ldd	r8, Y+12	; 0x0c
    1996:	9b 84       	ldd	r9, Y+11	; 0x0b
    1998:	aa 84       	ldd	r10, Y+10	; 0x0a
    199a:	b9 84       	ldd	r11, Y+9	; 0x09
    199c:	c8 84       	ldd	r12, Y+8	; 0x08
    199e:	df 80       	ldd	r13, Y+7	; 0x07
    19a0:	ee 80       	ldd	r14, Y+6	; 0x06
    19a2:	fd 80       	ldd	r15, Y+5	; 0x05
    19a4:	0c 81       	ldd	r16, Y+4	; 0x04
    19a6:	1b 81       	ldd	r17, Y+3	; 0x03
    19a8:	aa 81       	ldd	r26, Y+2	; 0x02
    19aa:	b9 81       	ldd	r27, Y+1	; 0x01
    19ac:	ce 0f       	add	r28, r30
    19ae:	d1 1d       	adc	r29, r1
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	ed 01       	movw	r28, r26
    19b6:	08 95       	ret

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
